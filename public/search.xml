<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AUR软件包自动更新</title>
    <url>/2021/12/01/aur-ruan-jian-bao-zi-dong-geng-xin/</url>
    <content><![CDATA[<blockquote>
<p>作为一名archlinux用户在日常使用中，维护几个自己的aur包是很正常的现象，其中有一些软件上游是在github上更新的，这时候可能会有些作者定期、频繁的更新上游的软件包，导致某些懒惰的aur维护者懒得跟上作者的节奏手动定期更新，于是-git类型的包就应运而生，这种包才用直接git上游仓库、自动更新版本号并编译的方式来达到自动更新软件的目的。</p>
</blockquote>
<blockquote>
<p>然而编译的过程往往耗费大量时间和计算机性能，对于用户来说可能并不是那么美好，于是一些软件的作者就提供了打包好linux版本的包并将其提供在github仓库的releases，但是很多情况下软件作者要么只提供一个Linux的二进制包、要么只提供一个deb/rpm包，那么就需要我们自己将其打包下来上传到aur仓库来维护arch的版本。那么对于这样的软件我们该怎样实现自动更新呢？本文将以koreader-bin这个包为例子进行介绍</p>
</blockquote>
<h1 id="编写PKGBUILD"><a href="#编写PKGBUILD" class="headerlink" title="编写PKGBUILD"></a>编写PKGBUILD</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Maintainer: zaoqi &lt;zaomir@outlook.com&gt;</span><br><br>pkgname=koreader-bin<br>pkgver=2021.11<br>pkgrel=1<br>pkgdesc=<span class="hljs-string">&quot;An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices&quot;</span><br>arch=(<span class="hljs-string">&quot;x86_64&quot;</span>)<br>url=<span class="hljs-string">&quot;https://github.com/koreader/koreader/&quot;</span><br>license=(<span class="hljs-string">&#x27;AGPL3&#x27;</span>)<br>depends=(<span class="hljs-string">&#x27;sdl2&#x27;</span> <span class="hljs-string">&#x27;fonts-noto-hinted&#x27;</span> <span class="hljs-string">&#x27;fonts-droid-fallback&#x27;</span>)<br><span class="hljs-built_in">source</span>=(<br>  <span class="hljs-string">&quot;https://github.com/koreader/koreader/releases/download/v<span class="hljs-variable">$&#123;pkgver&#125;</span>/koreader-<span class="hljs-variable">$&#123;pkgver&#125;</span>-amd64.deb&quot;</span>)<br>sha512sums=(<span class="hljs-string">&#x27;811adc6a6fb4fef2ed9bb00ceb41b4c4d0cad9e024cb19021c9fad3d1f7dc06e8105fbb0f8410464576b0436e04e3c60e852db32d8c89bc14adf3a36f93223da&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-title">build</span></span>() &#123;<br>  mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;srcdir&#125;</span>/dpkgdir&quot;</span><br>  tar -xvf data.tar.xz -C <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;srcdir&#125;</span>/dpkgdir&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">package</span></span>() &#123;<br>  cp -r <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;srcdir&#125;</span>/dpkgdir&quot;</span>/* <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;pkgdir&#125;</span>&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="调整PKGBUILD版本号有关变量"><a href="#调整PKGBUILD版本号有关变量" class="headerlink" title="调整PKGBUILD版本号有关变量"></a>调整PKGBUILD版本号有关变量</h2><p>在平常笔者手动打包时通常只是简单的将资源的直链填入<code>source</code>，下次更新时自己手动换上新的直链，但既然要自动更新了当然是让这里能够在不需要修改的情况下只需要修改<code>PKGBUILD</code>的<code>pkgver</code>变量就可以自动变为新的直链这样更好。由于github releases提供的直链规则比较统一，而这个软件包的做的命名方式也比较规范，因此如上面代码块中那样我们只需要将直链中的版本号<code>2021.11</code>替换成<code>$&#123;pkgver&#125;</code>这个<code>PKGBUILD</code>中的版本号就行了。这样我们的修改<code>PKGBUILD</code>的时候就只需要修改版本号这一个参数就可以正常的更新软件包了。</p>
<h2 id="更新哈希值"><a href="#更新哈希值" class="headerlink" title="更新哈希值"></a>更新哈希值</h2><p>然后在arch系统中会根据<code>PKGBUILD</code>来将文件进行打包时会对比一下文件的哈希值来保证文件的完整性，因此我们还需要在每次修改完<code>PKGBUILD</code>的版本号之后运行<code>updpkgsums</code>命令来对<code>PKGBUILD</code>文件中的<code>sha512sums</code>参数进行自动更新。</p>
<p>那么思路就很清晰了，只要我们可以定时自动检测github上对应的版本号并通过脚本自动填入<code>PKGBUILD</code>，然后通过脚本运行<code>updpkgsums</code>来更新哈希值，这样处理过之后的<code>PKGBUILD</code>就可以自动更新到最新版本了。</p>
<p>于是我们有了如下两个选择</p>
<ol>
<li>将这个脚本扔到服务器上设置个定时任务</li>
<li>建立一个github actions来自动更新<code>PKGBUILD</code>并将其<code>PUSH</code>到aur<br>这里我们详细介绍方法二</li>
</ol>
<h1 id="通过github-actions自动更新PKGBUILD并push到aur"><a href="#通过github-actions自动更新PKGBUILD并push到aur" class="headerlink" title="通过github actions自动更新PKGBUILD并push到aur"></a>通过github actions自动更新PKGBUILD并push到aur</h1><h2 id="在actions中自动更新PKGBUILD文件的版本号"><a href="#在actions中自动更新PKGBUILD文件的版本号" class="headerlink" title="在actions中自动更新PKGBUILD文件的版本号"></a>在actions中自动更新PKGBUILD文件的版本号</h2><p>fork项目<a href="https://github.com/zzy-ac/auto-aur-update">https://github.com/zzy-ac/auto-aur-update</a>到你的github仓库中，稍微按照自己软件包最新版本号的获取方式编写一段更新<code>PKGBUILD</code>的脚本将其内容写入仓库中<code>/build-aur-action/entrypoint.sh</code>脚本中函数<code>ver</code>的内容。由于<code>updpkgsums</code>会下载一个source包来对比哈希值，但这个包我们是不需要将其push到aur中去的，因此在脚本最后我们应该用<code>rm</code>将其删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>useradd builder -m<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;builder ALL=(ALL) NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers<br>chmod -R a+rw .<br><br>pacman-key --init<br>pacman -Sy --noconfirm &amp;&amp;<br><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;INPUT_PKGNAME&#125;</span><br><br>ver=$(curl -s https://api.github.com/repos/koreader/koreader/releases/latest | jq <span class="hljs-string">&#x27;.tag_name&#x27;</span>|tr -d <span class="hljs-string">&#x27;v&quot;&#x27;</span>)<br>sed -i <span class="hljs-string">&quot;s/pkgver=.*/pkgver=<span class="hljs-variable">$ver</span>/&quot;</span> PKGBUILD<br>sudo -u builder  updpkgsums<br><br>rm koreader-<span class="hljs-variable">$ver</span>-amd64.deb<br><br><span class="hljs-built_in">echo</span> OK<br></code></pre></td></tr></table></figure>

<p><img src="https://img.m-l.cc/2024-08-12-66b9afddb7d06.webp" alt="image-20211201005340911"></p>
<h2 id="用action将上述修改好的PKGBUILD文件push到aur仓库中去"><a href="#用action将上述修改好的PKGBUILD文件push到aur仓库中去" class="headerlink" title="用action将上述修改好的PKGBUILD文件push到aur仓库中去"></a>用action将上述修改好的PKGBUILD文件push到aur仓库中去</h2><p>在这里我们使用了<a href="https://github.com/KSXGitHub/github-actions-deploy-aur">KSXGitHub/github-actions-deploy-aur</a>这一现成的action来完成这一步骤。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af2931edd.webp" alt="image-20211201005539998"></p>
<p>我们只用参照其编写的README.md中的介绍将对应的参数填入你的<code>main.yml</code>中的对应位置就可以了。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad0a475f0.webp" alt="image-20211201005614409"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9adf16d9cd.webp" alt="image-20211201005640741"></p>
<p>接下来我们只要在仓库中建立一个/数个你要打包的包名命名的文件夹，并将对应的PKGBUILD放入文件夹中就可以了。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9add720207.webp" alt="image-20211201005712531"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b08b10968.webp" alt="image-20211201005737295"></p>
<h2 id="定时运行"><a href="#定时运行" class="headerlink" title="定时运行"></a>定时运行</h2><p>最后设置好每天定时更新的时间也就是yml中的<code>-cron</code>值就可以实现定时检查并更新aur仓库的软件包了。</p>
]]></content>
      <categories>
        <category>archlinux</category>
      </categories>
      <tags>
        <tag>AUR</tag>
      </tags>
  </entry>
  <entry>
    <title>CM311-1a机顶盒刷armbian日记</title>
    <url>/2023/07/24/cm311-1a-ji-ding-he-shua-armbian-ri-ji/</url>
    <content><![CDATA[<blockquote>
<p>前言：进来机顶盒刷机人群日多，其中cm311-1a以其物美价廉，一度广受玩家喜爱，故而本人也采购一台开始了曲折的刷机之路!</p>
</blockquote>
<h2 id="DAY1（失败的尝试。）"><a href="#DAY1（失败的尝试。）" class="headerlink" title="DAY1（失败的尝试。）"></a>DAY1（失败的尝试。）</h2><p>自信满满——有点不对啊？——寄了寄了！</p>
<p>由于第一日还未准备好写笔记，所以第一日的折腾内容忘记拍照/截图了，只有两张拆机后的图，不过不要紧，今天的步骤明天都得再来1～N遍的(TдT) ，写到明天的笔记去吧。</p>
<h3 id="自信满满"><a href="#自信满满" class="headerlink" title="自信满满"></a>自信满满</h3><p>刚拿到机子，回家开机，adb连接，芜湖都没问题十分丝滑！</p>
<p>做系统盘，挎挎完成，哎呦好像挺简单？</p>
<p>装启动U盘系统！挎挎，毫无压力的进入armbian。</p>
<p>哎呦到这里似乎都还蛮简单的？</p>
<h3 id="有点不对啊？"><a href="#有点不对啊？" class="headerlink" title="有点不对啊？"></a>有点不对啊？</h3><p>继续按照教程重启！</p>
<p>哎？怎么关机命令无效？怎么回事？要不我直接关电源算了？试试吧</p>
<p>啊寄！</p>
<p>灯亮了，但是路由器识别不到设备了，找不到设备ip了。貌似砖了？</p>
<h3 id="寄了寄了！"><a href="#寄了寄了！" class="headerlink" title="寄了寄了！"></a>寄了寄了！</h3><p>至此day1的折腾宣告结束，直接变砖了QAQ。只能去京东斥7元巨资买了usb公对公的数据线准备明天的救砖吧。</p>
<p>然后就是研究怎么拆机，一开始以为是只有卡扣的设计，所以尝试硬掰QaQ结果好几个卡扣断裂了的说。</p>
<p>后来查明是后盖还有俩螺丝要拧，星夜去附近小商店2元斥巨资购入一个小螺丝刀，嘤嘤嘤，至此，额外的消费已经达到9元了(╯TдT)╯</p>
<p>成功拆解机顶盒并找到了需要短接的焊点。第一天的瞎折腾到此结束，明天救砖回来再继续弄吧。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aee5b1cfa.webp" alt="image-20230724211329657"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af49d0c9f.webp" alt="image-20230724211537108"></p>
<h2 id="DAY-2-1-5"><a href="#DAY-2-1-5" class="headerlink" title="DAY 2 1.5"></a>DAY <del>2</del> 1.5</h2><h2 id="不用等到day2了！"><a href="#不用等到day2了！" class="headerlink" title="不用等到day2了！"></a>不用等到day2了！</h2><p>突然发现电脑有type-C口，试了一下，果然可以用type-C转usb-a的这种普通手机充电线来刷机顶盒！！！哇咔咔卡卡！！！立省7元！</p>
<p>直接短接、刷入救砖包！</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b076efe19.webp" alt="捕获"></p>
<p>等进度条走完后拔掉数据线，关闭电源不再短接，正常开机进入安卓！</p>
<h2 id="正常的刷机流程"><a href="#正常的刷机流程" class="headerlink" title="正常的刷机流程"></a>正常的刷机流程</h2><h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>打开balena-etcher，下好armbian镜像，解压镜像，用balena-etcher将镜像写入U盘。</p>
<h3 id="开心盒子（其实感觉琢磨琢磨，直接用adb指令也可以，不过懒得琢磨了）"><a href="#开心盒子（其实感觉琢磨琢磨，直接用adb指令也可以，不过懒得琢磨了）" class="headerlink" title="开心盒子（其实感觉琢磨琢磨，直接用adb指令也可以，不过懒得琢磨了）"></a>开心盒子（其实感觉琢磨琢磨，直接用adb指令也可以，不过懒得琢磨了）</h3><p>直接打开开心盒子输入机顶盒ip（进路由器查，或者连上hdmi在屏幕里看。<br>adb连接上机顶盒！</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad5181ce2.webp" alt="捕获-1"></p>
<p>点击调试，点击从U盘/SD卡开启，并在点击后迅速将U盘插入！</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af370fa1b.webp" alt="捕获-3"></p>
<p>稍等片刻后，在路由器上确定armbian的ip,并ssh进入u盘系统。</p>
<p>首次进入需要修改root用户密码，创建普通用户，确立时区和语言等：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af83e0735.webp" alt="捕获-4"></p>
<p>然后使用armbian-install -m no开始将U盘系统写入机顶盒！</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad9f562ce.webp" alt="捕获-6"></p>
<p>这里我用的cm311-1a-yst版本所以直接选择305,并使用习惯的ext4文件系统，选择1。</p>
<p>稍等片刻后没有报错并按照提示poweroff关机即可。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad59c0b2c.webp" alt="捕获-7"></p>
<p>关机后，关闭电源，拔掉U盘，重新开机之后即可正常进入机顶盒内的armbian系统！！！</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ade256fb4.webp" alt="捕获-8"></p>
<h2 id="芜湖！！起飞啦！！！"><a href="#芜湖！！起飞啦！！！" class="headerlink" title="芜湖！！起飞啦！！！"></a>芜湖！！起飞啦！！！</h2><p>至此，一个艰苦朴素颇为曲折的armbian就终于装到我们的cm311-1a上去了！！！</p>
<p>（一定要选对内核版本，例如7月24日发布的6.1.40版本内核的包就存在问题，无法正常安装，各种怪事，鬼知道我在意识到是内核问题之前反复救砖了多少回(╯TдT)╯！</p>
<p>获得一台舒适的armbian主机之后应该干些什么呢？今夜过于晚了，博主先睡了，内容留到8月份再水一篇博客啦！哈哈哈哈哈哈！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>armbian</tag>
        <tag>机顶盒</tag>
      </tags>
  </entry>
  <entry>
    <title>CM311-1a机顶盒应用日志</title>
    <url>/2023/08/20/cm311-1a-ji-ding-he-ying-yong-ri-zhi/</url>
    <content><![CDATA[<blockquote>
<p>接上文，在7月份我购买了一台CM311-1a的机顶盒之后，做了许多尝试，包括刷入armbian、尝试不同的版本、部署一些服务。今天在本文中介绍我如今的最终解决方案。</p>
</blockquote>
<h1 id="系统选择与部署方式"><a href="#系统选择与部署方式" class="headerlink" title="系统选择与部署方式"></a>系统选择与部署方式</h1><p>上文中，我选择了参照主流方式直接将armbian系统写入emmc并直接部署应用等等，起初一周体验还算不错。可是很可惜，在我因意外将系统再次弄崩溃之后重新安装时，却发现怎么也装不上去系统了，尝试了几天后，我选择彻底放弃挣扎，重新寻找合适的方案。</p>
<p>经过对<a href="https://github.com/ophub/amlogic-s9xxx-armbian#other-distributions">相关文章</a>的阅读，我发现还有一位名为<a href="https://github.com/Scirese">Scirese</a>的大佬发布了基于armbian底包修改的archarm系统，经过测试发现确实可用后，我果断选择了这一用得最顺手的发行版。</p>
<p>同时由于前文所言，无法将系统正常写入emmc了，迫不得已下，只能选择插上U盘，直接将archarm系统运行在U盘内。不得不说这样做还是有些优势的，不过也确实带来了些许不足。</p>
<p>优势：</p>
<ul>
<li>U盘性能可以比emmc好得多，运行更为流畅、也不容易掉盘</li>
<li>U盘可自由选择容量，不再局限于16G的emmc容量</li>
<li>可以作为双系统使用，保留机器原本的安卓系统，一遍随时拿回去看电视。</li>
</ul>
<p>不足：</p>
<ul>
<li>安卓系统会重写掉U盘内文件的权限，导致U盘内系统无法再次正常使用，必须千万小心避免在插着U盘的情况下将系统重启到安卓</li>
</ul>
<h1 id="部署的服务"><a href="#部署的服务" class="headerlink" title="部署的服务"></a>部署的服务</h1><h2 id="1、Alist"><a href="#1、Alist" class="headerlink" title="1、Alist"></a>1、Alist</h2><p>经典又好用的网盘挂载解析服务，支持webdav,方便得很。</p>
<p>部署方式：</p>
<p>其他系统——使用<a href="https://alist.nn.ci/zh/guide/install/script.html">Alist文档</a>给出的一键脚本部署，其余步骤参考文档。</p>
<p>Archarm——直接<code>yay -S alist-bin</code>安装，并使用。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acb52e7e0.webp" alt="https://img.m-l.cc/2024-08-12-66b9acb52e7e0.webp"></p>
<h2 id="2、Gitea"><a href="#2、Gitea" class="headerlink" title="2、Gitea"></a>2、Gitea</h2><p>Gitea是一款轻量、功能全面的git服务平台，部署简便，使用舒心，安全可靠。</p>
<p>部署方式：</p>
<p>其他系统——使用github给出的<a href="https://github.com/go-gitea/gitea/releases/latest">二进制文件</a></p>
<p>archarm——直接<code>yay -S gitea-bin</code>安装，并使用。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9adb58ed65.webp" alt="https://img.m-l.cc/2024-08-12-66b9adb58ed65.webp"></p>
<h2 id="3、v2raya"><a href="#3、v2raya" class="headerlink" title="3、v2raya"></a>3、v2raya</h2><p>一款好用的科学上网前端程序，部署后直接通过访问和部署，适合服务器体质。</p>
<p>部署方式：</p>
<p>其他系统——使用v2ray官网给出的一键脚本</p>
<p>archarm——直接而从aur安装使用</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac377d878.webp" alt="https://img.m-l.cc/2024-08-12-66b9ac377d878.webp"></p>
<h2 id="4、QQbot部署"><a href="#4、QQbot部署" class="headerlink" title="4、QQbot部署"></a>4、QQbot部署</h2><p>部署一个go-cqhttp后端，然后自研或选择一款合适的框架，实现bot的部署和各个功能的实现。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b09eae094.webp" alt="https://img.m-l.cc/2024-08-12-66b9b09eae094.webp"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>机顶盒+家宽动态公网+ddns确实是一个非常棒的轻量化个人服务器解决方案，机顶盒的低功耗，在日常家庭用电中几乎可以忽略，而且还能在本地城域网内部署上公网服务，对于自己的访问也十分高效。还可以放心的免受云服务器供应商带来的种种监视风险。非常nice！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>机顶盒</tag>
        <tag>archarm</tag>
      </tags>
  </entry>
  <entry>
    <title>EMUI11第三方桌面启动器教程</title>
    <url>/2021/02/04/emui11-di-san-fang-zhuo-mian-qi-dong-qi-jiao-cheng/</url>
    <content><![CDATA[<p>准备：一个第三方起动器，小黑屋，一个电脑（用来激活小黑屋）<br>1、下载第三方启动器<br>2、打开启动器，并在华为的应用设置里设置第三方起动器允许开机自起<br>3、用adb指令激活小黑屋，并在小黑屋中将华为桌面冻结（adb命令使用方法小黑屋有提供完整教程）<br>4、重启手机即可完美使用第三方启动器</p>
]]></content>
      <categories>
        <category>手机折腾</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Gitee Pages 自动部署站点</title>
    <url>/2021/02/27/hexo-gitee-pages-zi-dong-bu-shu-zhan-dian/</url>
    <content><![CDATA[<p>本站使用hexo同时上传到gitee和github，但是gitee的pages服务是不能自动部署的，只能手动在网页部署，所以有大佬开发了在Github上使用的动作：<code>gitee-pages-action</code>&#xff08;<a href="https://github.com/yanglbme/gitee-pages-action">点击查看</a>&#xff09;。只要在某个仓库配置好这个动作就能在往这个仓库提交任何内容时自动让Gitee部署Gitee里面指定仓库的内容。</p>
<p>我们按照这个仓库的文档往Hexo站点的<code>source</code>目录添加<code>.github\workflows\sync.yml</code>这个文件&#xff0c;并在这个文件里面配置要使用的Gitee站点仓库和用户名。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Gitee</span> <span class="hljs-string">Pages</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">yanglbme/gitee-pages-action@master</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># 注意替换为你的 Gitee 用户名</span><br>          <span class="hljs-attr">gitee-username:</span> <span class="hljs-string">zzy-ac</span><br>          <span class="hljs-comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span><br>          <span class="hljs-attr">gitee-password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITEE_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span><br>          <span class="hljs-attr">gitee-repo:</span> <span class="hljs-string">zzy-ac/zzy-ac</span><br>          <span class="hljs-comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span><br>          <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br>          <span class="hljs-attr">https:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<p>经过查阅<a href="https://hexo.io/zh-cn/docs/configuration">Hexo文档</a>发现&#xff0c;Hexo默认会忽略隐藏文件和文件夹&#xff08;包括名称以下划线和 <strong><code>.</code>开头的文件和文件夹</strong>&#xff0c;Hexo的<code>_posts</code>和<code>_data</code>等目录除外&#xff09;。因此需要在后台仓库的<code>_config.yml</code>文件添加这样的配置才能把<code>.github</code>的目录也给带进来。可能已经预留了<code>include</code>属性&#xff0c;建议先搜索这个属性&#xff0c;然后直接往这里面添加。并且由于hexo会默认编译这些文件，因此我们还要忽略它的编译，即在<code>skip_render</code>属性中忽略上述文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">include:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;.github/workflows/sync.yml&quot;</span><br>  <br><span class="hljs-attr">skip_render:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;.github/workflows/sync.yml&quot;</span><br></code></pre></td></tr></table></figure>

<p>此外还应设置往远程仓库部署时不要跳过隐藏文件，由于git bash会默认将<code>.</code>开头的文件/文件夹视为隐藏文件，所以要继续在hexo根目录的<code>_config.yml</code>文件添加配置将<code>deploy</code>这个属性中的<code>ignore_hidden</code>设置为<code>false</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">ignore_hidden:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 添加这个属性值为false</span><br>  <span class="hljs-attr">repo:</span> <br>    <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:你的Gitee仓库.git,要使用的分支名</span><br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:你的Github仓库.git,要使用的分支名</span><br>    <span class="hljs-comment"># 可以先提交Gitee然后再提交Github，也就是把这个Gitee的地址放在前面。这样保证Gitee的站点内容能在Github开始动作之前完成提交。</span><br></code></pre></td></tr></table></figure>

<p>最后千万要注意Github的部署仓库后台的Settings里面也要按照最上面那个仓库说明中那样配置Secrets（<code>GITEE_RSA_PRIVATE_KEY</code>和(<code>GITEE_PASSWORD</code>)的两个密钥。其中：<code>GITEE_RSA_PRIVATE_KEY</code>存放<code>id_rsa</code>私钥；<code>GITEE_PASSWORD</code>存放Gitee帐号的密码），这一步不要忘记了。</p>
<p>按照上述流程配置后，就可以通过github仓库中配置好的动作来自动部署gitee pages了。</p>
<p>（如果遇到需要短信验证码校验。可以关注 Gitee 微信公众号，并绑定 Gitee 帐号，就可以用公众号来接收登录提示了。）<br>（其他详细操作请查看插件作者的<a href="https://github.com/yanglbme/gitee-pages-action/blob/main/README.md">文档</a>）</p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>txt2epub脚本使用教程</title>
    <url>/2022/06/02/how-to-use-txt2epub/</url>
    <content><![CDATA[<blockquote>
<p>项目地址：<br><a href="https://github.com/zzy-ac/txt2epub">https://github.com/zzy-ac/txt2epub</a></p>
</blockquote>
<h1 id="linux设备"><a href="#linux设备" class="headerlink" title="linux设备"></a>linux设备</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zzy-ac/txt2epub.git<br><span class="hljs-built_in">cd</span> txt2epub<br>wget https://raw.githubusercontent.com/zzy-ac/txt2epub/termux/requirements.txt<br>pip3 install -r requirements.txt<br><span class="hljs-comment">#运行</span><br>python3 run.py &lt;/path/of/novel&gt;<br></code></pre></td></tr></table></figure>

<h1 id="Android设备"><a href="#Android设备" class="headerlink" title="Android设备"></a>Android设备</h1><h2 id="安装txt2epub"><a href="#安装txt2epub" class="headerlink" title="安装txt2epub"></a>安装txt2epub</h2><p>1、安装termux</p>
<p>2、切换清华镜像源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/apt/termux-main stable main@&#x27;</span> <span class="hljs-variable">$PREFIX</span>/etc/apt/sources.list<br>apt update&amp;&amp;apt upgrade<br></code></pre></td></tr></table></figure>

<p>3、运行如下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://gh.dmnb.cf/https://github.com/zzy-ac/txt2epub/releases/download/files/install.sh | bash<br></code></pre></td></tr></table></figure>

<h2 id="使用txt2epub"><a href="#使用txt2epub" class="headerlink" title="使用txt2epub"></a>使用txt2epub</h2><ol>
<li>将txt小说重命名为<code>《书名》()作者：作者名.txt</code>的形式，并放入手机Download目录下的ebooks文件夹(如果没有这个文件夹请自建一个)</li>
<li>在termux中运行<code>txt2epub</code>指令进行转格式，转格式生成的epub和kepub文件会放到手机的Download/ebooks目录中</li>
</ol>
<h1 id="windows设备"><a href="#windows设备" class="headerlink" title="windows设备"></a>windows设备</h1><p><del>本人没有windows设备，各位自行琢磨，原理跟linux差不多。</del></p>
<p><del>自己把pandoc和kepubify的exe版本下载到txt2epub文件夹然后把run.py中相关的路径修改一下应该就好了</del>。</p>
<p><del>之前看得太疏忽了，这个脚本还用到了一大堆什么cp、mv、cat、wget等等的linux/unix指令，Windows要用还要改不少东西，有感兴趣的可以去改一改，我不用win的就懒得弄了（都用windows了直接easypub不香吗？搁这折腾个屁，这脚本就是因为linux下面没有easypub，calibre又太慢了所以才写的）</del></p>
<p>在chatgpt和天翼云电脑的帮助下，于2023年4月5日，实现了脚本中引用的shell指令向python原生脚本的转换，完成了对windows平台的支持，在天翼云电脑的win server2016环境中运行正常，win版本采用直接打包压缩包的形式，压缩包内放置了kepubify、kindlegen、pandoc等程序的二进制程序，方便windows用户无脑使用。<br>经过测试目前可将命名格式符合要求的文本直接拖动到run.py文件上来一键生成epub和kepub文件（需将py文件的默认打开方式设置为Python,如下图：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aff3cf3bc.webp" alt="https://img.m-l.cc/2024-08-12-66b9aff3cf3bc.webp"></p>
<h4 id="windows版本注意事项：千万要看压缩包里的必读！！不然出错不负责-md文件"><a href="#windows版本注意事项：千万要看压缩包里的必读！！不然出错不负责-md文件" class="headerlink" title="windows版本注意事项：千万要看压缩包里的必读！！不然出错不负责.md文件"></a>windows版本注意事项：千万要看<code>压缩包里的必读！！不然出错不负责.md</code>文件</h4>]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Huawei无Google框架情况下完美使用YouTube</title>
    <url>/2021/10/08/huawei-wu-google-kuang-jia-qing-kuang-xia-wan-mei-shi-yong-youtube/</url>
    <content><![CDATA[<blockquote>
<p>不知不觉，美国全方位制裁华为已经过去了很长时间了，Google响应美利坚的号召也早已正式停止了对华为设备的Google服务端支持，即使安装上去也会提示不在Google支持的设备内，这种情况无疑让很多国内用户产生了各种困扰。<br>然而只要简单思考一下便会发现，如果对Google服务端依赖不高（你都买华为了能高到哪里去？）那么相必对相当一部分人来说，Google服务的作用便跟博主一样仅仅是因为YouTube的强制依赖。<br>如果你也与我情况类似，那么在本片文章里我会简单的告诉你在华为手机上免Google框架而使用YouTube的方法</p>
</blockquote>
<p>  在互联网上一直有着这样一批人厌恶着各种闭源的软件和服务，当然Google框架这种封闭、强硬且极其占用手机内存和后台的异端自然也是被排斥的，故microG－－伪Google框架应运而生，microG是一个Google框架的开源替代，虽然目前项目还无法完全取代Google框架的作用，但仅仅是解决YouTube对Google框架的依赖是没有问题的。</p>
<p>  于是一个名为”vanced”的团队便基于microG制作了一款将原版YouTube对Google Play Service的依赖替换为对microG的依赖，然后使得在无法正常安装Google服务端设备上登录Google账号使用YouTube，并因此做出两个软件也既是我们今天所需要用到的两款软件<code>Vanced microG</code>以及<code>YouTube Vanced</code></p>
<p>  通过这两款软件我们可以在免于Google服务的情况下顺利体验YouTube。</p>
<p>  而你需要做的很简单，下好两个软件，安装上去，然后登录Google账号即可（请自备过墙梯）</p>
<p>  同时这款软件针对YouTube长期为人诟病的广告进行了去除并解锁了原版YouTube只有会员能用的后台播放功能。</p>
<p>  由于新版本的YouTube Vanced采用apks的打包模式，没有Google商店的我们普遍很难正常安装，因此博主提供两种推荐：</p>
<ul>
<li><p>用SAI(自己去酷安找)来安装apks版的安装包（可以正常的完美使用）</p>
</li>
<li><p>用博主提取并重新打包的apk包（部分翻译会有问题，功能性没啥影响）</p>
<p>下面，博主为大家准备好了这两款所需应用的安装包（由于博主个人喜好已经将软件都包名由YouTube Vanced修改为YouTube了，本来还想换一换图标的不过为了和应用开屏界面统一就没换）</p>
<p>Vanced MicroG：<a href="http://pan.zzy-ac.top/OneDrive/Other-Things/Android-Apps/Vanced%2BMicroG_0.2.22.212658_apkcombo.com.apk">点击下载</a><br>Vanced YouTuBe(apk)：<a href="http://pan.zzy-ac.top/OneDrive/Other-Things/Android-Apps/YouTube_16.29.39.apk">点击下载</a><br>Vanced YouTuBe(apks)：<a href="http://pan.zzy-ac.top/OneDrive/Other-Things/Android-Apps/YouTube_16.29.39.apks">点击下载</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>手机折腾</category>
      </categories>
      <tags>
        <tag>手机折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>Kobo Glo HD手动恢复出厂设置(简体中文教程)</title>
    <url>/2022/01/10/kobo-glo-hd-shou-dong-hui-fu-chu-han-she-zhi-jian-ti-zhong-wen-jiao-cheng/</url>
    <content><![CDATA[<p><strong>如果重设出厂设定未能解决问题，您可以尝试手动重设出厂设定，将您的eReader 还原为其原始设定。</strong></p>
<p>在手动原厂重设之后，您将需要再次设定并同步您的eReader。</p>
<p><strong>尝试手动重设之前</strong></p>
<ol>
<li><p>尝试<a href="https://help.kobo.com/hc/zh-tw/articles/360017605114">原厂重设</a>步骤，看看能否解决问题。如果重设出厂设定未能解决问题，您可以尝试手动重设出厂设定，将您的eReader 还原为其原始设定。</p>
</li>
<li><p>验证您拥有的eReader。<br>若您不确定自己的Kobo eReader 型号，请依照本文中的步骤操作：<a href="https://help.kobo.com/hc/zh-tw/articles/360017765753">Kobo eReader 型号</a>。</p>
</li>
</ol>
<p><strong>谨记事项</strong></p>
<p>如果您在eReader 执行重设出厂设定，您将会：</p>
<ul>
<li>将eReader 中的书籍全部移除。<br>在重设成出厂预设值之后，您可以重新下载透过Kobo 购买的任何书籍。</li>
<li>移除使用电脑新增至eReader 的书籍。<br>例如，如果您<a href="https://help.kobo.com/hc/zh-tw/articles/360024775093">使用电脑新增了不受保护的PDF 和ePub 档案</a>，则这些档案将被删除。</li>
<li>自从上次同步eReader 之后您在书籍中建立的任何书签与附注将会遗失。</li>
<li>登出eReader 的帐户。</li>
<li>重设所有设定与偏好设定。</li>
<li>将eReader 恢复为原始设定。</li>
</ul>
<p><strong>开始之前：</strong></p>
<ul>
<li>请将您的eReader 充电至少1 小时。</li>
<li>请确保您已连线至Wi Fi。</li>
</ul>
<ol>
<li>如果可能，请关闭电子阅读器。<br><strong>注</strong>：如果电子阅读器没有关闭’吨，请尝试按住电源按钮，直到屏幕上看到’ Powered off ‘ 。</li>
<li>将回形针插入Micro USB插槽旁边的小孔，然后轻轻推动。<br>您’感到被点击，您的电子书阅读器将自行重置。</li>
<li>在萤幕上看到方形图示时，请将回纹针插入Micro USB 插槽旁边的小孔，然后轻轻地推按进去。</li>
<li>再重复执行步骤3 两次。</li>
<li>您eReader 萤幕会变黑，并显示出「重大错误」讯息。别担心，这是正常的状况。</li>
<li>点击屏幕底部的✔复选标记图标以重置您的电子阅读器。 您将在屏幕上看到’恢复消息。</li>
</ol>
<h3 id="设定您的eReader"><a href="#设定您的eReader" class="headerlink" title="设定您的eReader"></a><strong>设定您的eReader</strong></h3><p>重设eReader 后，透过Wi Fi 或使用电脑的Kobo Desktop 应用程式设定eReader。</p>
<ul>
<li><a href="https://help.kobo.com/hc/zh-tw/articles/360017439594">在Wi Fi 上设定Kobo eReader</a></li>
<li><a href="https://help.kobo.com/hc/zh-tw/articles/360017598633">使用电脑设定Kobo eReader</a></li>
</ul>
<p><strong>备注</strong>：若您透过Wi Fi 设定Kobo eReader 时遇到问题，<a href="https://www.kobo.com/us/en/p/desktop">请在电脑上使用Kobo Desktop 应用程式</a>来设定eReader。</p>
<blockquote>
<p>注全文转载并翻译自kobo<a href="https://help.kobo.com/hc/zh-tw/articles/360017765773-%E6%89%8B%E5%8B%95%E6%81%A2%E5%BE%A9%E5%87%BA%E5%BB%A0%E8%A8%AD%E7%BD%AE%E7%82%BAKobo-Glo-HD">官方文档</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Kobo Glo HD</category>
      </categories>
      <tags>
        <tag>kobo</tag>
      </tags>
  </entry>
  <entry>
    <title>Pot——跨平台优秀翻译工具</title>
    <url>/2023/06/23/pot-kua-ping-tai-you-xiu-fan-yi-gong-ju/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="Pot-Translator-of-Pylogmon"><a href="#Pot-Translator-of-Pylogmon" class="headerlink" title="Pot (Translator of Pylogmon)"></a>Pot (Translator of Pylogmon)</h1><blockquote>
<p>一个跨平台的划词翻译软件 ( <a href="https://pot.pylogmon.com/docs/tutorial/intro">快速上手</a>| <a href="https://pot.pylogmon.com/download">软件下载</a>| <a href="https://pot.pylogmon.com/docs/category/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE">进阶配置</a>|<a href="https://github.com/pot-app/pot-desktop">Github</a>)</p>
</blockquote>
<hr>
<h2 id="名字来源"><a href="#名字来源" class="headerlink" title="名字来源"></a>名字来源</h2><h3 id="pot-Translator-of-Pylogmon-派了个萌的翻译器"><a href="#pot-Translator-of-Pylogmon-派了个萌的翻译器" class="headerlink" title="pot(Translator of Pylogmon | 派了个萌的翻译器)"></a>pot(Translator of Pylogmon | 派了个萌的翻译器)</h3><blockquote>
<p>不用 top 是因为已经有知名 linux 软件占用了<code>top</code>这个名字 所以现在你也可以叫他翻译锅 😂</p>
</blockquote>
<table>
<thead>
<tr>
<th><img src="https://img.m-l.cc/2024-08-12-66b9adbb2510f.webp" alt="img"></th>
<th><img src="https://img.m-l.cc/2024-08-12-66b9af7167971.webp" alt="img"></th>
<th><img src="https://img.m-l.cc/2024-08-12-66b9b03d2b0b9.webp" alt="img"></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><table>
<thead>
<tr>
<th></th>
<th>描述</th>
<th>预览</th>
</tr>
</thead>
<tbody><tr>
<td>划词翻译</td>
<td>选中需要翻译的文本之后，按下划词翻译快捷键即可</td>
<td><img src="https://img.m-l.cc/2024-08-12-66b9b7c203534.gif" alt="img"></td>
</tr>
<tr>
<td>输入翻译</td>
<td>按下输入翻译快捷键，输入需要翻译的文本，<code>Enter</code> 键翻译</td>
<td><img src="https://img.m-l.cc/2024-08-12-66b9b7d32f1d8.gif" alt="img"></td>
</tr>
<tr>
<td>插件调用</td>
<td>选中需要翻译的文本之后，点击插件图标即可，详情见<a href="https://pot.pylogmon.com/docs/tutorial/config/plugin_config">插件调用</a></td>
<td><img src="https://img.m-l.cc/2024-08-12-66b9b7fb2c77f.gif" alt="img"></td>
</tr>
<tr>
<td>剪切板监听模式</td>
<td>打开翻译窗口，启动剪切板监听模式，复制想要翻译的内容即可</td>
<td><img src="https://img.m-l.cc/2024-08-12-66b9b81803435.gif" alt="img"></td>
</tr>
<tr>
<td>截图OCR</td>
<td>按下快捷键，框选需要识别区域即可</td>
<td><img src="https://img.m-l.cc/2024-08-12-66b9b83093ce0.gif" alt="img"></td>
</tr>
<tr>
<td>截图翻译</td>
<td>按下快捷键，框选需要识别区域即可</td>
<td><img src="https://img.m-l.cc/2024-08-12-66b9b83f1ba0b.gif" alt="img"></td>
</tr>
</tbody></table>
<h2 id="支持接口"><a href="#支持接口" class="headerlink" title="支持接口"></a>支持接口</h2><h3 id="翻译-API"><a href="#翻译-API" class="headerlink" title="翻译 API"></a>翻译 API</h3><ul>
<li>Open AI(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 0.002$/1000token)</li>
<li>阿里翻译(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 每月免费额度 100 万字符)</li>
<li>百度翻译(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 每月免费额度 100 万字符)</li>
<li>彩云小译(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 每月免费额度 100 万字符)</li>
<li>腾讯翻译(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 每月免费额度 500 万字符)</li>
<li>火山翻译(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 每月免费额度 200 万字符)</li>
<li>Lingva 翻译(无需申请，可以直接使用，也可以自建服务(见<a href="https://github.com/TheDavidDelta/lingva-translate">lingva-translate</a>))</li>
<li>谷歌翻译(无需申请，但需要自己解决网络问题，已提供镜像站地址设置选项)</li>
<li>必应翻译(无需申请，直接使用)</li>
<li>必应词典(无需申请，只能查词)</li>
<li>DeepL(无需申请，直接使用(也可以使用自己的 API Key))</li>
</ul>
<h3 id="OCR-API"><a href="#OCR-API" class="headerlink" title="OCR API"></a>OCR API</h3><ul>
<li>Tesseract(无需申请，直接使用)</li>
<li>百度 OCR(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 每月免费额度 1000 次)</li>
<li>腾讯 OCR(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 每月免费额度 1000 次)</li>
<li>火山 OCR(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 一次性免费额度 5000 次)</li>
<li>讯飞 OCR(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a>)</li>
<li>OCR Space(需要申请 <a href="C">api 服务</a> 每月免费额度 25000 次)</li>
<li>Simple Latex(需要申请 <a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">api 服务</a> 一次性免费额度 1000 次)</li>
</ul>
<p>具体的 api 服务申请步骤，见<a href="https://pot.pylogmon.com/docs/category/api%E6%9C%8D%E5%8A%A1%E7%94%B3%E8%AF%B7">申请指南</a></p>
<blockquote>
<p>由于使用 api 产生的费用本程序作者概不负责</p>
</blockquote>
<h1 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h1><p>这款翻译、ORC程序具备优良的可用性和简洁性，一个总共不到30M的RSUT程序，却拥有着优秀的图形化界面和操作逻辑，可以在大多数情况下帮助人们方便的进行各种翻译需求。好用的呢！</p>
]]></content>
  </entry>
  <entry>
    <title>Qexo使用Lsky-Pro兰空图床api</title>
    <url>/2024/05/03/qexo-shi-yong-lsky-pro-lan-kong-tu-chuang-api/</url>
    <content><![CDATA[<blockquote>
<p>最近才终于整明白了在qexo使用lsky的api的方法，在此简单记录一下</p>
</blockquote>
<h1 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h1><p>搭建好lsky后在控制面板里可以看到接口页面，里面包含了api的各种使用方法。和最为关键的接口URL——<code>https://example.com/api/v1</code></p>
<p>那么用curl命令获取token，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X POST https://example.com/api/v1/tokens \<br>-H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>-d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">  &quot;email&quot;: &quot;your_email@example.com&quot;,</span><br><span class="hljs-string">  &quot;password&quot;: &quot;your_password&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure>

<p>使用后获得输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>:&#123;<span class="hljs-string">&quot;token&quot;</span>:<span class="hljs-string">&quot;1|1bJbwlqBfnggmOMEZqXT5XusaIwqiZjCDs7r1Ob5&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure>

<p>当前版本的lsky-pro接口采用 「HTTP 基本验证」的方式验证授权，获取到 token 后，通过设置请求 header 标头来验证请求(Bearer Token)，例如：</p>
<p><code>&quot;Authorization&quot;: &quot;Bearer 1|1bJbwlqBfnggmOMEZqXT5XusaIwqiZjCDs7r1Ob5&quot;</code></p>
<p>（填你自己获取到的token,我这只是放的官方的示例）</p>
<h1 id="编辑qexo图床配置"><a href="#编辑qexo图床配置" class="headerlink" title="编辑qexo图床配置"></a>编辑qexo图床配置</h1><p>如图，将lsky接口文档中的各项信息依次填入即可。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9affb8093f.webp" alt="https://img.m-l.cc/2024-08-12-66b9affb8093f.webp"></p>
<p>需注意，自定义请求头和自定义请求主体中的空格，复制粘贴的可能存在错误，会变成非普通空格的空白符号。这里建议手打。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acf93b703.webp" alt="https://img.m-l.cc/2024-08-12-66b9acf93b703.webp"></p>
<p>在自定义请求主题处填入你想使用的储存桶的id（如果只有一个可以不用管）</p>
<p>自定义请求头只需要token一项就可以了，即内容为：<code>&#123;&quot;Authorization&quot;:&quot;Bearer Bearer 1|1bJbwlqBfnggmOMEZqXT5XusaIwqiZjCDs7r1Ob5&quot;&#125;</code>（填你自己获取到的token,我这只是放的官方的示例）</p>
<h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>填写完成后提交，就完成了qexo中兰空图床的配置。可自行去图片页面进行测试。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad2f8e9dd.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad2f8e9dd.webp"></p>
<p>如图显示上传成功出现预览图和链接，则表明配置无误，直接开始快乐的写文章插图片去吧！</p>
]]></content>
      <categories>
        <category>图床建设</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>SDDM汉化</title>
    <url>/2020/12/18/sddm-han-hua/</url>
    <content><![CDATA[<p>用文本编辑器打开/usr/lib/systemd/system/sddm.service<br>在[Service]下添加Environment=LANG=zh_CN.UTF-8</p>
]]></content>
      <categories>
        <category>archlinux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>archlinux debtap -u 加速</title>
    <url>/2021/03/30/archlinux-debtap-u-jia-su/</url>
    <content><![CDATA[<p>在使用arch一段时间后，大家会发现一个叫做“debtap”的神器，他可以帮助不会打包的小白，轻松的完成对deb格式linux软件包的重新打包。</p>
<p>然而在日常的使用中，大家会发现一个严峻的问题，那就是<code>debtap -u</code>实在是太慢了！！！<br>这能忍吗？！<br>这不能忍！</p>
<p>在经过了第一波草率的观察后笔者发现，debtap的bin文件竟然是一个shell脚本？？？</p>
<p>又经过一番草率的观察后笔者发现，原来debtap的更新之所以那么慢，是因为它还需要同步debian和ubuntu的软件源来解决部分依赖问题。然而设计者，在设计之初，并未考虑到中国网络环境的影响，使用的debian、ubuntu的官方源。</p>
<p>因此，我们只需要将<code>/bin/debtap</code>文件中的包含有</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//ftp.debian<span class="hljs-meta">.org</span>/<br></code></pre></td></tr></table></figure>
<p>字样的部分替换为任意国内镜像站的域名例如中科大源的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/<br></code></pre></td></tr></table></figure>
<p>即可</p>
<p>同理将后文中的ubuntu源的替换为国内镜像源即可<br>搜索debtap文件中的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>archive.ubuntu.com/<br></code></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/<br></code></pre></td></tr></table></figure>
<p>至此，你已经完成了对debtap本地换源的任务，接下来使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">debtap -u<br></code></pre></td></tr></table></figure>
<p>来尽情的享受丝滑的更新体验吧！～</p>
]]></content>
      <categories>
        <category>archlinux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在archlinux中使用sabaki运行围棋ai引擎katago</title>
    <url>/2022/08/11/archlinux-katago-sabaki/</url>
    <content><![CDATA[<blockquote>
<p>作为一个常年使用archlinux桌面操作系统的业余围棋爱好者，在经历了围棋ai给围棋界带来的巨大变革之后，能使用强劲的开源围棋ai实时分析、指导下棋，辅助磨炼棋力，实在让人难以拒绝。</p>
<p>同时，作为一个图形界面使用者，为ai引擎们寻找一个功能全面而使用方便的gui程序，属实重要。</p>
</blockquote>
<p>近年来各类强大的开源围棋ai兴起，基于个人喜好，本文选用katago进行介绍。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Katago"><a href="#Katago" class="headerlink" title="Katago"></a>Katago</h2><p>截至 2021 年 1 月，KataGo 是最强大的在线开源围棋机器人之一。KataGo 使用类似于 AlphaZero 的过程进行训练，并进行了许多增强和改进，并且能够在没有外部数据的情况下完全从零开始快速达到顶级水平，仅通过自我游戏即可实现提高。</p>
<h2 id="Sabaki"><a href="#Sabaki" class="headerlink" title="Sabaki"></a>Sabaki</h2><p>一个优雅的围棋棋盘和 SGF 编辑器，适合更文明的时代。</p>
<p>sabaki是一款功能全面而简单易用且支持包括gnugo、katago以及leela等引擎的开源图形化围棋工具。</p>
<h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><h2 id="sabaki"><a href="#sabaki" class="headerlink" title="sabaki"></a>sabaki</h2><p>aur源中已经有人将sabaki打包，因此开源直接使用yay/paru等aur-help程序进行安装例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yay -S sabaki<br><span class="hljs-comment"># 或者</span><br>paru -S sabaki<br></code></pre></td></tr></table></figure>

<p>此外，博主还将本程序打包进了自己的私人仓库，因此如果不想自己编译，也可以直接添加博主的私人仓库，之后直接从仓库中下载编译好的包进行安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加[zzy-ac]仓库</span><br>[zzy-ac]<br>SigLevel=Never<br>Server = https://github.com/zzy-ac/repo/releases/download/x86_64/<br>Server = https://gh.dmnb.cf/https://github.com/zzy-ac/repo/releases/download/x86_64/<br><br><span class="hljs-comment"># 更新源</span><br><br>sudo pacman -Syu<br><br><span class="hljs-comment"># 安装sabaki</span><br>sudo pacman -S sabaki<br><br></code></pre></td></tr></table></figure>

<h2 id="安装Katago"><a href="#安装Katago" class="headerlink" title="安装Katago"></a>安装Katago</h2><p>由于katago的编译过程过于繁琐（博主电脑不大行编译起来太慢了）所以博主这里选择直接从<a href="https://github.com/lightvector/KataGo/releases/">releases</a>页面下载最新版本<a href="https://github.com/lightvector/KataGo/releases/download/v1.11.0/katago-v1.11.0-cuda11.1-linux-x64.zip">katago-v1.11.0-cuda11.1-linux-x64.zip</a>的二进制包，直接使用。</p>
<p>由于使用的cuda版，因此需要安装依赖：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo pacman -S cudnn<br></code></pre></td></tr></table></figure>

<p>之后需要下载Katago训练形成的权重文件：<a href="https://katagotraining.org/networks/%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A">https://katagotraining.org/networks/，如下图：</a></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af7c5ae55.webp" alt="image-20220811165920792"></p>
<p>之后，解压缩katago的压缩包，将文件名为kata1-b60c320-s6372316160-d2964581281.bin.gz(kata1-后面的字符可能随版本不同有所不同，请自行辨别)放入文件夹下。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac8588967.webp" alt="image-20220811171236578">在终端打开该文件夹，执行如下指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./katago genconfig -model kata1-b60c320-s6372316160-d2964581281.bin.gz -output sabaki.cfg<br></code></pre></td></tr></table></figure>

<p>之后会问你如下一些问题，你可以照着我的来，也可以根据自己的情况选择性的自定义配置或使用默认配置</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af05b85bb.webp" alt="image-20220811171149406"></p>
<p>此后，katago将会根据训练形成的权重文件生成文件名为sabaki.cfg的配置文件。</p>
<p>将该文件夹重命名为katago并移动至/opt目录下</p>
<h2 id="在Sabaki中启用Katago"><a href="#在Sabaki中启用Katago" class="headerlink" title="在Sabaki中启用Katago"></a>在Sabaki中启用Katago</h2><ol>
<li>打开sabaki</li>
<li>点击下图图标，并选择管理引擎：</li>
</ol>
<p><img src="https://img.m-l.cc/2024-08-12-66b9adf66ac82.webp" alt="image-20220811171622719"></p>
<ol start="3">
<li>新增配置如下图<br><img src="https://img.m-l.cc/2024-08-12-66b9ac54496a6.webp" alt="image-20220811171713071"></li>
</ol>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>之后你就可以自由的在Sabaki中使用Katago引擎进行围棋训练了。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad04af0c5.webp" alt="image-20220811172125906"></p>
]]></content>
      <categories>
        <category>archlinux</category>
      </categories>
      <tags>
        <tag>katago</tag>
      </tags>
  </entry>
  <entry>
    <title>archlinux上clash-for-windows的安装与使用</title>
    <url>/2022/09/24/archlinux-shang-clash-for-windows-de-an-zhuang-yu-shi-yong/</url>
    <content><![CDATA[<blockquote>
<p>由于近日对魔法上网工具有了新的需求，需要对部分程序单独设置绕过代理，导致原本的v2raya有了很大的不足。在了解到clash能够满足该需求后，与群友展开了探讨，并成功换上clash。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里选择使用aur库中的<code>clash-premium-bin</code>  和 <code>clash-for-windows-electron-bin</code>两个相对开源且功能齐全一些的包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yay -Sa clash-premium-bin clash-for-windows-electron-bin<br></code></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置的话主要就装好包、打开服务之后自己随便调调，把订阅添加好，并打开TUN模式就好。按我的喜好我选择打开了开机自启和并且不要弹出clash主页面。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b01a731aa.webp" alt="image-20220924001912096"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acec757e3.webp" alt="image-20220924002020166"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad3ddecc3.webp" alt="image-20220924002118836"></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>至此你的clash for windows在archlinux上就基本配置好了，如果喜欢你还可以添加自己想要的其他配置，以满足你的个性化需求。</p>
]]></content>
      <categories>
        <category>archlinux哟</category>
      </categories>
      <tags>
        <tag>clash</tag>
      </tags>
  </entry>
  <entry>
    <title>ark-zip包中文乱码解决</title>
    <url>/2021/06/24/ark-zip-bao-zhong-wen-luan-ma-jie-jue/</url>
    <content><![CDATA[<blockquote>
<p>方舟（存档工具）是 KDE 开发的工具。该程序是一个压缩工具，使用户能够从多个文件创建存档。</p>
</blockquote>
<p>　　在archlinux日常使用中ark是一个常用的图形化压缩/解压缩工具，经常用于各种压缩包的处理。<br>　　然而在面对由windows打包的很多zip格式压缩包时，会由于编码错误的原因，导致文件及文件夹的名称出现乱码。<br>　　解决的方法很简单，首先在安装位于aur仓库的<code>p7zip-natspec</code>软件包<br>　　之后打开ark→设置→配置ark→插件菜单，并将菜单中的Info-zip和Libzip两个插件反选，之后选中P7zip插件，然后关闭所有ark窗口，即可正确的显示zip文件的文件名了。</p>
]]></content>
      <categories>
        <category>archlinux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>cf worker反代脚本分享</title>
    <url>/2024/01/22/cf-worker-fan-dai-jiao-ben-fen-xiang/</url>
    <content><![CDATA[<p>反向代理好处多多，既可以帮助中转使得原本无法访问的网站可以直连访问，同时还能实现通过访问自己的自定义域名来访问目标网站从而实现自定义域名的作用。</p>
<p>这里写个一个简短的cf workers可用的反代脚本，在此分享一下，顺便水一篇博客。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">addEventListener(<br>    <span class="hljs-string">&quot;fetch&quot;</span>,<span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>       <span class="hljs-keyword">let</span> url=<span class="hljs-keyword">new</span> URL(event.request.url);<br>       url.hostname=<span class="hljs-string">&quot;example.com&quot;</span>;  <span class="hljs-comment">//你需要反代的域名</span><br>       <span class="hljs-keyword">let</span> request=<span class="hljs-keyword">new</span> Request(url,event.request);<br>       event. respondWith(<br>         fetch(request)<br>       )<br>    &#125;<br>  )<br></code></pre></td></tr></table></figure>

<p>在cf workers中部署好该workers，并将其中的<code>example.com</code>修改为你需要反代的域名即可。</p>
<p>利用此脚本可以实现对github、cdn.jsdelivr.net等不能直连访问的域名的访问，同时还可以用于如：glitch、koyeb等不支持/收费自定义域名PaaS平台服务，用于给部署在这些网站上的服务提供自定义的域名。</p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>cloudflare白嫖计划——将部分子域名用cloudflare进行NS解析</title>
    <url>/2021/04/17/cloudflare-bai-piao-ji-hua-jiang-bu-fen-zi-yu-ming-yong-cloudflare-jin-xing-ns-jie-xi/</url>
    <content><![CDATA[<p>cloudflare白嫖计划？</p>
<h3 id="首先简单说明一下笔者迫切需要用cloudflare解析部分域名的原因："><a href="#首先简单说明一下笔者迫切需要用cloudflare解析部分域名的原因：" class="headerlink" title="首先简单说明一下笔者迫切需要用cloudflare解析部分域名的原因："></a>首先简单说明一下笔者迫切需要用cloudflare解析部分域名的原因：</h3><blockquote>
<p>老白嫖怪，没有自己的服务器，没法自己开ssl,有些资源的调用会很麻烦。</br>Cloudflare免费提供ssl证书，并可以进行强制https。</br>其次就是国外的一些虚拟主机提供商的服务器在国内访问速度不咋地，用cloudflare能稍微快点。</p>
</blockquote>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>使用过CloudFlare dns功能的都知道需要将您的域名注册商帐户中的当前域名服务器替换为域名的 Cloudflare 域名服务器。域名服务器变更的全局传播最多需要 72 小时。这里就不细述了参考文档<br>但是国内访问CloudFlare还不如不使用，那么有没有办法将部分服务器本就在国外的子域名用cf来解析，而其他的则用DNSPos来进行解析呢？</p>
<h4 id="初尝试"><a href="#初尝试" class="headerlink" title="初尝试"></a>初尝试</h4><p>笔者首先进行了经验主义的第一次尝试：将域名用DNSPos来解析然后用NS记录将部分子域名解析到cf.<br>这么做貌似是有效的，在修改后的一周内，笔者的这部分子域名成功使用了cf的解析。<br>但是好景不长，时至今天早晨，cf突然发消息来说笔者的域名的DNS没有用它的，所以把我的解析给停了。（气死！！！）<br>为此笔者可是好生愁苦。</p>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p><del>可是当笔者起床洗漱完，回房时，突然灵光一闪，既然cf不能随意用NS记录来解析子域名，那干脆把整个域名解析到cf,然后将部分在国内的子域名用NS记录解析到DNSPod不就好了？说干就干。</del></p>
<p><del>~ * 第一步</del><br><del>在域名提供商处将DNS解析改成cloudflare提供的记录值。并等待cf解析激活。</del></p>
<p><del>~ * 第二步</del><br><del>在cf成功激活域名的解析后，添加好在国外的记录值，达到最初的目的——（将部分在国外的子域名用cf解析）</del></p>
<p><del>~ * 第三步</del><br><del>将不需要用cf解析的子域名用NS记录解析到原本的DNSPos上。并继续使用之前的解析记录。</del></p>
<p>4月26日更新<br>既然上面内容被划了删除线，那么很显然，依然不对劲，跟上一次的效果一样，一个星期后dns缓存反应过来就把咱给ban了。</p>
<p>经过笔者的琢磨发现，原来NS记录压根不是这么用的。<br>NS可以将子域名交给第三方DNS服务商进行解析，但是提供NS记录的服务商很多，能接收NS记录的子域名的服务商就很少了。<br>目前在国内可以免费使用的服务商中，经过笔者考证，只有阿里云DNS解析可以提供这样的服务。</p>
<p>于是笔者将DNSPod给扔一边去了，由前文可知笔者已经将域名的DNS解析交给了cloudflare来操作。<br>然后我们打开阿里云DNS解析的后台<a href="https://dns.console.aliyun.com/">https://dns.console.aliyun.com/</a>将自己想要解析的子域名添加进来例如你的域名是<code>example.com</code>你要将<code>aaa.example.com</code>单独进行解析，那么你就将aaa.example.com解析到阿里云，然后阿里会给出一个txt记录让你添加到主域名的DNS服务商那里（也就是cloudflare）。添加完成后，阿里云DNS后台这边会显示给你分配了DNS服务器，一般是下列两个。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ns1</span><span class="hljs-selector-class">.alidns</span><span class="hljs-selector-class">.com</span><br><span class="hljs-selector-tag">ns2</span><span class="hljs-selector-class">.alidns</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure>
<p>在cloudflare中添加NS记录，主机记录为aaa,记录类型为NS,记录值为刚刚的两个服务器的地址。</p>
<h4 id="至此，我们就完成了将部分域名使用cloudflare解析，部分使用DNSPod阿里云DNS解析的目的。"><a href="#至此，我们就完成了将部分域名使用cloudflare解析，部分使用DNSPod阿里云DNS解析的目的。" class="headerlink" title="至此，我们就完成了将部分域名使用cloudflare解析，部分使用DNSPod阿里云DNS解析的目的。"></a>至此，我们就完成了将部分域名使用cloudflare解析，部分使用<del>DNSPod</del>阿里云DNS解析的目的。</h4>]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>DNS解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Coding同步Github仓库</title>
    <url>/2022/03/06/coding-syn-github/</url>
    <content><![CDATA[<blockquote>
<p>很多时候当我们访问github仓库时会感到十分显著的延迟问题，由于很多原因，原本可以直接引用到网页中的github直链无法正常使用，仓库的克隆和使用也非常困难。为此大家尝试过各种各样的方法来对github进行提速，有人通过cloudflare搭建反代，有人通过cdn搭建镜像站，也有人通过gitee来同步仓仓库。而今天主要介绍用户coding对github仓库进行实时同步的方法。</p>
</blockquote>
<h1 id="为什么选择Coding"><a href="#为什么选择Coding" class="headerlink" title="为什么选择Coding"></a>为什么选择Coding</h1><p>Coding作为与Gitee齐名的两大国内git服务商，相比于小家子气的码云显得要大气得多。</p>
<p>在Gitee的使用中总存在着各种各样的严苛限制，仓库的大小、对实名认证的需要、pages的手动部署，但最为让人无语的还是它对于超过1M的文件都需要登陆后才能下载的限制，这直接导致了无法在不登陆的情况下引用Gitee仓库的图片直链到自己的网站中来。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b07ba8f6f.webp" alt="image-20220306085214473"></p>
<p>因此，几番辗转之下，博主了解到了Coding这样一个更加开放的国内git平台，在同样提供git服务的前提下，Coding比Gitee减少了许多的限制，其中最重要的就是它和Github一样可以直接提供仓库文件的直链，而不需要所谓的超过1M就得登陆。这让Coding的可实用性得到了巨大的保障。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad8554688.webp" alt="image-20220306085718811"></p>
<h1 id="从Github同步仓库到Coding"><a href="#从Github同步仓库到Coding" class="headerlink" title="从Github同步仓库到Coding"></a>从Github同步仓库到Coding</h1><p>既然决定了使用Coding来对Github仓库进行同步那么接下来就介绍一下步骤：</p>
<h2 id="简单的定时同步Github仓库"><a href="#简单的定时同步Github仓库" class="headerlink" title="简单的定时同步Github仓库"></a>简单的定时同步Github仓库</h2><p>如题，只是简单的同步Github仓库，每天可以定时自动拉去Github的更新，从而实现自动同步的效果。</p>
<ul>
<li>登陆Coding进入<code>项目</code>版块</li>
</ul>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac9aec4e5.webp" alt="image-20220306090630641"></p>
<ul>
<li><p>点击右上角创建项目旁的···</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9addb980d4.webp" alt="image-20220306091422419">并选择导入项目，在导入页面选中Github旁的开始导入按钮。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b01091aea.webp" alt="image-20220306091657284"></p>
</li>
<li><p>在这里你可以选择输入Github用户名来获取想要导入的仓库或者直接输入Github仓库的git地址来进行导入。任选其一开始导入你所需要的仓库。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aeec0e9d8.webp" alt="image-20220306091837496"></p>
</li>
<li><p>稍等一会儿后我们可以看到仓库已经成功的导入Coding了，进入导入的项目中打开我们导入的这一仓库。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad8e24970.webp" alt="image-20220306092153675"></p>
</li>
</ul>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acce871ab.webp" alt="image-20220306092208117"></p>
<ul>
<li>在仓库的设置中选择<code>同步信息</code>标签，并勾选开启自动同步并设置同步时间。</li>
</ul>
<p>至此，最基本的简单同步就已经完成了，每天固定时间，Coding会自动为我们拉取最新的Cithub仓库。</p>
<h2 id="利用Github-Actions实现实时同步Github的每一次push"><a href="#利用Github-Actions实现实时同步Github的每一次push" class="headerlink" title="利用Github Actions实现实时同步Github的每一次push"></a>利用Github Actions实现实时同步Github的每一次push</h2><p>在某些情况下，我们可能不想等到一天之后再同步Github的仓库，而是希望可以将Github的每一次改动都及时的同步过来，这时候我们可以利用Github Actions服务来实现这一功能。</p>
<p>这里我们使用<a href="https://github.com/serverlesslife-cn/sync-repo-to-coding">serverlesslife-cn/sync-repo-to-coding</a>项目来实现。</p>
<h3 id="SSH-密钥配置"><a href="#SSH-密钥配置" class="headerlink" title="SSH 密钥配置"></a>SSH 密钥配置</h3><p>创建一个 <a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key">SSH key</a> ， 将公钥<code>id_rsa.pub</code>保存到 <a href="https://github.com/settings/keys">Github SSH keys</a>和 「CODING 个人账户——&gt; SSH公钥」， 将私钥 <code>id_rsa</code> 在 GitHub 项目的 Settings -&gt; Secrets 路径下配置好 CODING_PRIVATE_KEY</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aeff35d26.webp" alt="add-secret"></p>
<h3 id="创建workflow"><a href="#创建workflow" class="headerlink" title="创建workflow"></a>创建workflow</h3><p>在仓库的.github/workflows目录下创建一个yml文件，并填入如下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">Repo</span> <span class="hljs-string">to</span> <span class="hljs-string">CODING</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>  <span class="hljs-attr">schedule:</span><br>    <span class="hljs-comment"># 每天北京时间0点同步</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span>  <span class="hljs-string">&#x27;0 16 * * *&#x27;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">Repo</span> <span class="hljs-string">to</span> <span class="hljs-string">CODING</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">serverlesslife-cn/sync-repo-to-coding@master</span><br>      <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 在 GitHub Settings-&gt;Secrets 配置 CODING_PRIVATE_KEY</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.CODING_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># 注意替换为你的 GitHub 源仓库地址</span><br>          <span class="hljs-attr">github-repo:</span> <span class="hljs-string">&quot;git@github.com:serverlesslife-cn/sync-repo-to-coding.git&quot;</span><br>          <span class="hljs-comment"># 注意替换为你的 CODING 目标仓库地址</span><br>          <span class="hljs-attr">coding-repo:</span> <span class="hljs-string">&quot;git@e.coding.net:donghui1/serverlesslife/sync-repo-to-coding.git&quot;</span><br></code></pre></td></tr></table></figure>

<p>至此我们基本上完成了，自动实时同步Github的目标，但是我们可以发现，在上述的yml中我们还加入了crontab定时启动的条件，这会让我们每天定时同步Github仓库到Coding——是不是很眼熟？这一功能明明之前在Coding里面就通过自带的同步功能实现了，因此为了避免没必要的浪费行为，我们可以将这一行抹去，改为只有push行为才能触发actions的同步如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">Repo</span> <span class="hljs-string">to</span> <span class="hljs-string">CODING</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">Repo</span> <span class="hljs-string">to</span> <span class="hljs-string">CODING</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">serverlesslife-cn/sync-repo-to-coding@master</span><br>      <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 在 GitHub Settings-&gt;Secrets 配置 CODING_PRIVATE_KEY</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.CODING_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># 注意替换为你的 GitHub 源仓库地址</span><br>          <span class="hljs-attr">github-repo:</span> <span class="hljs-string">&quot;git@github.com:serverlesslife-cn/sync-repo-to-coding.git&quot;</span><br>          <span class="hljs-comment"># 注意替换为你的 CODING 目标仓库地址</span><br>          <span class="hljs-attr">coding-repo:</span> <span class="hljs-string">&quot;git@e.coding.net:donghui1/serverlesslife/sync-repo-to-coding.git&quot;</span><br></code></pre></td></tr></table></figure>



<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>到这里我们就全部完成了从Github仓库同步到Coding仓库的目的了，这样的操作当然是有着各种的用途，例如当你想要使用别人的一个仓库但你网不好用不了Github,那你就可以这样操作来把仓库更快的clong下来；同时如果你用Github当图床觉得太慢了的话，你也可以尝试用这种方法，将上传到Github的图床实时同步到Coding，从而实现多点备份保存，并且提高图片的访问速度。</p>
<p>本文结束，欢迎留言^ v ^ !</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Eink阅读器存储焦虑救赎者</title>
    <url>/2022/05/11/eink-yue-du-qi-cun-chu-jiao-lu-jiu-shu-zhe/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>　　经常使用kindle、kobo等eink阅读器的朋友们，尤其是某些屯书党和漫画党，常会感觉到2G、4G甚至8G、32G的存储空间都有些不够用（反正博主个人是2G的老年机完全够了，不是很理解）。</p>
<p>　　这时一个不限速的超大云空间就显得非常有价值了，如果可以有一个数T乃至数十T大小的云空间，那还有什么书是存不下的呢？但是大多数eink阅读器并不携带这一功能，国内唯一有类似服务的就是和百度网盘合作的小米多看，但百度网盘的下载速度也实在是令人不齿。</p>
<p>　　再此向大家推荐一个方案用于让每一台eink设备都能共享超大的私有云端书库（至少kindle越狱机、kobo、PocketBook和任意安卓设备均可使用）。</p>
<h1 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h1><ol>
<li>一个eink阅读器</li>
<li>koreader最近版与您设备对应的程序</li>
<li>一个天翼云盘、阿里云盘、onedrive、123云盘、和彩云、夸克网盘（或其他alist工具支持云盘）</li>
<li>一个alist列表程序</li>
</ol>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1、给你的eink安装上koreader"><a href="#1、给你的eink安装上koreader" class="headerlink" title="1、给你的eink安装上koreader"></a>1、给你的eink安装上koreader</h2><p>　　从官网<a href="https://github.com/koreader/koreader/releases">KOReader</a>下载最新的koreader安装包用对应的方式安装到你的阅读器上。</p>
<h2 id="2、部署一个alist列表程序"><a href="#2、部署一个alist列表程序" class="headerlink" title="2、部署一个alist列表程序"></a>2、部署一个alist列表程序</h2><p>　　<a href="https://alist-doc.nn.ci/docs/">alist</a>是一个将各类网盘挂载并解析出直链的工具，自带的可以方便的白嫖云盘的资源用来当作下载站或仅作为自己的一个在线云盘、影音站等使用。这里将用到alist自带的webdav服务为eink提供一个普适性较强的网盘工具。</p>
<h3 id="vps部署"><a href="#vps部署" class="headerlink" title="vps部署"></a>vps部署</h3><p>　　如果你有一台服务器的话，可以直接用服务器将alist部署到上面。详情参考<a href="https://alist-doc.nn.ci/docs/install/script">官方文档</a>。</p>
<h3 id="PaaS部署"><a href="#PaaS部署" class="headerlink" title="PaaS部署"></a>PaaS部署</h3><p>　　PaaS是（Platform as a Service）的缩写，是指平台即服务。是一种把服务器平台作为一种服务提供的商业模式。常用的PaaS平台有<a href="https://heroku.com/">Heroku</a>、<a href="https://render.com/">Render</a>等。</p>
<p>　　alist官方提供了对多种PaaS平台的支持，具体操作可以查看<a href="https://alist-doc.nn.ci/docs/install/paas">官方文档</a>，可以从中选择任意一种方案部署你的alist（笔者个人推荐<a href="https://github.com/alist-org/alist-heroku-postgres">Heroku</a>和<a href="https://github.com/alist-org/alist-replit">Repl.it</a>）。</p>
<h2 id="3、挂载你的云盘"><a href="#3、挂载你的云盘" class="headerlink" title="3、挂载你的云盘"></a>3、挂载你的云盘</h2><p>　　alist本身支持如下所示的多种云盘，挑选你自己觉得合适的挂载。（具体挂载流程操作请自行翻阅alist官方文档）</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af89d2449.webp" alt="image-20220511095921873"></p>
<p>*注：阿里云盘、天翼云盘、123云盘、和彩云、夸克网盘、都是在国内能比较方便获取的不限速的大容量网盘，其中阿里云新号完成一些任务后可以获得永久800G左右的空间和十余T的限时空间（一般是几年）；天翼云电信卡、宽带一般都有送数T空间的黄金或铂金会员帐号，也可以去淘宝买永久10T的帐号使用；123是个小企业的云盘，注册就给2t，下载不限速，不过不知道能活多久；和彩云是移动的，注册送1年的1t空间，活动也不少；夸克的话咸鱼可以低价买到88会员送的夸克网盘会员也很大。</p>
<h2 id="上传你的书库"><a href="#上传你的书库" class="headerlink" title="上传你的书库"></a>上传你的书库</h2><p>　　既然你有那么大的空间需求，那么你一定有自己的一个书库将它按你的习惯分类好并上传到你的云盘（虽然alist可以用来上传，但依然更建议用官方的客户端上传这些大量的文件）</p>
<p>　　分类的话最好是只有单级英文目录，该目录下的所有书都放在着一个文件夹下。例如：新建一个名为Network_novel的目录，然后将所有网络小说放入这一文件夹。</p>
<p>　　到此你已经拥有了属于你自己的云书库。</p>
<h2 id="配置alist的webdav账户密码"><a href="#配置alist的webdav账户密码" class="headerlink" title="配置alist的webdav账户密码"></a>配置alist的webdav账户密码</h2><p>　　在alist的<code>管理⇉设置⇉后端</code>页面下找到<code>webdav username</code>和<code>webdav password</code>两个选项，设置为自己想要的账户和密码。</p>
<h2 id="在koreader上挂载你的云盘"><a href="#在koreader上挂载你的云盘" class="headerlink" title="在koreader上挂载你的云盘"></a>在koreader上挂载你的云盘</h2><p>在koreader的<code>工具</code>页面找到<code>云储存</code>选项并进入：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ade85813e.webp" alt="image-20220511101702433"></p>
<p>点击左上角的+号：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9afe3e0623.webp" alt="image-20220511101800154"></p>
<p>在弹出窗口中选择<code>WebDAV</code>选项：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac6529ca2.webp" alt="image-20220511101853401"></p>
<p>服务器显示名称栏填入你想要显示的标签名如：Network novel；</p>
<p>WebDAV地址填入你的<a href="https://alist域名/dav/%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%A6%82%EF%BC%9Ahttps://alist.xxx.xxx/dav/Network_novel">https://alist域名/dav/路径，如：https://alist.xxx.xxx/dav/Network_novel</a> (/Network_novel是上文提到存放网络小说的文件夹，在此你需要将你挂载的这一网盘的虚拟目录设置为/)；</p>
<p><code>用户名</code>和<code>密码</code>填入刚刚设置的<code>webdav username</code>和<code>webdav password</code>;</p>
<p>点击添加按钮添加云盘，依次操作将你的各个目录添加到koreader。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ada63fbbc.webp" alt="image-20220511102625792"></p>
<p>点击刚刚添加好的云盘</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b01502430.webp" alt="image-20220511102856888"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9adab99c37.webp" alt="image-20220511103405124"></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>　　至此你已经拥有了一个属于自己的超大、不限速的在线书库。可以随时下载你的海量书库进行查阅与观看。</p>
<p>　　同时koreader、alist也还有更多有趣的用途，读者可以自行发觉、尝试</p>
]]></content>
      <categories>
        <category>eink</category>
      </categories>
      <tags>
        <tag>eink</tag>
      </tags>
  </entry>
  <entry>
    <title>fcitx5使用搜狗ssf主题</title>
    <url>/2021/05/30/fcitx5-shi-yong-sou-gou-ssf-zhu-ti/</url>
    <content><![CDATA[<blockquote>
<p>Fcitx (Flexible Input Method Framework) ──即小企鹅输入法，它是一个以 GPL 方式发布的输入法平台,可以通过安装引擎支持多种输入法，支持简入繁出，是在 Linux 操作系统中常用的中文输入法。它的优点是，短小精悍、跟程序的兼容性比较好。并且fcitx支持多种多样的主题，可以非常美观。</p>
<p>然而随着时间的更替，fcitx5的出现，很显然，fcitx已经跟不上时代了。但最初fcitx5的皮肤似乎非常简陋，只能在极其有限的范围内改一改颜色。<br>然而笔者今日在交流群里聊天时，突然注意到，原来fcitx5也是可以更换主题的，那么下面开始正题：</p>
</blockquote>
<ul>
<li><p>首先，准备fcitx5一整套，这里不详细介绍过程。</p>
</li>
<li><p>然后准备工具ssfconv<br>archlinux使用<code>pacman -S ssfconv</code>安装，其余发行版自行查阅<a href="https://github.com/fkxxyz/ssfconv">ssfconv的项目地址</a>查看</p>
</li>
<li><p>然后使用下列命令来生成需要的fcitx5主题文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssfconv 目标主题.ssf 目标文件夹 --<span class="hljs-built_in">type</span> fcitx5<br></code></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>之后将包含fcitx5主题文件的目标文件夹放到<code>~/.local/share/fcitx5/themes</code>目录下。进入fcitx5配置切换主题即可</li>
</ul>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><img src="https://img.m-l.cc/2024-08-12-66b9c69ff3c9c.webp" style="width: 380px;height: 240px;">
<img src="https://img.m-l.cc/2024-08-12-66b9c6b71f16b.webp" style="width: 380px;height: 240px;">
<img src="https://img.m-l.cc/2024-08-12-66b9c63390d47.webp" style="width: 380px;height: 240px;">
<img src="https://img.m-l.cc/2024-08-12-66b9c71662f37.webp" style="width: 380px;height: 240px;">
]]></content>
      <categories>
        <category>fcitx5-themes</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>frp隧道开通实现内网穿透</title>
    <url>/2023/09/26/frp-sui-dao-kai-tong-shi-xian-nei-wang-chuan-tou/</url>
    <content><![CDATA[<h1 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h1><p>在日常的使用中我们可能会需要向我们的朋友临时的分享自建的各种服务，因此申请公网ip的意义变得十分重要。然而在日常的使用中我们并不能时时刻刻守候在公网的环境下，无论是无法申请到亦或者申请到了但却不得不出差外地，都会导致我们一段时间内无法正常的向朋友们分享服务。因此frp作为面对这种情况而生的开源工具，很有介绍的价值</p>
<h1 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h1><p>frp 是一种快速反向代理，允许您将位于 NAT 或防火墙后面的本地服务器暴露给 Internet。目前支持TCP和UDP，以及HTTP和HTTPS协议，可以将请求通过域名转发到内部服务。</p>
<p>frp还提供P2P连接模式。</p>
<h1 id="为什么使用-frp-？"><a href="#为什么使用-frp-？" class="headerlink" title="为什么使用 frp ？"></a>为什么使用 frp ？</h1><p>通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，这包括：</p>
<ul>
<li>客户端服务端通信支持 TCP、QUIC、KCP 以及 Websocket 等多种协议。</li>
<li>采用 TCP 连接流式复用，在单个连接间承载更多请求，节省连接建立时间，降低请求延迟。</li>
<li>代理组间的负载均衡。</li>
<li>端口复用，多个服务通过同一个服务端端口暴露。</li>
<li>支持 P2P 通信，流量不经过服务器中转，充分利用带宽资源。</li>
<li>多个原生支持的客户端插件（静态文件查看，HTTPS/HTTP 协议转换，HTTP、SOCK5 代理等），便于独立使用 frp 客户端完成某些工作。</li>
<li>高度扩展性的服务端插件系统，易于结合自身需求进行功能扩展。</li>
<li>服务端和客户端 UI 页面。</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>当我们安装frp后会得到它的服务端（frps）以及客户端（frpc），部分发行版将其分开打包（如archlinux），当我们使用时需要分别在服务器和pc上配置并启动对应程序。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>安装好frps后我们将获得frps.ini以及frps_full.ini两份配置文件，前者为简易版，仅提供最基本的配置，后者则列出了我们可能需要的各种配置及其示例。</p>
<p>在我们的使用中需要首先确定自己的需求并部署对应的配置，如，在此我的需求仅仅是为了跟远方的好朋友连接minecraft，所以我选择仅仅打通TCP和UDP通道用于联机即可。故而采用最基本的默认配置。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure>

<p>之后使用命令启动程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">frps -c /etc/frp/frps.ini<br></code></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>同上编写配置文件frpc.ini并启动程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[common]<br>server_addr = &lt;ip/address&gt;<br>server_port = 7000<br><br>[Minecraft]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 25565<br>remote_port = 25565<br><br>[Minecraft-Voice]<br><span class="hljs-built_in">type</span> = udp<br>local_ip = 127.0.0.1<br>local_port = 24454<br>remote_port = 24454<br></code></pre></td></tr></table></figure>

<p>启动程序为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">frpc -c /etc/frp/frpc.ini<br></code></pre></td></tr></table></figure>

<p>之后允许minecraft的服务端或者正常客户端，并邀请好友测试即可知晓成果。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>glitch托管页面防休眠</title>
    <url>/2021/05/08/glitch-tuo-guan-ye-mian-fang-xiu-mian/</url>
    <content><![CDATA[<blockquote>
<p>Glitch是一个帮助程序员建立理想应用程序的友好社区，对于初学者来说，这个社区简直就像及时雨，他们可以对Glitch中所有的酷炫项目进行调整，做出符合自己想象的网站。</p>
</blockquote>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c74652ff7.webp" data-fancybox="images" data-caption="插图"><img src="https://img.m-l.cc/2024-08-12-66b9c74652ff7.webp"     /></a></center>

<p>然而免费版的glitch网页限制5分钟内没有人访问的话，就会自动进入休眠，这无疑给网站的日常使用带来了不便，只是随便部署上去看看效果那还好说，如果真的要将网站投入使用，必然会引起诸多麻烦。<br>因此需要有一个合适的手段来使glitch网页能够避免休眠。</p>
<h4 id="github-actions（不大行）"><a href="#github-actions（不大行）" class="headerlink" title="github actions（不大行）"></a>github actions（不大行）</h4><p>首先，笔者想到的是用github的action定时服务来完成定时模拟访问的任务。<br>然而github actions需要排队，这样就很难做到真的“定时”访问，往往会超时很久，就无法达成“5分钟自动访问一次的目的”‘</p>
<h4 id="uptimerobot-hexometer-webgazer这些国外的免费站点监控服务（可以用，但不大好使）"><a href="#uptimerobot-hexometer-webgazer这些国外的免费站点监控服务（可以用，但不大好使）" class="headerlink" title="uptimerobot\hexometer\webgazer这些国外的免费站点监控服务（可以用，但不大好使）"></a>uptimerobot\hexometer\webgazer这些国外的免费站点监控服务（可以用，但不大好使）</h4><p>这些其实是可以使用的，能够实现想要的效果，每5分钟自动访问一次，维持glitch不休眠，但是有些被glitch 403，有些直接讲glitch的域名拉黑，并提示你不要滥用，由此，基本需要自己给glitch添加一个自定义域名才能使用。（uptimerobot有群友<a href="https://zhullyb.top">zhullyb</a>表示进行某些设置后可以正常使用）</p>
<h4 id="服务器定时访问任务"><a href="#服务器定时访问任务" class="headerlink" title="服务器定时访问任务"></a>服务器定时访问任务</h4><p>没啥好讲的，直接用服务器设置一个定时访问的任务就好，但是，都有服务器了，为什么不花点时间备个案了直接而部署到服务器呢？</p>
<h4 id="腾讯云的云拨测-or-阿里云的云监控-（推荐！！！）"><a href="#腾讯云的云拨测-or-阿里云的云监控-（推荐！！！）" class="headerlink" title="腾讯云的云拨测 or 阿里云的云监控 （推荐！！！）"></a>腾讯云的云拨测 or 阿里云的云监控 （推荐！！！）</h4><p>跟国外那些的设置没有太大区别，需要自己设置一个用户组，来进行监控。但是可以直接将glitch提供的域名进行监控来达到目的。</p>
<p>就这样，通过上述方法，我们就可以放心的将网页部署到glitch来进行一些简单的网页知识学习与部署。（也就是常说的白嫖）不过正式建站还是不推荐这样进行，有条件还是直接把买个服务器，将网站部署到服务器上吧。(^ w ^~~6)</p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>glitch</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客自定义404页面</title>
    <url>/2021/03/28/hexo-bo-ke-zi-ding-yi-404-ye-mian/</url>
    <content><![CDATA[<p>我们在部署hexo主题时，有时会希望可以制定属于自己的404页面，那么我们该怎么做才能实现用hexo来自定义404页面呢，下面请看教程：</p>
<h5 id="·-首先，hexo-new-page-404创建404页面文件夹"><a href="#·-首先，hexo-new-page-404创建404页面文件夹" class="headerlink" title="· 首先，hexo new page 404创建404页面文件夹"></a>· 首先，<code>hexo new page 404</code>创建404页面文件夹</h5><h5 id="·-之后删除404-index-md文件"><a href="#·-之后删除404-index-md文件" class="headerlink" title="· 之后删除404/index.md文件"></a>· 之后删除<code>404/index.md</code>文件</h5><h5 id="·-下载你想要的404的模板-写一个自己的404页面"><a href="#·-下载你想要的404的模板-写一个自己的404页面" class="headerlink" title="· 下载你想要的404的模板/写一个自己的404页面"></a>· 下载你想要的404的模板/写一个自己的404页面</h5><h5 id="·-将404-html放置到hexo根目录下的-source-文件夹下"><a href="#·-将404-html放置到hexo根目录下的-source-文件夹下" class="headerlink" title="· 将404.html放置到hexo根目录下的./source/文件夹下"></a>· 将404.html放置到hexo根目录下的<code>./source/</code>文件夹下</h5><h5 id="·-将404页面的素材放入-source-404-style文件夹内（没有该文件夹就新建一个）"><a href="#·-将404页面的素材放入-source-404-style文件夹内（没有该文件夹就新建一个）" class="headerlink" title="· 将404页面的素材放入./source/404/style文件夹内（没有该文件夹就新建一个）"></a>· 将404页面的素材放入<code>./source/404/style</code>文件夹内（没有该文件夹就新建一个）</h5><h5 id="·-将404-html内指定资源文件夹的位置修改为-source-404-style"><a href="#·-将404-html内指定资源文件夹的位置修改为-source-404-style" class="headerlink" title="· 将404.html内指定资源文件夹的位置修改为./source/404/style/"></a>· 将<code>404.html</code>内指定资源文件夹的位置修改为<code>./source/404/style/</code></h5><h5 id="·-打开hexo根目录下的-config-yml文件，找到skip-render-这一行添加如下代码"><a href="#·-打开hexo根目录下的-config-yml文件，找到skip-render-这一行添加如下代码" class="headerlink" title="· 打开hexo根目录下的_config.yml文件，找到skip_render:这一行添加如下代码"></a>· 打开hexo根目录下的<code>_config.yml</code>文件，找到<code>skip_render:</code>这一行添加如下代码</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">skip_render:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;404.html&quot;</span><br></code></pre></td></tr></table></figure>
<h5 id="·-执行如下指令将修改好的内容推送到gitee-github"><a href="#·-执行如下指令将修改好的内容推送到gitee-github" class="headerlink" title="· 执行如下指令将修改好的内容推送到gitee/github"></a>· 执行如下指令将修改好的内容推送到gitee/github</h5><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>
<h5 id="·-github-pages可以等待自动部署生效-gitee-pages则需要手动部署或参考Hexo-Gitee-Pages-自动部署站点一文进行自动部署"><a href="#·-github-pages可以等待自动部署生效-gitee-pages则需要手动部署或参考Hexo-Gitee-Pages-自动部署站点一文进行自动部署" class="headerlink" title="· github pages可以等待自动部署生效 | gitee pages则需要手动部署或参考Hexo Gitee Pages 自动部署站点一文进行自动部署"></a>· github pages可以等待自动部署生效 | gitee pages则需要手动部署或参考<a href="/2021/02/27/hexo-gitee-pages-zi-dong-bu-shu-zhan-dian/">Hexo Gitee Pages 自动部署站点</a>一文进行自动部署</h5><h2 id="综上，我们就完成了hexo自定义404页面的工作"><a href="#综上，我们就完成了hexo自定义404页面的工作" class="headerlink" title="综上，我们就完成了hexo自定义404页面的工作"></a>综上，我们就完成了hexo自定义404页面的工作</h2>]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>kobo切换系统字体插件</title>
    <url>/2022/01/09/kobo-qie-huan-xi-tong-zi-ti-cha-jian/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近日介于某群友的需求和建议，决定写一个可以在kobo中一键切换系统字体的插件。于是就抽两分钟写了一个。</p>
<h1 id="所需材料"><a href="#所需材料" class="headerlink" title="所需材料"></a>所需材料</h1><ol>
<li>集成了第三方系统字体的KoboRoot.tgz文件和包含了原版字体的KoboRoot.tgz文件</li>
<li>已经安装好了NikelMenu（必须！！！）</li>
</ol>
<h1 id="写入插件"><a href="#写入插件" class="headerlink" title="写入插件"></a>写入插件</h1><h2 id="1、添加字体固件和脚本"><a href="#1、添加字体固件和脚本" class="headerlink" title="1、添加字体固件和脚本"></a>1、添加字体固件和脚本</h2><p>首先将<a href="https://pan.dmnb.cf/Other/Kobo_Activation/freefont.zip">freefont.zip</a>解压到 <code>.add</code>文件夹下</p>
<p>默认的固件包包括一个原生字体和一个由群友<a href="https://wpa.qq.com/msgrd?v=3&uin=1581755776&site=qq&menu=yes">喻米</a>提供的书刻字体</p>
<h2 id="2、添加NikelMenu选项"><a href="#2、添加NikelMenu选项" class="headerlink" title="2、添加NikelMenu选项"></a>2、添加NikelMenu选项</h2><p>然后在NikelMenu配置文件中加入下列内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">menu_item :main   :Rescan_Books  :nickel_misc  :rescan_books<br>menu_item :main   :Font-OLD :cmd_spawn :quiet:/mnt/onboard/.adds/freefont/old.sh<br>menu_item :main   :Font-NEW :cmd_spawn :quiet:/mnt/onboard/.adds/freefont/new.sh<br></code></pre></td></tr></table></figure>

<h1 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h1><p>写入插件步骤完成后，NikelMenu中增加了 <code>Rescan_Books</code>、<code>Font-OLD</code>、<code>Font-NEW</code> 三个选项其中Font-XXX会起到刷入系统字体包的作用，Rescan_Books将会自动扫描kobo内新增的电子书文件和更新文件(就和插线拔线一样的效果)</p>
<h2 id="切换字体"><a href="#切换字体" class="headerlink" title="切换字体"></a>切换字体</h2><ul>
<li>如上按Font-XXX按钮可以将对应的字体包写入.kobo目录，由于kobo设备处理器性能的不足，建议最好在操作后等待120s。</li>
<li>之后按下Rescan_Books按钮即可将字体包刷入系统中，待更新完毕后就可以使用新字体了</li>
</ul>
<h2 id="使用自定义字体"><a href="#使用自定义字体" class="headerlink" title="使用自定义字体"></a>使用自定义字体</h2><p>kobo是可以相对简单的将大部分自定义字体设置为系统的默认字体的，只需要将自定义字体文件的字体家族信息修改为与系统默认字体一样，在将文件名改成一样，之后压缩成KoboRoot.tgz文件就好了。具体操作略</p>
<h2 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h2><p>不管后续对插件中的脚本也好、字体包也好怎么修改，都最好将原版字体包和脚本保存下来，以方便恢复原样。</p>
<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://img.m-l.cc/2024-08-12-66b9ac3fcf30d.webp" alt="QQ_Image_1641725487369.jpg"></p>
]]></content>
      <categories>
        <category>kobo</category>
      </categories>
      <tags>
        <tag>kobo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下国产游戏手柄-飞智冰原狼测评</title>
    <url>/2023/04/02/linux-xia-guo-chan-you-xi-shou-bing-fei-zhi-bing-yuan-lang-ce-ping/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近在linux设备上玩了许多游戏大作，突然也对手柄游戏起了些兴趣。毕竟游戏和手柄仿佛才是浑然天成的一对，所以在好奇的驱使下，博主决定买个游戏手柄来试试水。与此同时却又有些担心起自己的archlinux系统，能不能正常的进行游戏体验呢？需不需要额外的驱动呢？什么样的手柄更适合呢？在一番尝试后，决定做出此文，以供后来者参考。</p>
<h1 id="选什么手柄"><a href="#选什么手柄" class="headerlink" title="选什么手柄"></a>选什么手柄</h1><p>这个话题似乎没太多好讨论的，正如网上一大堆的测评、视频、文章的介绍那样，有钱御三家，没钱找个国产手柄看着挑。在这里，博主看了一堆视频之后，决定选择最近还比较火的一款不到200元的国产入门手柄“飞智-冰原狼”，这款手柄看测评说的反正是什么线性扳机、无死区、高颜值等等特性，看起来还算不错的样子，所以选择购入。</p>
<h1 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h1><p>下单之后还是非常忐忑的，毕竟官方说法中并没有说明这款手柄对linux或者steam deck的支持，去问京东客服得到的答复也是否定的，所以就不清楚到底行不行。（不过好在是京东自营买的，可以七天无理由也不慌）</p>
<p>手柄到手后是一个简单的开箱：<br><img src="https://img.m-l.cc/2024-08-12-66b9ac6abefc9.webp" alt="https://img.m-l.cc/2024-08-12-66b9ac6abefc9.webp"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac4873b17.webp" alt="https://img.m-l.cc/2024-08-12-66b9ac4873b17.webp"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af22bab34.webp" alt="https://img.m-l.cc/2024-08-12-66b9af22bab34.webp"></p>
<p>从上图可以看到，整体的包装是比较简洁的样子，总共就一个本体、一个数据线外加一个无线接收器和说明书，没什么花里胡哨的东西。</p>
<h1 id="对linux的适配性"><a href="#对linux的适配性" class="headerlink" title="对linux的适配性"></a>对linux的适配性</h1><p>到手之后当然是第一时间连上电脑，准备测试在linux上能不能正常玩耍了。<br>直接打开了赛博朋克2077进行一些测试。结果发现居然啥都不用配置，插上接收器就能直接连上，按一下手柄的任意按键就能自动切换到手柄模式，这波直接是被震惊到了，有点无敌的说。</p>
<h1 id="游戏的体验"><a href="#游戏的体验" class="headerlink" title="游戏的体验"></a>游戏的体验</h1><p>游戏内的体验的话，这里测试了求生之路、传送门、csgo几款原生游戏，以及死亡搁浅、荒野大镖客2、赛博朋克2077这几款proton兼容层运行的游戏，基本上都与windows下无异，手柄的各个按键和功能也都可以完美的启用，包括线性扳机之类的，体验相当不错。<br>只可惜博主习惯了键鼠操作，换上手柄一时半会儿还真不太适应。</p>
<h1 id="冰原狼的性能测试"><a href="#冰原狼的性能测试" class="headerlink" title="冰原狼的性能测试"></a>冰原狼的性能测试</h1><p>到都到手了，也证实了可以正常用，那就干脆来测试下性能咯<br>打开<a href="https://gamepad-tester.com/">https://gamepad-tester.com</a>对手柄的性能进行一个简单的测试，发现确实如网上所说什么无死区、摇杆丝滑、霍尔感应的线性扳机等等，手柄连上后在网站上似乎会自动识别为xbox360,在网上也看了下，大多数国产手柄也都是被这样识别。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b08f7c545.webp" alt="https://img.m-l.cc/2024-08-12-66b9b08f7c545.webp"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体来看两百块钱还是物有所值的，对linux也可以完美支持。手柄的颜值很高，如果想入手一个手柄体验体验，作为一个入门手柄的话，那这款冰原狼是非常合适的选择了。<br>不到两百的价位，均衡的各项性能，超高的颜值，作为一个入门款应该是个比较合适的手柄。<br>同时，经过这款手柄的测试以及在steam deck吧、哔哩哔哩等平台搜集到的一些资料，可以了解到，大部分国产手柄也是可以正常被linux或基于linux的steam deck识别的。<br>不过这里仅限模仿xbox的这些手柄款式，毕竟，ps、switch之类的手柄我也没买过，也不知道咋样。只能通过网上信息了解到，xbox系列手柄基本可以无损运行，使用xbox协议的国产手柄也是如此。快去选择你需要的手柄吧！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Game</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>linux游戏现状</title>
    <url>/2023/02/27/linux-you-xi-xian-zhuang/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>steam deck掌机问世已经有一段时间了，作为V社推出的一款X86架构下基于archlinux的游戏掌机，它的出现以及V社对其的支持，在实现steam deck掌机相当不错的游玩体验的同时，无疑也为更广大的linux用户大大改善了的游戏体验。</p>
<p>在过去，linux用户想要同时拥有不错的游戏体验，要么只能选择双系统，另外装一个windows来玩游戏；要么就只能游玩那些少得可怜的原生游戏，或者用wine兼容层那可悲的性能表现，玩一些非常有限的游戏。</p>
<p>然而，随着V社作为目前国际最大的PC游戏平台，从将自身游戏移植到linux开始，通过proton、steamOS再到如今的steam deck，一步步的倒推平台其他游戏厂商，增强对linux的支持，同时也为去其他游戏支持linux提供便利。终于在当下，我们可以体验到越来越多的游戏能够自由的运行在linux系统下，不受兼容层带来的性能损耗，也不用再为了玩个游戏单独装个windows。</p>
<h1 id="二、怎么查看游戏对linux的支持程度呢？"><a href="#二、怎么查看游戏对linux的支持程度呢？" class="headerlink" title="二、怎么查看游戏对linux的支持程度呢？"></a>二、怎么查看游戏对linux的支持程度呢？</h1><p>答：<a href="https://www.protondb.com/">PROTONDB</a></p>
<p>protondb是一个用于记载、分享各个游戏对linux尤其是对steam研发的proton兼容层支持程度的一个论坛形式的分享平台。</p>
<p>在这里你可以轻松找到任何一款游戏，对linux系统的兼容程度，原生代表着可以不需要兼容层在linux原生环境下完美的运行；铂金代表基本上通过proton可以获得“开袋即食”性质的并且对性能几乎没有损耗的优质体验；黄金代表着可能需要一些配置，就可以舒服的在兼容层下运行的游戏，当然也不排除可能存在一些小故障、性能损失等；白银代表经过配置之后可以运行，但存在较大问题。除此之外，还有不可玩，代表着完全没法正常使用的游戏。</p>
<h1 id="三、博主自己玩了些啥？"><a href="#三、博主自己玩了些啥？" class="headerlink" title="三、博主自己玩了些啥？"></a>三、博主自己玩了些啥？</h1><ol>
<li>荒野大镖客2</li>
<li>死亡搁浅</li>
<li>古墓丽影9、暗影、崛起</li>
<li>刺客信条、刺客信条2、刺客信条兄弟会、刺客信条枭雄（刺客系列几乎都是金以上，体验都很不错）</li>
<li>鹅鸭杀</li>
<li>求生之路2、传送门1/2、csgo（V社游戏几乎都有原生）</li>
<li>赛博朋克2077</li>
<li>给他爱5</li>
<li>minecraft</li>
<li>原子之心（最近挺火）</li>
<li>……</li>
</ol>
<p>除了上述游戏之外，还有很多游戏可以在linux上获得完美体验，而且博主个人感觉，近几年大火的那些爆款3a大作貌似都能愉快体验，除了少数D加密的邪教游戏外，基本上都可以获得不错的体验。</p>
<h1 id="四、对其他游戏平台的支持"><a href="#四、对其他游戏平台的支持" class="headerlink" title="四、对其他游戏平台的支持"></a>四、对其他游戏平台的支持</h1><p>其他游戏平台的支持，无非就是epic、育碧、GOG这些，在实际体验中，epic、GOG平台都可以直接用<code>heroic</code>第三方游戏平台来实现很棒的支持，而多数时候作为启动器出现的R星、育碧之类的也可以在proton容器中，被轻易兼容。</p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>总而言之，就博主个人而言，随着steam deck的越来越火热，在未来会有越来越多游戏加强对linux的原生或兼容支持，linux下的游戏体验很有可能越来越好。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>linux, game</tag>
      </tags>
  </entry>
  <entry>
    <title>利用github api实现免费图床的python脚本</title>
    <url>/2022/03/09/python-github-api-upload-picture/</url>
    <content><![CDATA[<blockquote>
<p>本文目标：之前曾经写过一篇<a href="https://blog.zzy-ac.top/2021/11/27/bai-piao-bilibi-tu-chuang/">白嫖bilibili图床</a>用于白嫖B站的图片外链作为图床使用，然而很可惜，逼站的图床如今已经失效了（逼站修复了这一bug）故而只能重新找寻其他图床了。</p>
<p>在上一篇文章中我们提到用github action将仓库同步到coding的方法，故而本文的图床也将用到前文内容，利用coding作为图床的空间，来实现免费图床。</p>
<p>目标：一如之前的bilibili一文，依然是需要在typora中支持从剪贴板粘贴进编辑器自动上传到图床。</p>
</blockquote>
<h1 id="一、直接上脚本"><a href="#一、直接上脚本" class="headerlink" title="一、直接上脚本"></a>一、直接上脚本</h1><p>在本文中，博主将脚本命名为pic2gh.py,各位可以自凭喜好随意命名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>ext = <span class="hljs-string">&quot;&quot;</span><br>os.system(<span class="hljs-string">&#x27;cp &quot;%s&quot; /path/pic2gh_cache&#x27;</span> % sys.argv[<span class="hljs-number">1</span>])<br><span class="hljs-comment"># 从文件夹下 读取文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_dir</span>():</span><br>    <span class="hljs-keyword">global</span> extp y t h o n<br>    path = <span class="hljs-string">&quot;/path/pic2gh_cache&quot;</span>  <span class="hljs-comment"># 指定的文件夹目录(自己随意) todo</span><br>    files = os.listdir(path)<span class="hljs-comment"># 得到文件夹下的所有文件名称</span><br><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:  <span class="hljs-comment"># 遍历文件夹</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(file):  <span class="hljs-comment"># 判断是否是文件夹，不是文件夹才打开</span><br>            ext = os.path.splitext(file)[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">with</span> open(path + <span class="hljs-string">&quot;/&quot;</span> + file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-comment"># rb 二进制 读取</span><br>                fdata_tmp = file_base64(f.read())<br>                f.close()<br>                <span class="hljs-keyword">return</span> fdata_tmp <span class="hljs-comment"># 只取第一个 文件，太懒了，就默认第一个</span><br><br><br><br><span class="hljs-comment"># 将文件转换为base64编码，github上传文件必须将文件以base64格式上传</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file_base64</span>(<span class="hljs-params">data</span>):</span><br>    data_b64 = base64.b64encode(data).decode()<br>    <span class="hljs-keyword">return</span> data_b64<br><br><br><span class="hljs-comment"># 上传文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload_file</span>(<span class="hljs-params">file_data</span>):</span><br>    <span class="hljs-keyword">global</span> ext<br>    file_name = sys.argv[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">-1</span>]  <span class="hljs-comment"># 文件名 随机生成</span><br>    <span class="hljs-comment"># token = &quot;[token]&quot; todo</span><br>    <span class="hljs-comment"># url = &quot;https://api.github.com/repos/[user]/[repo]/contents/[path]/&quot;+file_name  # 用户名、库名、路径</span><br>    <span class="hljs-comment"># headers = &#123;&quot;Authorization&quot;: &quot;token &quot; + token&#125;</span><br>    token = <span class="hljs-string">&quot;ghp_ydDXXXXXXXXXXXXXXXXXRW2&quot;</span> <span class="hljs-comment">## 自行去github生成token，不懂得文章最好会写</span><br>    curr_time = datetime.datetime.now()<br>    path = curr_time.strftime(<span class="hljs-string">&quot;/path_at_github&quot;</span>) <span class="hljs-comment">#这里的路径为git仓库中文件所在路径</span><br>    url = <span class="hljs-string">&quot;https://api.github.com/repos/[user]/[repo]/contents/&quot;</span> + path + <span class="hljs-string">&quot;/&quot;</span> + file_name  <span class="hljs-comment"># 用户名、库名、路径</span><br>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;token &quot;</span> + token&#125; <span class="hljs-comment"># github token 的规则 在2021-9-29 变调了，注意官方文档的说明哦</span><br>    content = file_data<br>    data = &#123;<br>        <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;tc upload pictures&quot;</span>,<br>        <span class="hljs-string">&quot;content&quot;</span>: content<br>    &#125;<br>    data = json.dumps(data)<br>    req = requests.put(url=url, data=data, headers=headers)<br>    req.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br>    re_data = json.loads(req.text)<br>    print(<span class="hljs-string">&quot;https://[user_name].coding.net/t/[user]/p/[project]/d/[repo]/git/raw/main/&quot;</span> + path + <span class="hljs-string">&quot;/&quot;</span> + file_name)<br>    <span class="hljs-comment"># ！======= 千万注意路径，别写错了  #这里的路径采用了coding仓库的对应目录，请先参照前文配置github与coding的实时同步。</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 从文件夹 读取文件</span><br>    fdata = read_dir()<br>    <br>    upload_file(fdata)<br>os.system(<span class="hljs-string">&#x27;rm -rf /path/pic2gh_cache/*&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h1 id="目标实现："><a href="#目标实现：" class="headerlink" title="目标实现："></a>目标实现：</h1><h2 id="脚本的直接使用"><a href="#脚本的直接使用" class="headerlink" title="脚本的直接使用"></a>脚本的直接使用</h2><p>在终端使用<code>python 3 /path/to/pic2gh.py /path/to/picture/whitch/need/upload</code>即可将所需上传的图片上传到github，并自动同步到coding,获取到coding的图片外链了（由于github actions执行需要时间，这个外链可能将在1～2分钟之后才能生效）。</p>
<h2 id="typora中启用脚本"><a href="#typora中启用脚本" class="headerlink" title="typora中启用脚本"></a>typora中启用脚本</h2><p>将<code>python3 /path/to/pic2gh.py</code>复制到Typora的<code>偏好设置</code>→<code>图象</code>→<code>上传服务设定</code>的<code>Custom Command</code>选项的命令一行中去。</p>
<h1 id="成果检验"><a href="#成果检验" class="headerlink" title="成果检验"></a>成果检验</h1><p><img src="https://img.m-l.cc/2024-08-12-66b9b7130749f.gif" alt="typora上传效果"></p>
]]></content>
      <categories>
        <category>图床建设</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>win to go安装记录</title>
    <url>/2023/01/29/win-to-go-an-zhuang-ji-lu/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>近日因更换电脑的缘故，从旧笔记本上拆下来一块旧的sata口固态，正好前段时间还买了个sata转usb3.0的硬盘盒。于是就决定把windows从我的电脑上彻底删除，在移动硬盘上整个win to go，有需要时临时用用就好。</p>
<h1 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h1><p>做win to go的方法有很多，最基本的是直接把系统装进这块硬盘。但是私以为这样装的系统还是没有跟硬盘隔离开来，平时用这块硬盘还是会有些不爽。所以我选择采用ventoy方案。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1、Ventoy的安装于配置"><a href="#1、Ventoy的安装于配置" class="headerlink" title="1、Ventoy的安装于配置"></a>1、Ventoy的安装于配置</h2><ul>
<li><p>根据你的系统，从ventoy官网下载最新的ventoy安装程序<a href="https://ventoy.net/cn/download.html">https://ventoy.net/cn/download.html</a></p>
</li>
<li><p>运行Ventoy2Disk安装ventoy.</p>
</li>
<li><p>根据需要配置一下ventoy插件（可选）</p>
</li>
<li><p>把ventoy分区格式化为ntfs</p>
</li>
</ul>
<h2 id="2、安装win10"><a href="#2、安装win10" class="headerlink" title="2、安装win10"></a>2、安装win10</h2><ul>
<li><p>用虚拟机程序（qemu、vm、vbox…都可以）把win10的镜像安装到vhd格式的虚拟硬盘中</p>
</li>
<li><p>安装Windows VHD 文件启动插件</p>
<blockquote>
<p>Ventoy 使用此插件来支持直接启动 VHD(x) 文件 （Win7以上）。<br>支持 Legacy BIOS 和 UEFI 模式。支持固定大小以及动态扩展类型的 VHD/VHDX 格式。<br>使用说明<br>从下面任意一个链接中下载 ventoy_vhdboot.img 文件即可（几个链接中的文件都是一样的）。<br><a href="https://github.com/ventoy/vhdiso/releases">https://github.com/ventoy/vhdiso/releases</a><br><a href="https://ventoy.lanzoub.com/b01dlxuaj">https://ventoy.lanzoub.com/b01dlxuaj</a> (蓝奏云，密码: 7my4)<br>把下载后的文件放在U盘第1个分区（就是放ISO文件的分区）的 ventoy 目录下（默认没有这个目录，需手动创建，注意大小写），即 /ventoy/ventoy_vhdboot.img 就可以了。<br>注意是放在容量大的、存放ISO文件的那个分区中，不要放到那个 32MB 的 VTOYEFI 分区里面。</p>
</blockquote>
</li>
<li><p>把装有windows的vhd文件拷贝到ventoy分区内你用于存放ISO的文件夹（没配置的话直接扔根目录也行）</p>
</li>
</ul>
<h2 id="3、测试与验收"><a href="#3、测试与验收" class="headerlink" title="3、测试与验收"></a>3、测试与验收</h2><p>经过上面步骤之后你已经可以重启后从ventoy进入你的win to go系统了，可以试试各方面是否正常运行。</p>
<p>至此就收获了一个装有win to go,同时还可以加载各种系统镜像以及linux to go的移动硬盘。</p>
<p>通过VentoyPlugson程序，我们可以很方便的设置ventoy插件，从而设置ventoy仅识别某个目录内的镜像。如此可以避免在硬盘内其他目录中有些可以被ventoy自动识别到的又不是系统镜像的文件被ventoy误识。</p>
]]></content>
      <categories>
        <category>系统安装</category>
      </categories>
      <tags>
        <tag>win-to-go</tag>
      </tags>
  </entry>
  <entry>
    <title>鸣庚诗集廿八首</title>
    <url>/2020/12/06/zzy-shi-ji/</url>
    <content><![CDATA[<center>

<p>别枌榆前赠外祖母<br>青螺常将泪竹寻，二妃植此盼君停。<br>莫道浮崂云遮雾，原知卿本望东行。</p>
<p>初别故里有感<br>晨起难忘昨宵凉，涛声依旧月如霜。<br>碧海连天皆忧色，离家万里心下惶。</p>
<a id="more"></a>

<p>八月十五临沧海望月<br>银丝漫洒星光弥，波澜涌起海风盈。<br>昂首遥思巴陵月，方知何谓故乡明。</p>
<p>石老人夜游<br>半片壳身纹涛流，一曲弦月映乡游。<br>社稷同待今朝舞，望卿默念昨宵愁。</p>
<p>浮山梦<br>醉卧浮山今朝醒，笑叹碧波迎风泠。<br>莘莘万里求知路，但求数偶伴同行。</p>
<p>潇湘神·雨秋<br>昨月寒，昨月寒，晓风叹雨卧窗澜。<br>欲待万花零落处，持菊呻呓愿卿还。</p>
<p>登麦岛<br>隔海轻望浮山远，只影孤长碧涛浅。<br>金佛落辉佑渔舟，深波万里亦寻源。</p>
<p>忆巴陵(其一)<br>金鹗振翼破巴陵，潜龙逐鼈绕洞庭。<br>湘语乡愁相思苦，望川妄言忘故云。</p>
<p>忆巴陵(其二)<br>昔日洞庭畔，今朝崂山漫。<br>欲问何所念，唯此巴陵岸。</p>
<p>闲作<br>轻风携雨送春澜，攥柳寻芳候卿还。<br>蒹葭不解襄王意，绕江千尺一朝燃。</p>
<p>如墨<br>闲折寒山凝碧远，青针瘦密云似烟。<br>一砚风霜一玺雨，如墨千层画旧年。</p>
<p>临波兴作<br>潜波梦醒问昨宵，清枫雀语话天辽。<br>懵懂难知少年事，从此青空伴卿翱。</p>
<p>誓恋<br>月星湾头夜风闻，畅语欢颜映玉轮。<br>轻唇密语从前事，临涛誓作护君人。</p>
<p>闲时偶作<br>林深山起云间处，惊有天人绘鸡粟。<br>枫扫眼迷混不见，疑是梦里庸人误。</p>
<p>初雪<br>轻雪恍入梦，若羽悠从风。<br>伊人凭栏望，盼雨伴春声。</p>
<p>陨星<br>繁辰揽月残星坠，此情入骨三生璀。<br>昂首渐弃寒霜冷，愿祈苍颜犹相偎。</p>
<p>海作冰<br>万顷深波遇风凝，碧涛息音候鸟贫。<br>六星并蒂双月嵌，玄冰瞬眼化烟泯。</p>
<p>正月初一游归元寺<br>浅霜清雨淋汉水，古刹归元樱草垒。<br>除年迎春期杏草，阖家齐聚望明晖。</p>
<p>春来<br>乱草枯枝半抹白，缀紫含香望东来。<br>彩卷如诗卿若画，相思犹渴慕君怀。</p>
<p>思，愁<br>小别严冬廿卅日，怨卿夜夜泪难拭。<br>暂离相去数百里，愁思半点做幽词。</p>
<p>墨莲<br>湘水塘前映玉华，初夏荷头滴泪芽。<br>罗衫点墨绢绸染，携手夜梦望楚霞。</p>
<p>夏日偶书<br>湘北楼前欲归迟，金鹗没泽霞影直。<br>却道穷晷更念君，蝉声梦里惊啸时。</p>
<p>穿云<br>清风朗日玄渡思，星盘闲坐漫弄子。<br>摇首轻瞟轩窗亮，扶摇婉转绕云湿。</p>
<p>午眠<br>一点斜云绕日跌，清光渐撒户兰鲜。<br>偷得半晌琼瑶梦，伏案惊觉是人间。</p>
<p>寒冬暖月<br>惨云枯月候鸟无，落木残灯乱枝酥。<br>年关愈近烟光远，游子梦探洞庭哭。</p>
<p>寻趣<br>卧马沿山寻碧潭，清溪尤澈孰欲还。<br>繁荫间洒淡春光，青笋甘洌惹人贪。</p>
<p>不鸣<br>2020.07.22-22:30<br>暮暑辗转蝉将扰，梅实引霈巴陵扫。<br>重云渐拢螗蜩肃，知有愁心待拂晓。</p>
<p>秋夜<br>2020.10.22-18.00<br>残松叶密广寒遮，烛盏曳曳秋风扯。<br>层林圜转混不现，只影路寻身难舍。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>“小阳人”日记</title>
    <url>/2022/12/19/xiao-yang-ren-ri-ji/</url>
    <content><![CDATA[<blockquote>
<p>三年新冠众生累，防控限行方保全。</p>
<p>可惜一旦解禁日，半壁赤县竟沉沦。</p>
</blockquote>
<p>时至今日，疫情已经过去了三年，从最初的全民恐慌，到习惯封控，再到进来的全面放开，众说纷纭议论纷飞。于我自己而言，或许最大的遗憾就是让这场疫情毁了可贵的大学时光。</p>
<p>大学时光多么美好呢？可能钱不是很多，可能不是很成熟，可能见识还太少，可能阅历还太浅。可是也正是这样一个时光，可以让人肆无忌惮的相恋、肆无忌惮的交游、肆无忌惮的直抒胸臆，仿佛挥斥方遒间就能改变这个世间。然而，这样的大学生活，我只过了一年半载（实数）此后由于疫情，大学的生活发生剧变，此前的种种净皆抹去，剩下那两年半的时间，可谓失了大学之本义。多可惜。</p>
<p>到今天可能因为国家财政再也无力强撑、可能因为世贸将宣布疫情结束，我们不希望因为继续封控被歧视，又或者出于其他的考虑，总之，封控彻底被放开了。14亿人口旦夕间半数感染，新冠之可怕，一目了然。自己的严防死守之下鄙人仍然不幸中招，各种感悟相比诸君皆晓。</p>
<h2 id="出现症状第一天"><a href="#出现症状第一天" class="headerlink" title="出现症状第一天"></a>出现症状第一天</h2><p>凌晨四点在被窝里冻醒，浑身瑟瑟发抖，颤颤巍巍浑身无力了半个时辰后方才有力气起身拿起床头的手机打开空调。随之而来的是全身尤其是腰背的酸疼无力，四肢关节的空虚，以及40摄氏度的持续高烧，简直让人欲仙欲死。</p>
<p>从清晨到深夜，持续的高烧让人神志不清，仿佛还活着，却又不知是否真的活着。</p>
<h2 id="第二天至第四天"><a href="#第二天至第四天" class="headerlink" title="第二天至第四天"></a>第二天至第四天</h2><p>第二天开始高烧就基本退却，转为37摄氏度左右的低烧，神志已经就渐渐清明，但喉痒、咳嗽、喉痛也一天天严重起来，其他人所说的如同时刻刀割的感受目前还未能体验，但却如利剑悬于首，却又毫无办法，只能眼看着一天天恶化下来。</p>
<h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>目前也就是第四天了，还不知道后续几日会如何，希望可以早日康复，也希望天朝能够尽快摆脱这瘟疫的侵扰，让社会秩序快些回归正轨吧～</p>
]]></content>
      <categories>
        <category>新冠疫情</category>
      </categories>
      <tags>
        <tag>疫情</tag>
      </tags>
  </entry>
  <entry>
    <title>一台新kobo到手后做的配置</title>
    <url>/2022/01/10/yi-tai-xin-kobo-dao-shou-hou-zuo-de-pei-zhi/</url>
    <content><![CDATA[<h1 id="一台新kobo到手后做的配置："><a href="#一台新kobo到手后做的配置：" class="headerlink" title="一台新kobo到手后做的配置："></a>一台新kobo到手后做的配置：</h1><h2 id="一、激活："><a href="#一、激活：" class="headerlink" title="一、激活："></a>一、激活：</h2><p>打开数据库，往user数据里写入userid和useremail</p>
<h2 id="二、更新固件"><a href="#二、更新固件" class="headerlink" title="二、更新固件"></a>二、更新固件</h2><p>在<a href="https://pgaskin.net/KoboStuff/kobofirmware.html">这个网站</a>下载对应型号的对应版本的固件包，将其中的upgrade文件夹和KoboRoot.tgz文件解压到.kobo目录。拔线更新。</p>
<h2 id="三、刷插件"><a href="#三、刷插件" class="headerlink" title="三、刷插件"></a>三、刷插件</h2><h3 id="1、NikelMenu"><a href="#1、NikelMenu" class="headerlink" title="1、NikelMenu"></a>1、NikelMenu</h3><p>在<a href="https://github.com/pgaskin/NickelMenu">这个项目</a>releases里下载最新的插件包并安装</p>
<p>在.add目录下创建文本文件并写入对应的脚本内容例如：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">menu_item <span class="hljs-symbol">:main</span>   <span class="hljs-symbol">:Reboot</span>   <span class="hljs-symbol">:power</span>      <span class="hljs-symbol">:reboot</span><br><br>menu_item <span class="hljs-symbol">:main</span> <span class="hljs-symbol">:KOReader</span> <span class="hljs-symbol">:cmd_spawn</span> <span class="hljs-symbol">:quiet</span><span class="hljs-symbol">:/mnt/onboard/</span>.adds/koreader/koreader.sh<br>menu_item <span class="hljs-symbol">:main</span>   <span class="hljs-symbol">:Rescan_Books</span>  <span class="hljs-symbol">:nickel_misc</span>  <span class="hljs-symbol">:rescan_books</span><br>menu_item <span class="hljs-symbol">:main</span>   <span class="hljs-symbol">:Font-OLD</span> <span class="hljs-symbol">:cmd_spawn</span> <span class="hljs-symbol">:quiet</span><span class="hljs-symbol">:/mnt/onboard/</span>.adds/freefont/old.sh<br>menu_item <span class="hljs-symbol">:main</span>   <span class="hljs-symbol">:Font-NEW</span> <span class="hljs-symbol">:cmd_spawn</span> <span class="hljs-symbol">:quiet</span><span class="hljs-symbol">:/mnt/onboard/</span>.adds/freefont/new.sh<br></code></pre></td></tr></table></figure>

<h3 id="2、NanoClock"><a href="#2、NanoClock" class="headerlink" title="2、NanoClock"></a>2、NanoClock</h3><p>按照<a href="https://www.mobileread.com/forums/showthread.php?t=340047">这个教程</a>把nanoclock装入系统并自己配置好时钟的坐标、字体、大小等信息如：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; -------------------------------------------------------------------</span><br><span class="hljs-comment">;   NanoClock config file.</span><br><span class="hljs-comment">;   Canonical location: .adds/nanoclock/nanoclock.ini</span><br><span class="hljs-comment">; -------------------------------------------------------------------</span><br><br><span class="hljs-section">[global]</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; To uninstall, set to true</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">uninstall</span>=<span class="hljs-literal">false</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; To temporarily stop displaying the clock, set to true</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">stop</span>=<span class="hljs-literal">false</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; To debug, set to true</span><br><span class="hljs-comment">;; <span class="hljs-doctag">NOTE:</span> Everything is sent to the syslog, to look specifically for nanoclock entries, run</span><br><span class="hljs-comment">;;       logread | grep &#x27;\(nanoclock\|nanoclock\.sh\)\[[[:digit:]]\+\]&#x27;</span><br><span class="hljs-comment">;; <span class="hljs-doctag">NOTE:</span> Alternatively, you can find a NickelMenu config that will dump it in .adds/nanoclock/nanoclock.log</span><br><span class="hljs-comment">;;       over here: https://github.com/NiLuJe/NanoClock/blob/master/config/nm_nanoclock</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">debug</span>=<span class="hljs-literal">false</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; If this is enabled, the current log will be dumped to .adds/nanoclock/nanoclock.log</span><br><span class="hljs-comment">; every time this config file is reloaded.</span><br><span class="hljs-comment">; This is a poor man&#x27;s hack to get at the logs when you truly have no other way...</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">dump_log</span>=<span class="hljs-literal">false</span><br><br><br><span class="hljs-section">[display]</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Date format string (see &#x27;man strftime&#x27;, e.g., &lt;https://man7.org/linux/man-pages/man3/strftime.3.html&gt;)</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; In addition may also use &#123;month&#125;, &#123;day&#125;, &#123;battery&#125;.</span><br><span class="hljs-comment">;; (Look for battery and locale settings further below).</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">format</span>=%H:%M<br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; In addition to the usual &quot;as necessary&quot; refreshes,</span><br><span class="hljs-comment">; also refresh the clock automatically, every minute, on the dot.</span><br><span class="hljs-comment">; Set to false to disable.</span><br><span class="hljs-comment">;;</span><br><span class="hljs-comment">;; <span class="hljs-doctag">NOTE:</span> If the device is not connected to a power source, and Wi-Fi is currently down,</span><br><span class="hljs-comment">;;       the device will be put into standby after roughly 5s of inactivity.</span><br><span class="hljs-comment">;;       That&#x27;s essentially a suspend to RAM, but with the lights &amp; touch panel still on.</span><br><span class="hljs-comment">;;       This means that, despite this setting, your clock will &quot;freeze&quot; very soon after a page turn,</span><br><span class="hljs-comment">;;       until the next sign of user activity (e.g., a touch or button press),</span><br><span class="hljs-comment">;;       at which point the device wakes up and everything resumes.</span><br><span class="hljs-comment">;;</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">autorefresh</span>=<span class="hljs-number">1</span><br><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Where to print the clock</span><br><span class="hljs-comment">;</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; With one of the embedded bitmap fonts:</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">column</span>=-<span class="hljs-number">14</span><br><span class="hljs-attr">row</span>=-<span class="hljs-number">1</span><br><span class="hljs-comment">;; ^<span class="hljs-doctag">NOTE:</span> Can be negative (f.g., row -1 is the last line of the screen (bottom), column -1 is the last column on the screen (right)).</span><br><span class="hljs-attr">offset_x</span>=-<span class="hljs-number">2</span><br><span class="hljs-attr">offset_y</span>=-<span class="hljs-number">8</span><br><span class="hljs-comment">;; ^<span class="hljs-doctag">NOTE:</span> These do *NOT* override row/column, they *fine-tune* them. Offsets can be negative, but will not wrap around edges.</span><br><span class="hljs-comment">;;       f.g., if you only print a %H:%M timestamp, that&#x27;s 5 characters, so, the bottom-right corner of the screen would be:</span><br><span class="hljs-comment">;;       column=-5</span><br><span class="hljs-comment">;;       row=-1</span><br><span class="hljs-comment">;;       You can then adjust that a bit, by, say, moving it 10 pixels higher:</span><br><span class="hljs-comment">;;       offset_y=-10</span><br><span class="hljs-comment">;;  <span class="hljs-doctag">NOTE:</span> While column/row won&#x27;t, offset_x/offset_y *can* push content off-screen!</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Font:  (IBM, UNSCII, ALT, THIN, FANTASY, MCR, TALL, BLOCK,</span><br><span class="hljs-comment">;         LEGGIE, VEGGIE, KATES, FKP, CTRLD, ORP, ORPB, ORPI,</span><br><span class="hljs-comment">;         SCIENTIFICA, SCIENTIFICAB, SCIENTIFICAI, TERMINUS,</span><br><span class="hljs-comment">;         TERMINUSB, FATTY, SPLEEN, TEWI, TEWIB, TOPAZ,</span><br><span class="hljs-comment">;         MICROKNIGHT, VGA, COZETTE)</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">font</span>=IBM<br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Font Size:</span><br><span class="hljs-comment">; <span class="hljs-doctag">NOTE:</span> This is an integer multiplier of the native cell size of the font. (0 means choose a sensible default based on DPI, ranging from 2 to 4).</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">size</span>=<span class="hljs-number">0</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Color: (BLACK GRAY&#123;1-9A-E&#125; WHITE)</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">fg_color</span>=BLACK<br><span class="hljs-attr">bg_color</span>=WHITE<br><span class="hljs-comment">;</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; With your own vector (TrueType, OpenType) fonts:</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; For fonts inside the same folder as your NanoClock configuration:</span><br><span class="hljs-comment">;;     truetype=yourfont.ttf</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; For fonts stored elsewhere in the filesystem:</span><br><span class="hljs-comment">;;     truetype=/mnt/onboard/fonts/something.ttf</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Only set these if you use *italic*, **bold**, ***bold italic*** in your format string:</span><br><span class="hljs-comment">;;</span><br><span class="hljs-comment">;;     truetype_format=*%a* **%b** ***%d*** %H:%M</span><br><span class="hljs-comment">;;     truetype_bold=yourfont-bold.ttf</span><br><span class="hljs-comment">;;     truetype_italic=yourfont-italic.ttf</span><br><span class="hljs-comment">;;     truetype_bolditalic=yourfont-bolditalic.ttf</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Technically, this can also be used for completely different font styles,</span><br><span class="hljs-comment">;; instead of italic or bold variants of the same font.</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; <span class="hljs-doctag">NOTE:</span> Will fall back to regular mode when font file is unavailable.</span><br><span class="hljs-comment">;;       (e.g. while the device is connected to USB)</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">#truetype_size=16.0</span><br><span class="hljs-comment">#truetype_px=0</span><br><span class="hljs-comment">;; ^<span class="hljs-doctag">NOTE:</span> size is in pt, px is in pixels. If set to non-zero, px takes precedence.</span><br><span class="hljs-comment">;;        In case you ever need to do the maths yourself, px = dpi / 72.0 * pt</span><br><span class="hljs-comment">#truetype_x=0</span><br><span class="hljs-comment">#truetype_y=0</span><br><span class="hljs-comment">;; ^<span class="hljs-doctag">NOTE:</span> Much like above, these can be negative, in which case they count backwards from the opposite edge (like column/row).</span><br><span class="hljs-comment">;;        f.g., a rough match to the column/row example above might be:</span><br><span class="hljs-comment">;;        truetype_x=-115</span><br><span class="hljs-comment">;;        truetype_y=-44</span><br><span class="hljs-comment">;;</span><br><span class="hljs-comment">;; <span class="hljs-doctag">NOTE:</span>  If you want to position your clock near the bottom or right edge,</span><br><span class="hljs-comment">;;        using negative values is the only sensible way to have it actually work in both Portrait and Landscape orientations,</span><br><span class="hljs-comment">;;        whether you&#x27;re using a vector or a bitmap font.</span><br><span class="hljs-comment">;;</span><br><span class="hljs-attr">truetype_fg</span>=BLACK<br><span class="hljs-attr">truetype_bg</span>=WHITE<br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; TrueType padding</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; TrueType padding helps prevent visual fragments to appear,</span><br><span class="hljs-comment">;; in the extremely rare instance of multiple clock updates on the same page,</span><br><span class="hljs-comment">;; but it comes at the cost of adding extra whitespace.</span><br><span class="hljs-comment">;; Set to true to enable.</span><br><span class="hljs-comment">;; <span class="hljs-doctag">NOTE:</span> If you still have this enabled, and you&#x27;re seeing weird layout issues on the first update after a truetype switch,</span><br><span class="hljs-comment">;;       try disabling it.</span><br><span class="hljs-comment">;; <span class="hljs-doctag">NOTE:</span> This setting is mostly meaningless if backgroundless or overlay are enabled, but it is still honored,</span><br><span class="hljs-comment">;;       as it might help the autorefresh magic behave seamlessly ;).</span><br><span class="hljs-comment">;</span><br><span class="hljs-attr">truetype_padding</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">truetype</span>=/mnt/<span class="hljs-literal">on</span>board/fonts/Roboto-Regular.ttf<br><span class="hljs-comment"># truetype_format=%a %b %d %H:%M</span><br><span class="hljs-attr">truetype_format</span>=&#123;battery&#125;|%H:%M<br><span class="hljs-attr">truetype_size</span>=<span class="hljs-number">16.0</span><br><span class="hljs-attr">truetype_px</span>=<span class="hljs-number">20</span><br><span class="hljs-attr">truetype_x</span>=<span class="hljs-number">650</span><br><span class="hljs-attr">truetype_y</span>=<span class="hljs-number">980</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Misc display tweaks (regardless of the font type)</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Don&#x27;t render background pixels *at all* (i.e., no background &quot;box&quot;).</span><br><span class="hljs-comment">;; Set to true to enable.</span><br><span class="hljs-attr">backgroundless</span>=<span class="hljs-number">0</span><br><span class="hljs-comment">;; Ignores the specified foreground color, and instead use the inverse of what&#x27;s on the screen.</span><br><span class="hljs-comment">;; (f.g., if a pixel replaces a white pixel, it&#x27;ll be painted black).</span><br><span class="hljs-comment">;; Like with backgroundless, background pixels won&#x27;t be rendered. Takes precedence over backgroundless.</span><br><span class="hljs-comment">;; Set to true to enable.</span><br><span class="hljs-attr">overlay</span>=<span class="hljs-literal">false</span><br><span class="hljs-comment">;; ^<span class="hljs-doctag">NOTE:</span> If autorefresh is enabled, magic will happen to make these two behave without visual glitches ;).</span><br><span class="hljs-comment">;; ^<span class="hljs-doctag">NOTE:</span> On devices with a sunxi SoC (e.g., Mk. 8), these two modes are unavailable, because of technical limitations.</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Battery percentage value (0-100)</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Use &#123;battery&#125; in the format string.</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Will only be used if the battery is between min max.</span><br><span class="hljs-comment">;; Default: only shown when battery level drops to 50% and under.</span><br><span class="hljs-attr">battery_min</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">battery_max</span>=<span class="hljs-number">100</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Allows tweaking how the placeholder is formatted.</span><br><span class="hljs-comment">;; %d will be replaced by the actual value</span><br><span class="hljs-comment">;; %% is a literal % sign</span><br><span class="hljs-comment">;; The default is to show nothing when hidden, and an unadorned percentage otherwise.</span><br><span class="hljs-comment">; When the battery is shown (i.e., within the configured threshold)</span><br><span class="hljs-comment">;;battery_shown_pattern=%d%%</span><br><span class="hljs-comment">; When the battery is hidden (i.e., outside the configured threshold)</span><br><span class="hljs-comment">;;battery_hidden_pattern=</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; For example, if you want to display the battery between brackets as a prefix to your clock,</span><br><span class="hljs-comment">; but don&#x27;t want those brackets to mess up your formatting when the battery is *NOT* shown:</span><br><span class="hljs-comment">; format=&#123;battery&#125; %H:%M</span><br><span class="hljs-comment">; battery_shown_pattern=[%d%%]</span><br><span class="hljs-comment">; battery_hidden_pattern=</span><br><span class="hljs-comment">; (Note that in a config value, leading spaces will be ignored, but not *trailing* spaces,</span><br><span class="hljs-comment">;  so you may also use &#x27;&#123;battery&#125;%H:%M&#x27; for format and &#x27;[%d%%] &#x27; for battery_shown_pattern).</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Localization (translate Month and Day names)</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Set day names, Monday -&gt; Sunday (7 words)</span><br><span class="hljs-comment">;; Use &#123;day&#125; in the format string to use this.</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;days=Mon Tue Wed Thu Fri Sat Sun</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Set month names, January -&gt; December (12 words)</span><br><span class="hljs-comment">;; Use &#123;month&#125; in the format string to use this.</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;months=Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec</span><br><span class="hljs-comment">;</span><br><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Frontlight percentage value (0-100 or -1)</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Use &#123;frontlight&#125; in the format string.</span><br><span class="hljs-comment">;; ^<span class="hljs-doctag">NOTE:</span> It might take a couple pages to sync up on older devices (&lt; Mk. 7). That&#x27;s perfectly normal.</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">;; Allows tweaking how the placeholder is formatted.</span><br><span class="hljs-comment">;; c.f., the description for &#123;battery&#125; above for more details.</span><br><span class="hljs-comment">;; The default is to show an unadorned percentage.</span><br><span class="hljs-attr">frontlight_pattern</span>=%d%%<br></code></pre></td></tr></table></figure>

<h3 id="3、Koreader"><a href="#3、Koreader" class="headerlink" title="3、Koreader"></a>3、Koreader</h3><p>直接从<a href="https://github.com/koreader/koreader">koreader项目</a>把kobo版的koreader下下来把其中的koreader文件夹解压到.add目录，见上文的nikelmenu部分添加启动koreader的按钮</p>
<h3 id="4、KoboPatch"><a href="#4、KoboPatch" class="headerlink" title="4、KoboPatch"></a>4、KoboPatch</h3><p>从<a href="https://www.mobileread.com/forums/showthread.php?t=297338">这个教程</a>中安装kobopatch到电脑，并编写kobopatch.yaml来选择需要的补丁功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## Works with kobopatch v0.15.0 and later.</span><br><span class="hljs-comment">## You can update kobopatch by downloading the latest release from https://github.com/pgaskin/kobopatch/releases. </span><br><span class="hljs-attr">version:</span> <span class="hljs-number">4.30</span><span class="hljs-number">.18838</span><br><span class="hljs-attr">in:</span> <span class="hljs-string">src/kobo-update-4.30.18838.zip</span><br><span class="hljs-attr">out:</span> <span class="hljs-string">out/KoboRoot.tgz</span><br><span class="hljs-attr">log:</span> <span class="hljs-string">out/log.txt</span><br><br><span class="hljs-attr">patchFormat:</span> <span class="hljs-string">kobopatch</span><br><br><span class="hljs-attr">patches:</span><br>  <span class="hljs-attr">src/nickel.yaml:</span> <span class="hljs-string">usr/local/Kobo/nickel</span><br>  <span class="hljs-attr">src/libadobe.so.yaml:</span> <span class="hljs-string">usr/local/Kobo/libadobe.so</span><br>  <span class="hljs-attr">src/libnickel.so.1.0.0.yaml:</span> <span class="hljs-string">usr/local/Kobo/libnickel.so.1.0.0</span><br>  <span class="hljs-attr">src/librmsdk.so.1.0.0.yaml:</span> <span class="hljs-string">usr/local/Kobo/librmsdk.so.1.0.0</span><br><br><span class="hljs-comment">## You can put lines in the following section to override the enabled state of patches.</span><br><span class="hljs-comment">## The indentation matters! Each override should be indented by 4 spaces. Add to the </span><br><span class="hljs-comment">## section below. This section can be copy and pasted into newer patch versions to</span><br><span class="hljs-comment">## keep your selections.</span><br><span class="hljs-comment">##</span><br><span class="hljs-comment">## Example of how it should look:</span><br><span class="hljs-comment">## overrides:</span><br><span class="hljs-comment">##   src/nickel.yaml:</span><br><span class="hljs-comment">##     Custom synopsis/details line spacing: yes</span><br><span class="hljs-comment">##     Whatever the yaml is called: no</span><br><span class="hljs-comment">##   src/libadobe.so.yaml:</span><br><span class="hljs-comment">##     You get the idea: yes</span><br><span class="hljs-attr">overrides:</span><br>  <span class="hljs-attr">src/nickel.yaml:</span><br>    <span class="hljs-attr">Reduce top/bottom page spacer:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Custom synopsis details line spacing: yes</span><br>    <span class="hljs-comment"># Custom synopsis font size: yes</span><br>    <span class="hljs-comment"># Increase home screen cover size: yes</span><br>    <span class="hljs-attr">Dictionary pop-up - increase available text area:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Increase Book Details synopsis area: yes</span><br>    <span class="hljs-attr">Increase library cover size:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Custom collection/author header title font: yes</span><br>    <span class="hljs-comment"># Reduce new header/footer height: yes</span><br>    <span class="hljs-comment"># Custom header/footer captions: yes</span><br>    <span class="hljs-comment"># Custom page navigation scrubber: yes</span><br>    <span class="hljs-attr">Customise Header back button:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Series list increase cover thumbnails: yes</span><br>    <span class="hljs-comment"># Increase headlines font: yes</span><br>    <span class="hljs-comment"># New home screen subtitle custom font: yes</span><br>    <span class="hljs-string">Remove</span> <span class="hljs-string">footer</span> <span class="hljs-string">(row3)</span> <span class="hljs-attr">and increase cover size on new home screen:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Remove footer (row3) on new home screen: yes</span><br>    <span class="hljs-comment"># Show all games: yes</span><br>    <span class="hljs-comment"># Remove forgot pin button from lock screen: yes</span><br>    <span class="hljs-attr">Increase size of kepub chapter progress chart:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">Change TOC level indentation:</span> <span class="hljs-literal">yes</span><br>  <span class="hljs-attr">src/libadobe.so.yaml:</span><br>    <span class="hljs-comment"># Remove PDF map widget shown during panning: yes</span><br>  <span class="hljs-attr">src/libnickel.so.1.0.0.yaml:</span><br>    <span class="hljs-comment"># My 10 line spacing values: yes</span><br>    <span class="hljs-comment"># My 24 line spacing values: yes</span><br>    <span class="hljs-string">Custom</span> <span class="hljs-string">left</span> <span class="hljs-string">&amp;</span> <span class="hljs-attr">right margins:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Custom font sizes: yes</span><br>    <span class="hljs-comment"># ePub fixed top/bottom margins: yes</span><br>    <span class="hljs-comment"># ePub disable built-in body padding-bottom: yes</span><br>    <span class="hljs-attr">Custom kepub default margins:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Block WiFi firmware upgrade: yes</span><br>    <span class="hljs-attr">Custom Sleep/Power-off timeouts:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">Set KePub hyphenation:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Force user line spacing in KePubs: yes</span><br>    <span class="hljs-comment"># Force user line spacing in ePubs (part 1 of 2): yes</span><br>    <span class="hljs-string">Un-force</span> <span class="hljs-string">font-family</span> <span class="hljs-string">override</span> <span class="hljs-string">p</span> <span class="hljs-string">tags</span> <span class="hljs-string">(std</span> <span class="hljs-string">epubs):</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Force user font-family in ePubs (Part 1 of 2): yes</span><br>    <span class="hljs-comment"># ePub constant font sharpness: yes</span><br>    <span class="hljs-comment"># KePub constant font sharpness: yes</span><br>    <span class="hljs-string">Un-Force</span> <span class="hljs-string">user</span> <span class="hljs-string">text-align</span> <span class="hljs-string">in</span> <span class="hljs-string">div,p</span> <span class="hljs-attr">tags in KePubs:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">Un-Force user font-family in KePubs:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">Un-force link decoration in KePubs:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Ignore .otf fonts: yes</span><br>    <span class="hljs-attr">Dictionary text font-family/font-size/line-height:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Custom navigation menu page number text: yes</span><br>    <span class="hljs-attr">KePub stylesheet additions - text justify:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># KePub stylesheet additions - optimizeSpeed: yes</span><br>    <span class="hljs-comment"># Shorten dictionary entry not found message: yes</span><br>    <span class="hljs-comment"># Change Wikipedia search language: yes</span><br>    <span class="hljs-comment"># Cyrillic Keyboard (GloHD/ClaraHD/AuraOne/H2O2): yes</span><br>    <span class="hljs-comment"># Greek Keyboard (GloHD/ClaraHD/AuraOne/H2O2): yes</span><br>    <span class="hljs-comment"># Bulgarian Phonetic Keyboard (GloHD/ClaraHD/AuraOne/H2O2/Forma/Libra): yes</span><br>    <span class="hljs-comment"># Don&#x27;t grab exclusive access to event0: yes</span><br>    <span class="hljs-comment"># Both page turn buttons go next: yes</span><br>    <span class="hljs-comment"># Both page turn sides go next: yes</span><br>    <span class="hljs-comment"># Increase page navigation history: yes</span><br>    <span class="hljs-comment"># Replace adobe page numbers toggle with invert screen: yes</span><br>    <span class="hljs-comment"># Always show confirmation dialog before upgrading: yes</span><br>    <span class="hljs-comment"># Allow USB storage even when device locked: yes</span><br>    <span class="hljs-comment"># Hide browser from beta features: yes</span><br>    <span class="hljs-comment"># Remove beta features not supported text: yes</span><br>    <span class="hljs-attr">Disable all tutorial dialogs:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Remove recommendations (row1col2) from home screen: yes</span><br>    <span class="hljs-comment"># Rename new home screen footer: yes</span><br>    <span class="hljs-comment"># Remove line from bottom tab bar: yes</span><br>    <span class="hljs-comment"># Change Browse Kobo home screen link target - Activity: yes</span><br>    <span class="hljs-comment"># Set visible SmartLink: yes</span><br>    <span class="hljs-comment"># Only show Pocket SmartLink: yes</span><br>    <span class="hljs-comment"># Only show stats SmartLink: yes</span><br>    <span class="hljs-string">Never</span> <span class="hljs-string">show</span> <span class="hljs-string">Kobo</span> <span class="hljs-string">Plus,</span> <span class="hljs-string">wishlist,</span> <span class="hljs-attr">and points SmartLinks:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Allow showing info panel on random screensaver: yes</span><br>    <span class="hljs-attr">Remove title from reading header/footer:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Larger Sleep/Power-off timeouts: yes</span><br>    <span class="hljs-comment"># Allow rotation on all devices: yes</span><br>    <span class="hljs-comment"># Don&#x27;t uppercase header/footer text: yes</span><br>    <span class="hljs-comment"># Custom header/footer page number text: yes</span><br>    <span class="hljs-comment"># Don&#x27;t uppercase header/footer text and change page number text: yes</span><br>    <span class="hljs-comment"># Swap reading header/footer: yes</span><br>    <span class="hljs-attr">Enable advanced settings for all fonts:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-comment"># Customize ComfortLight settings: yes</span><br>    <span class="hljs-comment"># FeatureSettings - BookSpecificStats: yes</span><br>    <span class="hljs-comment"># FeatureSettings - ShowFacebookShare: yes</span><br>    <span class="hljs-comment"># FeatureSettings - FullScreenBrowser: yes</span><br>    <span class="hljs-comment"># FeatureSettings - MyWords: yes</span><br>    <span class="hljs-comment"># FeatureSettings - ExportHighlights: yes</span><br>    <span class="hljs-comment"># DeveloperSettings - AutoUsbGadget: yes</span><br>    <span class="hljs-comment"># PowerSettings - UnlockEnabled: yes</span><br>    <span class="hljs-attr">Unify font sizes:</span> <span class="hljs-literal">yes</span><br>  <span class="hljs-attr">src/librmsdk.so.1.0.0.yaml:</span><br>    <span class="hljs-comment"># Disable orphans/widows avoidance: yes</span><br>    <span class="hljs-comment"># Default ePub serif font (Amasis): yes</span><br>    <span class="hljs-comment"># Default ePub sans-serif font (Gill Sans): yes</span><br>    <span class="hljs-comment"># Default ePub symbol font (Symbol): yes</span><br>    <span class="hljs-comment"># Force user line spacing in ePubs (Part 2 of 2): yes</span><br>    <span class="hljs-comment"># Force user font-family in ePubs (Part 2 of 2): yes</span><br>    <span class="hljs-comment"># Ignore ePub book Adobe XPGT stylesheet (page-template.xpgt): yes</span><br>    <span class="hljs-comment"># Ignore ePub book CSS and Adobe XPGT stylesheets: yes</span><br>    <span class="hljs-comment"># Ignore ePub TOC navpoints: yes</span><br>    <span class="hljs-comment"># Default ePub monospace font: yes</span><br><br><span class="hljs-comment">## TRANSLATIONS ##</span><br><span class="hljs-comment"># Optional, use only if lrelease is not in PATH and if translations are needed</span><br><span class="hljs-comment"># lrelease: /path/to/lrelease</span><br><br><span class="hljs-comment"># Uncomment the following to add translations (replace lc with the language code)</span><br><span class="hljs-comment"># translations:</span><br><span class="hljs-comment">#   src/whatever.ts: usr/local/Kobo/translations/trans_lc.qm</span><br><br><span class="hljs-comment">## ADDITIONAL FILES ##</span><br><span class="hljs-comment"># Uncomment the following to add additional files to the tgz (like init scripts or hyphen dicts)</span><br><span class="hljs-comment"># The files will be root-owned, and world readable, writable, and executable (0777)</span><br><span class="hljs-comment"># files:</span><br><span class="hljs-comment">#   src/whatever.txt: usr/local/Kobo/whatever.txt</span><br><span class="hljs-comment">#   src/whateverToPutInMultiplePlaces.txt:</span><br><span class="hljs-comment">#     - usr/local/Kobo/location1.txt</span><br><span class="hljs-comment">#     - usr/local/Kobo/location2.txt</span><br><br></code></pre></td></tr></table></figure>

<h3 id="5、拼音输入法"><a href="#5、拼音输入法" class="headerlink" title="5、拼音输入法"></a>5、拼音输入法</h3><p>在<code>.kobo/kobo/Kobo eReader.conf</code>文件的<code>[ApplicationPreferences]</code>下面添加一行<code>ExtraLocales=zh_CN</code>即可</p>
<h3 id="6、禁止kobo原生系统扫描koreader等第三方插件中的七七八八的文件"><a href="#6、禁止kobo原生系统扫描koreader等第三方插件中的七七八八的文件" class="headerlink" title="6、禁止kobo原生系统扫描koreader等第三方插件中的七七八八的文件"></a>6、禁止kobo原生系统扫描koreader等第三方插件中的七七八八的文件</h3><p>依然是在<code>.kobo/kobo/Kobo eReader.conf</code>文件的末尾添加如下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[FeatureSettings]</span><br><span class="hljs-attr">ExcludeSyncFolders</span>=\\.(?!kobo|adobe).*?<br></code></pre></td></tr></table></figure>



<h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>点墨的kobo设备至此就配置完成了，在之后的使用过程中只需要简单的放入kepub书籍直接观看就好了</p>
]]></content>
      <categories>
        <category>kobo</category>
      </categories>
      <tags>
        <tag>kobo</tag>
      </tags>
  </entry>
  <entry>
    <title>为Azure AD应用创建无限时长的key</title>
    <url>/2022/09/23/wei-azure-api-chuang-jian-wu-xian-shi-chang-de-key/</url>
    <content><![CDATA[<blockquote>
<p>早在2021年4月微软就移除了AzureAD应用程序注册中永不过期的选项（Never Expire），出于对用户安全的考虑，这一变更显然是有其价值的，但也为广大开发者带来了不便。因此，本文章经过探索找到了一个可以绕过限制创建终结日期为任意年份密钥的方法。</p>
</blockquote>
<h1 id="登陆Azure-AD平台"><a href="#登陆Azure-AD平台" class="headerlink" title="登陆Azure AD平台"></a>登陆Azure AD平台</h1><p>Azure AD 地址：<a href="https://portal.azure.com/">https://portal.azure.com/</a></p>
<h2 id="选择应用注册选项："><a href="#选择应用注册选项：" class="headerlink" title="选择应用注册选项："></a>选择应用注册选项：</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9ae86748f3.webp" alt="Azure-1"></p>
<h2 id="创建新的应用："><a href="#创建新的应用：" class="headerlink" title="创建新的应用："></a>创建新的应用：</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9b0865c8b4.webp" alt="Azure-2"></p>
<h2 id="填入相关信息创建应用程序"><a href="#填入相关信息创建应用程序" class="headerlink" title="填入相关信息创建应用程序"></a>填入相关信息创建应用程序</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9afb063129.webp" alt="Azure-3"></p>
<h2 id="在概述中可以看到该程序的Client-ID"><a href="#在概述中可以看到该程序的Client-ID" class="headerlink" title="在概述中可以看到该程序的Client_ID"></a>在概述中可以看到该程序的Client_ID</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9afc9cf408.webp" alt="Azure-4"></p>
<h2 id="选择证书和密码—-gt-新客户端密码创建key"><a href="#选择证书和密码—-gt-新客户端密码创建key" class="headerlink" title="选择证书和密码—&gt;新客户端密码创建key"></a>选择证书和密码—&gt;新客户端密码创建key</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9af16e0047.webp" alt="Azure-5"></p>
<h2 id="F12打开浏览器开发者模式模拟手机版页面"><a href="#F12打开浏览器开发者模式模拟手机版页面" class="headerlink" title="F12打开浏览器开发者模式模拟手机版页面"></a>F12打开浏览器开发者模式模拟手机版页面</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9ad71754ad.webp" alt="Azure-6"></p>
<h2 id="填入想要的key名称并选择自定义截止期限"><a href="#填入想要的key名称并选择自定义截止期限" class="headerlink" title="填入想要的key名称并选择自定义截止期限"></a>填入想要的key名称并选择自定义截止期限</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9af32896f5.webp" alt="Azure-7"><br>如图所示如果直接填入超范围的时间会有红字提示，并且下面的添加按钮为灰色不可选中状态。<br>因此我们要先随意选择一个2年范围内的合理日期，然后点击页面空白处点亮下方的添加按钮。<br>之后将日期的年份修改为2099、2333或9999这样超过了两年范围的日期。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ace824687.webp" alt="Azure-8"><br><img src="https://img.m-l.cc/2024-08-12-66b9af2e4c13f.webp" alt="Azure-9"></p>
<p>之后直接点击添加，就可以看到我们已经成功创建了一个截止日期为2333年的api，你也可以将2333换成任意你想要的值（四位数）</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad396ca3d.webp" alt="Azure-10"></p>
<p>至此你就成功的创建了一个永不过期的Azure AD的应用程序密钥。（相信我你活不到2333年的）</p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>以父之名-二首</title>
    <url>/2021/02/20/yi-fu-zhi-ming/</url>
    <content><![CDATA[<center>

<p>其一<br>白云钟声杳，渔夫访故道。<br>不知水穷处，秦人云渺渺。</p>
<p>其二<br>拾级钟声浅，路人湘语娴。<br>举头登高处，重檐幽篁现。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>元旦结语</title>
    <url>/2022/01/01/yuan-dan-jie-yu/</url>
    <content><![CDATA[<center>

<p>一岁新始一岁终，<br>香樟犹绿伴青松。<br>去日虽载诸般恨，<br>明晨依旧换春风。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>六月廿二过汨罗憾非端午</title>
    <url>/2022/07/20/liu-yue-nian-er-guo-mi-luo-han-fei-duan-wu/</url>
    <content><![CDATA[<center>

<p>楚风萧瑟龙舟去，<br>汨罗江清粽叶新。<br>屈子愤身遥天问，<br>​恨不逢时未报荆。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b02d3c41e.webp" alt="离开汨罗"></p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>内网盒子重新变回家里云——cloudflared</title>
    <url>/2024/08/01/nei-wang-he-zi-chong-xin-bian-hui-jia-li-yun-cloudflared/</url>
    <content><![CDATA[<blockquote>
<p>噩耗，因为工作原因搬家了，之前的宽带也用不了了，可能在未来挺长一段时间里没法用上家宽的公网ip了 QaQ！</p>
</blockquote>
<blockquote>
<p>这也就导致了原本用cloudflare origin rules反代一下就可以正常用的家里云彻底say byebye了。搞得挺被动的，于是几番琢磨下，采用cloudflared内网穿透的方式来重新恢复家里云服务。</p>
</blockquote>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>服务器内还是之前的那些服务，通过1panel面板，搭建了几个alist程序、lsky-pro图床、几个静态网页等等。搭建了什么服务不重要，你只需要把它们安置在不同的端口上就好了。</p>
<p>例如：1panel在 <code>1234</code>，alist-1在 <code>12341</code>，alist-2在 <code>12342</code>，lsky-pro在 <code>12343</code>这样就好。当然还有ssh的服务也是需要被反代的，你可以就用默认的22,当然也不排除你用其他端口例如 <code>2222</code></p>
<h1 id="Cloudflared"><a href="#Cloudflared" class="headerlink" title="Cloudflared"></a>Cloudflared</h1><h2 id="web控制台"><a href="#web控制台" class="headerlink" title="web控制台"></a>web控制台</h2><p>服务端安排好之后，进入cloudflare，打开zero trust，选择 <code>Networks</code>-<code>tunnels</code>，创建一个新的tunnel。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acd37e4aa.webp" alt="https://img.m-l.cc/2024-08-12-66b9acd37e4aa.webp"></p>
<p>选 <code>cloudflared</code></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad60c0e7c.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad60c0e7c.webp"></p>
<p>随便来个喜欢的名字</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9afa750503.webp" alt="https://img.m-l.cc/2024-08-12-66b9afa750503.webp"></p>
<p>选择你所用的服务端系统版本和架构，并复制对应的cloudflared安装命令。在这里我的家里云盒子是armbian的系统，所以选到得便和arm64-bit就行。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af9fb8451.webp" alt="https://img.m-l.cc/2024-08-12-66b9af9fb8451.webp"></p>
<h2 id="服务端安装cloudflared"><a href="#服务端安装cloudflared" class="headerlink" title="服务端安装cloudflared"></a>服务端安装cloudflared</h2><p>让你的电脑和家里云盒子在同一个路由器下面（确保其在同一个局域网内）</p>
<p>ssh通过内网ip进入你的盒子</p>
<p>通过刚刚复制的命令安装cloudflare的并启动cloudflared服务，保持它能每次都开机自启。</p>
<p>回到web端，返回 <code>tunnels</code>页面查看到status变绿为 <code>HEALTHY</code>则表示已经顺利连上了。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b093c3c02.webp" alt="https://img.m-l.cc/2024-08-12-66b9b093c3c02.webp"></p>
<h2 id="配置隧道代理的各个web服务的端口"><a href="#配置隧道代理的各个web服务的端口" class="headerlink" title="配置隧道代理的各个web服务的端口"></a>配置隧道代理的各个web服务的端口</h2><p>在web页面的 <code>Public hostname</code>下面创建各个Public hostnames，将你的各个http服务的站点添加进来例如：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aed7325b9.webp" alt="https://img.m-l.cc/2024-08-12-66b9aed7325b9.webp"></p>
<p>保存后会自动创建DNS记录，将你的域名绑定过去，这样就可以顺利的通过域名访问你的对应的服务了。</p>
<p>对于自建的网站，你可以用OpenResty、nginx等web服务来将它们设定到不同的端口。</p>
<p>这样就恢复对家里云内所有web服务的访问。</p>
<h2 id="代理SSH！"><a href="#代理SSH！" class="headerlink" title="代理SSH！"></a>代理SSH！</h2><p>配置域名和转发方式如下：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b05b3fc82.webp" alt="https://img.m-l.cc/2024-08-12-66b9b05b3fc82.webp"></p>
<p>在需要连接ssh的设备上如，你的PC电脑、你的手机termux等等，也安装好cloudflared，并在 <code>.ssh/config</code>添加好对应的配置如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">Host armbian<br>    HostName ssh.example.com<br>    ProxyCommand cloudflared access ssh --hostname %h<br>   <span class="hljs-built_in"> User </span>admin<br>   <span class="hljs-built_in"> Port </span>2222<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa_armbian<br></code></pre></td></tr></table></figure>

<p>这样你就能通过 <code>ssh armbian</code>命令来连接到你的ssh服务器了</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>至此，家里云盒子上的各个web服务和ssh都已经恢复正常使用，除了rustdesk的服务端被迫放弃掉公网访问之外，我的其它家里云服务全部恢复正常。完结，撒花～！</p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>再游湖</title>
    <url>/2023/10/01/zai-you-hu/</url>
    <content><![CDATA[<center>

<p>抽云若纱且遮羞，<br>半掩银轮惜残柳。<br>西湖夜仲风兴雨，<br>断桥行急望归休。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b04b77221.webp" alt="IMG_20231002_210331"></p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>再登科</title>
    <url>/2024/04/29/zai-deng-ke/</url>
    <content><![CDATA[<center>

<p>乱漪涛声雨淅淅，<br>少年怒马换鲜衣。<br>丝竹渐起鹿鸣呦，<br>会有琼林赏花期。<br><img src="https://img.m-l.cc/2024-08-12-66b9af61d893e.webp" alt="photo_2024-04-29_17-18-57.webp"></p>
</center>

]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>几个linux下可用的音乐软件评价</title>
    <url>/2022/10/22/ji-ge-linux-xia-ke-yong-de-yin-le-ruan-jian-ping-jie/</url>
    <content><![CDATA[<blockquote>
<p>音乐在我们每个人的生命中常常发挥出重要的价值，一首动听的曲子常常能给人带来欢乐，因此今天简单的向大家介绍几款适合中国人的音乐程序：</p>
</blockquote>
<h1 id="闭源系列"><a href="#闭源系列" class="headerlink" title="闭源系列"></a>闭源系列</h1><h2 id="QQ音乐"><a href="#QQ音乐" class="headerlink" title="QQ音乐"></a>QQ音乐</h2><p>QQ音乐作为腾讯旗下众多音乐app中的扛把子，在版权上有着先天的优势，同时随着近年来的不断努力，腾讯的QQ音乐也终于凑齐了win、mac、linux、iphone、android全平台的官方客户端。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad14cd480.webp" alt="image-20221022193629599"></p>
<p>其中linux客户端是基于electron架构运行的，目前已可以正常的流畅运行于全部的linux发行版中：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9afb7cd2ed.webp" alt="image-20221022193957231"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac5ac322b.webp" alt="image-20221022194010776"></p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>QQ音乐庞大的曲库</li>
<li>简洁优美现代感十足的界面</li>
<li>有HD版本，对安卓平板也有较好的支持</li>
</ul>
<h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><ul>
<li>相比于其它平台的版本，linux端存在严重的功能缺失，很多功能没有实现，例如：本地音乐播放和封面歌词识别、听歌识曲等</li>
</ul>
<h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><p>网易云音乐是网易在几年前与deepin合作出品的linux客户端，最后一次更新于2019年，linux端的网易云音乐基于自研架构，基本实现的当年windows版客户端的全部功能。</p>
<p>与QQ音乐一样，网易云音乐也推出了全平台的客户端，并且均实现了完善的功能体系：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acdede1f4.webp" alt="image-20221022194939491"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac8c5e83d.webp" alt="image-20221022195041144"></p>
<h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ul>
<li>功能完善，基本实现了和其它平台同样的功能</li>
<li>自建架构，内存占用较低</li>
<li>协议正确，播放音乐可以正常被MPRIS识别出来，并显示于系统的媒体播放器中。</li>
<li>可以播放本地音乐，并且自动为其识别封面和歌词</li>
</ul>
<h3 id="不足-1"><a href="#不足-1" class="headerlink" title="不足"></a>不足</h3><ul>
<li>随着linux版本的更新，和软件的长久停止维护以及网易云自身api的变动，目前发现音乐栏的个性推荐页面已经无法访问（至少在archlinux上是这样）</li>
</ul>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af8dedeb0.webp" alt="image-20221022200440403"></p>
<ul>
<li>与QQ音乐相比曲库不那么全面</li>
<li>界面比较陈旧，与现代软件存在一定的脱节（不过又不是不能用）</li>
<li>虽然支持全平台，但是对安卓平板并没有专门的适配，体验不佳</li>
</ul>
<h2 id="闭源系列总结"><a href="#闭源系列总结" class="headerlink" title="闭源系列总结"></a>闭源系列总结</h2><p>国产音乐程序的linux客户端好像就是这俩了，各有千秋吧，个人比较喜欢网易云一些。</p>
<h1 id="开源系列"><a href="#开源系列" class="headerlink" title="开源系列"></a>开源系列</h1><h2 id="lx-music"><a href="#lx-music" class="headerlink" title="lx-music"></a>lx-music</h2><p>落雪音乐集合了QQ音乐、网易云音乐、酷狗、酷我、咪咕五大国产音乐平台的api。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac91b7076.webp" alt="image-20221022201533992"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af99aed77.webp" alt="image-20221022201601777"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b080a6538.webp" alt="image-20221022201959981"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad426cef8.webp" alt="image-20221022202113541"></p>
<h3 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h3><ul>
<li>支持除iphone之外的全部平台，并且对安卓平板也有良好的适配</li>
<li>拥有国内五大家的音乐资源</li>
<li>界面简洁</li>
<li>在线功能相对完善</li>
</ul>
<h3 id="不足-2"><a href="#不足-2" class="headerlink" title="不足"></a>不足</h3><ul>
<li>不能播放本地音乐</li>
<li>界面简洁得有点简陋了</li>
</ul>
<h2 id="listen1"><a href="#listen1" class="headerlink" title="listen1"></a>listen1</h2><p>Listen 1可以搜索和播放来自网易云音乐，QQ音乐，酷狗音乐，酷我音乐，Bilibili，咪咕音乐网站的歌曲，让你的曲库更全面。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b6f1942cf.gif" alt="R6bTXkY"></p>
<p>还支持歌单<img src="https://img.m-l.cc/2024-08-12-66b9ac793b0d1.webp" alt="Ae6ItmA">功能，你可以方便的播放，收藏和创建自己的歌单。</p>
<h3 id="优势-3"><a href="#优势-3" class="headerlink" title="优势"></a>优势</h3><ul>
<li>相比lx-music更多了一个bilibili源，曲库更加丰富</li>
<li>可以创建自己的歌单，而lx-music只能导入其他平台的现有歌单</li>
<li>可以播放本地音乐，并正确识别歌词</li>
<li>拥有四种主题，均体现出了简洁、美观、现代化的特征</li>
<li>创造性的增加了浏览器插件的版本，用此方式实客户端开源的音乐程序就相对比较多了，个人感觉目前比较出彩的也就listen1、lx-music这两个，其他的一些客户端如网易云音乐的electron客户端之类的，个人感觉在有原生客户端的情况下，似乎并没有多少存在的必要性。现了更为出色的多平台兼容性。</li>
</ul>
<h3 id="不足-3"><a href="#不足-3" class="headerlink" title="不足"></a>不足</h3><ul>
<li>没有本地音乐无法正常识别封面</li>
<li>现代白、黑主题存在一定的bug,在部分设备上比较卡</li>
<li>使用的electron13版本相对比较陈旧，用较新版本的electron打开时会存在各种bug</li>
<li>虽然做了android端，但更新与桌面端不同部，存在较多问题，目前无法正常使用，并且没有iphone端。</li>
</ul>
<h2 id="YesPlayMusic"><a href="#YesPlayMusic" class="headerlink" title="YesPlayMusic"></a>YesPlayMusic</h2><p>一款高颜值的第三方网易云播放器</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac7f2ae6c.webp" alt="image-20221022203124553"></p>
<p>拥有如下图所示的超多特性：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ace394a22.webp" alt="image-20221022203225962"></p>
<p>支持linux、mac以及windows系统，可以部署在vercel或vps搭建网页版程序。</p>
<h3 id="优势-4"><a href="#优势-4" class="headerlink" title="优势"></a>优势</h3><ul>
<li>可以自己搭建到vercel或vps上部署一个自己的在线音乐平台</li>
<li>界面比较美观、现代</li>
</ul>
<h3 id="不足-4"><a href="#不足-4" class="headerlink" title="不足"></a>不足</h3><ul>
<li>没有移动端</li>
<li>部署的网页版也无法在移动端安卓苹果设备上使用</li>
<li>只有网易云这一个音乐源</li>
</ul>
<h2 id="开源系列总结"><a href="#开源系列总结" class="headerlink" title="开源系列总结"></a>开源系列总结</h2><p>客户端开源的音乐程序就相对比较多了，个人感觉目前比较出彩的也就listen1、lx-music这两个，其他的一些客户端如网易云音乐的electron客户端之类的，个人感觉在有原生客户端的情况下，似乎并没有多少存在的必要性。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前各类国产音乐软件中由官方出品的两款都实现了全平台的兼容，并且都有着官方的支持，相较之下的确各有千秋。</p>
<p>开源客户端中，个人看好listen1和lx-music，其中在电脑端主要使用listen1的桌面版，而移动端和平板上主要使用lx-music。</p>
<p>其实listen1的浏览器插件版与桌面版区别不大，个人感觉最大的区别就是本地音乐的功能以及桌面歌词。</p>
]]></content>
      <categories>
        <category>music</category>
      </categories>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Onedrive空间搭建自己的图床</title>
    <url>/2021/10/11/li-yong-onedrive-kong-jian-da-jian-zi-ji-de-tu-chuang/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>在日常的网站部署中，我们常常需要引用到许多图片，而如果由于各种原因，我们通常希望减少从我们自己的服务器中消耗这部分流量，因此一个合适的图床便显得尤为重要，可以帮助我们在不影响网站运行的同时减少硬盘空间和流量的消耗，达到节省资源的目的。而Ondrive无疑为人们提供了一个很棒的平台，如果你是e5用户/教育用户或者付费的个人用户，那么普遍都拥有较大的存储空间如E5开发者账户就可以拥有25个容量达到5t的帐号，那么利用这个空间不管是用于搭建自己的网盘亦或者图床都是极为便利的。</p>
<p>实现效果：映射你Onedrive的特定文件夹内容，并允许访客在这一文件夹下上传、下载、获取图片直链或引用方式，并为了保护隐私防止其访问到你的其他页面。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><hr>
<p>有一台个人服务器（或使用公共免费虚拟空间）<br>有读写权限的世纪互联版Onedrive或Office365附赠的Onedrive<br>有个人域名（非必须）</p>
<h2 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h2><hr>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c1938a096.webp" data-fancybox="images" data-caption="tc_picture_00"><img src="https://img.m-l.cc/2024-08-12-66b9c1938a096.webp" width ="720"   /></a></center>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c1d7e432f.webp" data-fancybox="images" data-caption="tc_picture_02"><img src="https://img.m-l.cc/2024-08-12-66b9c1d7e432f.webp" width ="720"   /></a></center>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c20205c95.webp" data-fancybox="images" data-caption="tc_picture_01"><img src="https://img.m-l.cc/2024-08-12-66b9c20205c95.webp" width ="720"   /></a></center>



<br>
搭建好处：

<ul>
<li>映射自己Onedrive内容</li>
<li>图片提供网络直链（图床功能）</li>
<li>避免消耗服务器流量和空间（直接映射Onedrive）<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2></li>
</ul>
<hr>
<p>无个人服务器用户申请免费虚拟空间：<a href="https://www.000webhost.com/">https://www.000webhost.com/</a></p>
<p>有个人服务器用户安装PHP（你也可以使用一些PHP的Serverless服务）</p>
<p>【推荐】为了 方便操作，我这边使用宝塔面板：</p>
<p>宝塔官网：<a href="https://www.bt.cn/?invite_code=MV9rd3Jmbno=">https://www.bt.cn/?invite_code=MV9rd3Jmbno=</a></p>
<p>服务器安装宝塔后，安装PHP（建议5.6～7.4版本）、Nginx（版本随意）：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c247cc652.webp" data-fancybox="images" data-caption="install"><img src="https://img.m-l.cc/2024-08-12-66b9c247cc652.webp" width ="720"   /></a></center>

<p>之后，选择网站–添加网站：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c26fc6a01.webp" data-fancybox="images" data-caption="install1"><img src="https://img.m-l.cc/2024-08-12-66b9c26fc6a01.webp" width ="720"   /></a></center>

<p>之后打开这个网站的目录，下载这个Oneindex项目master到本目录：</p>
<p>  <a href="https://github.com/Mintimate/OneindexM">众多Ondeindex项目相继倒台后基于Oneindex、OneindexN的OneindexM，作者：Mintimate</a></p>
<h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><hr>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c29809dcf.webp" data-fancybox="images" data-caption="下载源码"><img src="https://img.m-l.cc/2024-08-12-66b9c29809dcf.webp" width ="720"   /></a></center>

<p>之后设置权限，给www用户全部读写权限，进入网站：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c2bc40c10.webp" data-fancybox="images" data-caption="环境检测"><img src="https://img.m-l.cc/2024-08-12-66b9c2bc40c10.webp" width ="720"   /></a></center>

<p>之后，点击下一步以后，出现界面：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c2f56ab0d.webp" data-fancybox="images" data-caption="等待参数"><img src="https://img.m-l.cc/2024-08-12-66b9c2f56ab0d.webp" width ="720"   /></a></center>

<p>我们的环境准备就完成了。</p>
<h2 id="应用ID和机密"><a href="#应用ID和机密" class="headerlink" title="应用ID和机密"></a>应用ID和机密</h2><p>可以从这张图里看到：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c3635645b.webp" data-fancybox="images" data-caption="等待参数"><img src="https://img.m-l.cc/2024-08-12-66b9c3635645b.webp" width ="720"   /></a></center>

<p>我们需要三个参数：</p>
<ul>
<li>client_secret：应用机密，即：<strong>客户端密码。</strong></li>
<li>client_id：应用ID，即：<strong>应用代号。</strong></li>
<li>URL：这个URL用于创建应用时，授权验证。</li>
</ul>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><hr>
<p>如果你是Office365送的OneDrive，也就是Onedrive国际版本，到<a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Microsoft Azure App registrations</a>内创建。<br>如果你是世纪互联版本OneDrive，到<a href="https://portal.azure.cn/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Microsoft Azure.cn App registrations</a>内创建。</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c38c6067f.webp" data-fancybox="images" data-caption="创建应用"><img src="https://img.m-l.cc/2024-08-12-66b9c38c6067f.webp" width ="720"   /></a></center>

<p>之后，我们填入需要的参数：</p>
<ul>
<li>名称：最好为纯英文。</li>
<li>受支持的帐户类型：如图：选择任何组织目录的账号和个人</li>
<li>重定向 URI：这里填入作者Mintimate建立的API：     <code><a href="https://tool.mintimate.cn/oneindexM/">https://tool.mintimate.cn/oneindexM/</a> </code></li>
</ul>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c3b2b0cc8.webp" data-fancybox="images" data-caption="填入参数"><img src="https://img.m-l.cc/2024-08-12-66b9c3b2b0cc8.webp" width ="720"   /></a></center>

<p>之后，点击注册即可。</p>
<h3 id="获取应用ID"><a href="#获取应用ID" class="headerlink" title="获取应用ID"></a>获取应用ID</h3><hr>
<p>应用ID很好获取，注册了后，即可获得：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c3e5eaf72.webp" data-fancybox="images" data-caption="填入参数"><img src="https://img.m-l.cc/2024-08-12-66b9c3e5eaf72.webp" width ="720"   /></a></center>

<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><hr>
<p>在获取应用机密前，我们需要设置权限，点击：<code>API权限</code>-<code>Microsoft Graph</code>:</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c40a7c821.webp" data-fancybox="images" data-caption="设置权限"><img src="https://img.m-l.cc/2024-08-12-66b9c40a7c821.webp" width ="720"   /></a></center>

<p>依此勾选：</p>
<ul>
<li>offline_access</li>
<li>Files.Read</li>
<li>Files.Read.All</li>
</ul>
<p>最后<strong>更新权限</strong>即可：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c43318f0a.webp" data-fancybox="images" data-caption="设置权限-完成"><img src="https://img.m-l.cc/2024-08-12-66b9c43318f0a.webp" width ="720"   /></a></center>

<p>到此，设置权限结束，接下来，我们可以去获取机密了。</p>
<h3 id="获取机密"><a href="#获取机密" class="headerlink" title="获取机密"></a>获取机密</h3><hr>
<p>最后，我们可以获取应用机密（密钥）了，点击：<code>证书和密码</code>-<code>新建客户端密码</code>：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c45eb3845.webp" data-fancybox="images" data-caption="获取密钥"><img src="https://img.m-l.cc/2024-08-12-66b9c45eb3845.webp" width ="720"   /></a></center>

<p>按提示设置即可得到：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c482016a1.webp" data-fancybox="images" data-caption="获取密钥-完成"><img src="https://img.m-l.cc/2024-08-12-66b9c482016a1.webp" width ="720"   /></a></center>

<h2 id="初始化OneIndex"><a href="#初始化OneIndex" class="headerlink" title="初始化OneIndex"></a>初始化OneIndex</h2><hr>
<p>上一步，我们已经得到了<strong>应用ID和机密</strong>，现在我们填入即可：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c4ae64759.webp" data-fancybox="images" data-caption="输入ID和密钥"><img src="https://img.m-l.cc/2024-08-12-66b9c4ae64759.webp" width ="720"   /></a></center>

<p>之后，点击<code>下一步</code>-<code>绑定账号</code>，即可完成绑定：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c4f15997f.webp" data-fancybox="images" data-caption="绑定确认"><img src="https://img.m-l.cc/2024-08-12-66b9c4f15997f.webp" width ="720"   /></a></center>

<center><a href="https://img.m-l.cc/2024-08-12-66b9c51bb8c28.webp" data-fancybox="images" data-caption="绑定成功"><img src="https://img.m-l.cc/2024-08-12-66b9c51bb8c28.webp" width ="720"   /></a></center>

<p>你可以选择<strong>进入后台</strong>,也可以选择直接浏览效果页面。（默认为你OneDrive的根目录）</p>
<h2 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h2><p>首先，我们需要初始化网盘，进入后台后点击<strong>页面缓存</strong>，选择<strong>重建所有缓存</strong>：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c52a985f8.webp" data-fancybox="images" data-caption="tc_picture_03.png"><img src="https://img.m-l.cc/2024-08-12-66b9c52a985f8.webp" width ="720"   /></a></center>

<p>之后按顺序点击<strong>图床设置(OneImages)</strong> ，勾选<strong>作为网站首页</strong>以及<strong>允许游客上传图片</strong>：</p>
<center><a href="https://img.m-l.cc/2024-08-12-66b9c5568cced.webp" data-fancybox="images" data-caption="tc_picture_03.png"><img src="https://img.m-l.cc/2024-08-12-66b9c5568cced.webp" width ="720"   /></a></center>
至此我们就完成了一个完整的图床搭建过程，只需要绑定上我们自己的域名，就可以愉快的使用了。（非必须）

<ul>
<li>注：本文部分内容转载自 <code>Mintimate's Blog</code><a href="https://www.mintimate.cn/2020/09/22/oneindex/">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>图床建设</tag>
      </tags>
  </entry>
  <entry>
    <title>北樱</title>
    <url>/2021/04/08/bei-ying/</url>
    <content><![CDATA[<center>

<p>樱飘携绿窈，春深温风窕。<br>期得伊人伫，回眸音容巧。</p>
</center>

<center><a href="https://img.m-l.cc/2024-08-12-66b9c77e655cd.webp" data-fancybox="images" data-caption="插图"><img src="https://img.m-l.cc/2024-08-12-66b9c77e655cd.webp" width ="240"    /></a></center>

]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>利用koyeb免费自建bitwarden服务端</title>
    <url>/2023/03/21/li-yong-koyeb-mian-fei-zi-jian-bitwarden-fu-wu-duan/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近收到了github发来的“两步验证(F2A)最后通牒”,说是5月4日之前还不开启F2A的话,就会限制github网页端的访问,并自动跳转到F2A的设置页面去。这就很烦,无奈只能去把F2A打开咯。<br>可以用于接收TOTP的程序有很多,官方给出的建议有1password、authy等等,还有开源的Free<br>OTP和FreeOTP以及国产程序“神锁离线版”等等,可以自己选择合适的产品。<br>不过对于博主个人而言,bitwarden本身的多平台支持、以及支持自建服务的几个属性,使之成为博主的不二选择。(关键是早就在用它存密码了,习惯而已)</p>
<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>本博客使用的bitwarden服务端为rust编写的开源替代客户端<a href="https://github.com/dani-garcia/vaultwarden">vaultwarden</a>,<a href="https://bitwarden.com/download/">用 Rust 编写并与上游 Bitwarden 客户端</a>,该项目是兼容的 Bitwarden 服务器 API 的替代实现*,非常适合运行官方资源密集型服务可能不理想的自托管部署。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9afbdeca15.webp" alt="image-20230321123328198"></p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>首先,注册一个koyeb,(如果你有其他可以部署docker的PaaS平台,你也可以自己看着弄)</p>
<p>之后,登陆你的koyeb:</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad1a1ffa1.webp" alt="image-20230321123534246"></p>
<p>接着,点击 <code>create app +</code>来创建应用,并选择docker选项</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9adcc4b8bf.webp" alt="image-20230321123737038"></p>
<p>在images栏填入 <code>vaultwarden/server</code>,点击 <code>next</code>、<code>Advanced</code>、将端口从8000修改为80</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af3b9a9ba.webp" alt="image-20230321124112083"></p>
<hr>
<h1 id="此处为2023年4月7日更新内容"><a href="#此处为2023年4月7日更新内容" class="headerlink" title="此处为2023年4月7日更新内容"></a>此处为2023年4月7日更新内容</h1><p>此前的教程内容部署出来的容器可以用,单koyeb每个月会自动重新部署容器,从而导致使用内置数据库的服务端丢失所有用户数据。故而今天琢磨了以下把永久保存数据库的方法给总结出来了,并在此写下</p>
<h2 id="申请一个在线mysql数据库"><a href="#申请一个在线mysql数据库" class="headerlink" title="申请一个在线mysql数据库"></a>申请一个在线mysql数据库</h2><p>网上有很多白嫖在线mysql数据库的平台,大部分还是比较稳妥可靠的,如果你实在还是不放心,那就干脆买服务器自建好了。博主这里选择使用<a href="https://db4free.net/">db4free.net</a>提供的免费数据库。</p>
<p>打开db4free,点击左侧菜单栏中的数据库一栏:</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad8074144.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad8074144.webp"></p>
<p>之后在新页面点击 <code>马上建立你的免费MySQL账号 »</code>按钮</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad9334368.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad9334368.webp"></p>
<p>依次填入数据库名称、数据库用户名、数据库密码以及你的邮箱(此处可用临时邮箱)这样你就申请到了一个免费的mysql数据库。在接下来的文字中我将用[dbname]、[username]、[password]来分别代表你输入的数据库名、用户名和密码。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae811d282.webp" alt="https://img.m-l.cc/2024-08-12-66b9ae811d282.webp"></p>
<hr>
<p>2023.11.19更新</p>
<p>经过反馈和确认，现在新建的数据库直接被koyeb中的vaultwarden调用会导致表创建失败暂时没去研究原因，偷个懒直接把创建好的空白数据库放上来。</p>
<p>使用步骤打开db4free自带的phpMyAdmin<br><img src="https://img.m-l.cc/2024-08-12-66b9af1ba7f54.webp" alt="https://img.m-l.cc/2024-08-12-66b9af1ba7f54.webp"></p>
<p>输入数据库的帐号密码</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad201d66a.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad201d66a.webp"></p>
<p>点击你的数据库名称</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af66f2843.webp" alt="https://img.m-l.cc/2024-08-12-66b9af66f2843.webp"></p>
<p>点击导入</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b0700f4b8.webp" alt="https://img.m-l.cc/2024-08-12-66b9b0700f4b8.webp"></p>
<p>选择已创建好的<a href="https://gh.dmnb.cf/https://raw.githubusercontent.com/zzy-ac/My-Selves-Cloud/main/vaultwarden.sql">空白数据库</a>并导入：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae1e17ba9.webp" alt="https://img.m-l.cc/2024-08-12-66b9ae1e17ba9.webp"></p>
<hr>
<p>至此你已经配置好了你的在线数据库,由于<a href="https://github.com/dani-garcia/vaultwarden">vaultwarden</a>项目的设置,你需要将数据库的用户名、密码、数据库名重新排列成mysql数据库的链接形式来方便docker容器将其使用,即:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">mysql://[username]:[password]@db4free.net:3306/[dbname]<br></code></pre></td></tr></table></figure>

<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>接下来你只需要回到koyeb容器的创建页面,如果已经创建了的话,你只需要进入该项目的设置页面,找到 <code>Environment variables</code>在其下创建如图的两个环境变量,其中 <code>DATABASE_URL</code>的值为上面排列好的 <code>mysql://[username]:[password]@db4free.net:3306/[dbname]</code>而 <code>RUST_BACKTRACE</code>的值则为1。<br><img src="https://img.m-l.cc/2024-08-12-66b9b02191c35.webp" alt="https://img.m-l.cc/2024-08-12-66b9b02191c35.webp"></p>
<p>之后的步骤没有区别,照做就行。</p>
<hr>
<p>修改你的应用名称,也就是你koyeb默认生成的网站的前缀</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acb0b118f.webp" alt="image-20230321124200568"></p>
<p>点击 <code>deploy</code>,等待程序状态变为healthy,即可正常使用</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac4eb5eae.webp" alt="image-20230321124344526"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>打开bitwarden(手机、插件、pc客户端都行),在添加账户时点右上角设置,将你的获取的域名填入 <code>服务器URL</code>选项中,保存即可。</p>
<p>自此你就可以使用完全自建,不用担心泄露问题的全平台密码管理器了,不管是安卓手机还是iphon亦或者谷歌内核的各个浏览器以及firefox浏览器等,均可直接自动填充密码。并且由于密码全都加密保存在你自建的koyeb容器中,也可以不用担心密码泄露问题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是用koyeb搭建bitwarden服务端的全部流程,是不是非常无脑且快捷?有需要的话就赶紧去部署起来吧!</p>
]]></content>
      <categories>
        <category>bitwarden</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>千亩湖边</title>
    <url>/2024/06/02/qian-mu-hu-bian/</url>
    <content><![CDATA[<center>

<p>湖映千亩云色浅，</p>
<p>漾起微波杨柳掀。</p>
<p>世上春风常易涣，</p>
<p>韵散才讶蛙鸣喧。</p>
</center>

]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>午后听涛</title>
    <url>/2021/05/29/wu-hou-ting-tao/</url>
    <content><![CDATA[<center>

<p>平涛卷岸沉，<br>浪散迎风润。<br>独斟茶方尽，<br>落子已无人。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>华为手机EMUI11，去除xxx正在其他应用上层显示这一通知</title>
    <url>/2021/02/03/hua-wei-shou-ji-emui11-qu-chu-xxx-zheng-zai-qi-ta-ying-yong-shang-ceng-xian-shi-zhe-yi-tong-zhi/</url>
    <content><![CDATA[<p>1、首先下载通知滤盒0.7.0这个版本（新版本收费）<br>2、下好之后先别打开，去设置→移动网络→流量管理→应用联网→找到通知滤盒把wlan和移动数据全关了<br>3、打开通知滤盒，选中xxx正在其他应用上层显示，长按，选择消除。<br>4、完成。<br>5、如有失效，请重复以上操作或按软件内提示操作</p>
]]></content>
      <categories>
        <category>手机折腾</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>咏蝉</title>
    <url>/2024/08/20/yong-chan/</url>
    <content><![CDATA[<center>

<p>今夏畅响绕梁梢，</p>
<p>叶落始觉蝉鸣少。</p>
<p>尤怜埋没十余载，</p>
<p>却惜韶华莫自骄。</p>
<p><img src="https://img.m-l.cc/2024-08-20-66c46044cf7f9.webp" alt="1000059433.webp"></p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>图床一键迁移脚本</title>
    <url>/2024/09/19/tu-chuang-yi-jian-qian-yi-jiao-ben/</url>
    <content><![CDATA[<blockquote>
<p>前段时间更换了图床的位置，决定把之前博客里的所有图片统一转移到新图床。But一张一张手动上传也未免太痛苦和呆逼了，所以决定用脚本实现统一上传。正好，亲爱的<a href="https://zhul.in/">zhullyb</a>也在更换图床，遂直接搬运了他的脚本</p>
</blockquote>
<h1 id="批量迁移脚本"><a href="#批量迁移脚本" class="headerlink" title="批量迁移脚本"></a>批量迁移脚本</h1><p><a href="https://zhul.in/2024/08/20/picbed-upload-script-and-image-migration/">zhullyb的原文</a></p>
<p>脚本内容展示如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？</span><br>file_extension = [<br>    <span class="hljs-string">&#x27;.md&#x27;</span>,<br>    <span class="hljs-string">&#x27;.yml&#x27;</span>,<br>    <span class="hljs-string">&#x27;.html&#x27;</span><br>]<br><br>pic_urls = []<br><br>_files = []<br><br><br><span class="hljs-comment"># 修改后的正则表达式，用于匹配 Markdown 图片链接</span><br>pattern = <span class="hljs-string">r&#x27;!\[.*?\]\((.*?)\)&#x27;</span><br><br><span class="hljs-comment"># 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    此处的返回值应该是新的 url</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中</span><br><span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(<span class="hljs-string">&quot;.&quot;</span>):<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        <span class="hljs-keyword">if</span> file.endswith(tuple(file_extension)):<br>            file_name = os.path.join(root, file)<br>            <span class="hljs-keyword">with</span> open(file_name, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                content = f.read()<br>            urls = re.findall(pattern, content)<br>            <span class="hljs-keyword">if</span> urls:<br>                pic_urls.extend(urls)<br>                _files.append(file_name)<br><br><span class="hljs-comment"># 先转为集合，再转回列表，进行去重</span><br>pic_urls = list(set(pic_urls))<br>print(<span class="hljs-string">&quot;共找到图片：&quot;</span>, len(pic_urls))<br><br>url_dict = &#123;&#125;<br><br><span class="hljs-comment"># 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接</span><br><span class="hljs-keyword">for</span> i,u <span class="hljs-keyword">in</span> enumerate(pci_urls, start=<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">try</span>:<br>            new_u = upload(u)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">if</span> t == <span class="hljs-number">3</span>:<br>                new_u = u<br>                print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;u&#125;</span> 无法上传：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>	url_dict[u] = new_u<br>    print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> / <span class="hljs-subst">&#123;len(pic_urls)&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 对 _files 列表中的文件一一完成替换</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> _files:<br>    <span class="hljs-keyword">with</span> open(file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        content = f.read()<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> url_dict.items():<br>        content = content.replace(k, v)<br>    <span class="hljs-keyword">with</span> open(file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(content)<br>    print(<span class="hljs-string">&quot;完成替换：&quot;</span>, file)<br></code></pre></td></tr></table></figure>

<p>如上，经过脚本内容与zhullyb的原版略有差别，主要是由于之前所用的图片来源有些五花八门：直接引用的其他外链图片、以前用的github图床、vercel图床等等，过于混乱，因此在这里修改为统一识别出文件中markdown格式的图片来，并通过上传脚本下载到本地—上传到新的图床。</p>
<p>至此，完美实现了该脚本的功能，成功将本博客的图片切换统一的自建图床。</p>
<h1 id="多地备份"><a href="#多地备份" class="headerlink" title="多地备份"></a>多地备份</h1><p>同时，通过挂载多种网盘、储存桶到Alist的方式，采用<a href="https://github.com/dr34m-cn/taosync">TaoSync</a>项目进行各个图床间的自动同步，确保图片文件在多个储存桶内均能稳定运行。</p>
<p><img src="https://img.m-l.cc/2024-09-19-66ebefb7a376d.webp" alt="1726738327986.webp"></p>
<p>至此完美实现图床的使用和迁移</p>
]]></content>
      <categories>
        <category>图床建设</category>
      </categories>
      <tags>
        <tag>图床建设</tag>
      </tags>
  </entry>
  <entry>
    <title>培训偶记</title>
    <url>/2022/07/08/pei-xun-ou-ji/</url>
    <content><![CDATA[<center>


<p>黄梅骤雨湘江漪，<br>岳麓枫香日影稀。<br>胆使昨宵愁绪寄，<br>抬眼窥星亦可期。</p>
</center>]]></content>
  </entry>
  <entry>
    <title>基于one-api项目，白嫖火山引擎提供的deepseek-R1模型</title>
    <url>/2025/02/28/ji-yu-one-api-xiang-mu-bai-piao-huo-shan-yin-qing-ti-gong-de-deepseek-r1-mo-xing/</url>
    <content><![CDATA[<blockquote>
<p>好久不见，时隔数月，笔者重新有空折腾这些乱七八糟的玩意儿，因此撰写本文。</p>
</blockquote>
<h1 id="去火山引擎申请一个deepseek的api"><a href="#去火山引擎申请一个deepseek的api" class="headerlink" title="去火山引擎申请一个deepseek的api"></a>去火山引擎申请一个deepseek的api</h1><p>如何注册帐号、点击页面等步骤省略，看截图自行摸索</p>
<p><img src="https://img.m-l.cc/2025-02-28-67c16585d9184.webp" alt="1740727666202.webp"></p>
<p>火山提供的api有50w免费token,够用一段时间了。</p>
<h1 id="搭建一个one-api"><a href="#搭建一个one-api" class="headerlink" title="搭建一个one-api"></a>搭建一个one-api</h1><p>one-api项目为LLM API 管理 &amp; 分发系统，支持 OpenAI、Azure、Anthropic Claude、Google  Gemini、DeepSeek、字节豆包、ChatGLM、文心一言、讯飞星火、通义千问、360 智脑、腾讯混元等主流模型，统一 API  适配，可用于 key 管理与二次分发。单可执行文件，提供 Docker 镜像，一键部署，开箱即用。</p>
<p>通过标准的 OpenAI API 格式访问所有的大模型，开箱即用</p>
<p>具体教程请看<a href="https://github.com/songquanpeng/one-api">官方项目</a></p>
<p><img src="https://img.m-l.cc/2025-02-28-67c1677bcc34b.webp" alt="1740728179251.webp"></p>
<h1 id="将火山引擎的deepseek-api填入one-api"><a href="#将火山引擎的deepseek-api填入one-api" class="headerlink" title="将火山引擎的deepseek api填入one-api"></a>将火山引擎的deepseek api填入one-api</h1><p>如图：</p>
<p><img src="https://img.m-l.cc/2025-02-28-67c167c32cfad.webp" alt="1740728251658.webp"></p>
<p>模型部分，填入Deepseek-R1,密钥部分填入火山的token,其他如图。</p>
<h1 id="one-api中创建key"><a href="#one-api中创建key" class="headerlink" title="one-api中创建key"></a>one-api中创建key</h1><p>如图：</p>
<p><img src="https://img.m-l.cc/2025-02-28-67c1686020264.webp" alt="1740728409981.webp"></p>
<p>之后将one-api的地址，作为BASE_URL，将one-api的令牌作为OPENAI_API_KEY，填入你的NextChat环境变量，即可获得一个白嫖的Deepseek自建web客户端。</p>
<p><img src="https://img.m-l.cc/2025-02-28-67c1645be7cbe.webp" alt="1740727376076.webp"></p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
        <tag>OpenAI</tag>
        <tag>DeepSeek</tag>
      </tags>
  </entry>
  <entry>
    <title>大明初夏</title>
    <url>/2022/06/16/da-ming-chu-xia/</url>
    <content><![CDATA[<center>

<p>半池莲叶满湖柳，<br>历下亭前谑轻鸥。<br>曾惜雨荷花期误，<br>还执红袖再撑舟。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acbc3c182.webp" alt="大明湖畔"></p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>好烦啊啊啊啊啊啊</title>
    <url>/2021/09/17/hao-fan-a-a-a-a-a-a/</url>
    <content><![CDATA[<p>妈卖批，劳资不管了!烦死老子啦啊啊啊啊啊！</p>
]]></content>
  </entry>
  <entry>
    <title>基于各种云储存搭建私人图床</title>
    <url>/2021/10/22/ji-yu-ge-chong-yun-chu-cun-da-jian-si-ren-tu-chuang/</url>
    <content><![CDATA[<blockquote>
<p>本博客在之前由于需求较低，用到的图片不算多所以一直是直接讲图片随着pages服务一起布置的，然而前段时间已经将博客迁移到服务器上了，再继续部署在服务器上就多多少少有些浪费流量和空间，故开始寻找一个合适的私人图床.</p>
</blockquote>
<blockquote>
<p>无意间用RSS订阅的一个朋友的博客推送来一篇新文章，让我发现了<a href="https://github.com/xiebruce/PicUploader">PicUploader</a>这个项目，这款图床工具搭建简介，支持的各类云空间丰富，还支持同时使用多个免费空间均衡，体验可以说是非常不错了。</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Github 项目：<a href="https://github.com/xiebruce/PicUploader">https://github.com/xiebruce/PicUploader</a><br>作者撰写的详细使用文档：<a href="https://www.xiebruce.top/17.html">https://www.xiebruce.top/17.html</a></p>
<p>作者编写的文档<strong>非常详细</strong>，但是有些过于冗杂了，我只是想在服务器上搭建一个自用。所以本文记录的是在阿里云轻量服务器上配合宝塔面板，简单搭建 PicUploader，并使用github作为图床储存空间，以及给github增加反向代理以提速优化体验的过程。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>一个服务器/vps</li>
<li>一个域名</li>
<li>一个人类的大脑</li>
<li>一个康健的人类躯体</li>
</ul>
<h2 id="安装-PicUploader"><a href="#安装-PicUploader" class="headerlink" title="安装 PicUploader"></a>安装 PicUploader</h2><h3 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h3><p>作者提供的教程很详细，但是对于如何在VPS上部署有些语焉不详，在这里博主使用的是相对来说更直观更适合小白用户一些的宝塔面板，来部署所需的环境，当然有基础的朋友可以直接自己部署nigex。</p>
<p>这里就不再赘述。</p>
<p>假设你已经安装好宝塔面板，安装好Nginx、MySQL、PHP，然后继续看下文。</p>
<h3 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h3><p>如下图，在宝塔面板点击  <code>网站</code>  -  <code>添加站点</code></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9c05422640.webp" alt="Screenshot_2021-10-22-22-00-55-0822382073_EDIT_1634911298694_22_02_01"></p>
<p>在弹出的窗口中，输入你的域名，选择好对应的php版本</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9c08b93ada.webp" alt="Screenshot_20211022220752_22_08_34"></p>
<p>点击提交后，就会显示你刚刚添加的站点，点击根目录就会进入网站目录</p>
<h3 id="下载-PicUploader-程序"><a href="#下载-PicUploader-程序" class="headerlink" title="下载 PicUploader 程序"></a>下载 PicUploader 程序</h3><p>之后，点击网站目录下的终端按钮在终端中打开你所创建的网站目录，并使用git命令将所需项目clone到本地</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xiebruce/</span>PicUploader ./<br></code></pre></td></tr></table></figure>
<p><img src="https://img.m-l.cc/2024-08-12-66b9c0bd868f6.webp" alt="1723449515324.webp"></p>
<p>看到如上结果后表示已经完成了</p>
<p>之后回到宝塔面板的站点根目录，刷新页面，就会看到一个<code>PicUploader</code>项目所包含的全部文件<br><img src="https://img.m-l.cc/2024-08-12-66b9c0e58ecda.webp" alt="1723449567296.webp"></p>
<h3 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h3><p>在宝塔面板左侧菜单栏，点击  <code>网站</code>，找到你添加的站点，点击该站点右侧的  <code>设置</code><br><img src="https://img.m-l.cc/2024-08-12-66b9c10912912.webp" alt="1723449601688.webp"></p>
<h4 id="设置SSL"><a href="#设置SSL" class="headerlink" title="设置SSL"></a>设置SSL</h4><p>这个是可选，不过建议设置。如下图选择  <code>SSL</code>-  <code>Let’s Encrypt</code>，填写管理员邮箱，勾选你的域名，然后点击申请即可：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9c127b5861.webp" alt="1723449632537.webp"><br>注意：申请 SSL 前需要确保你的域名已经解析至 VPS 的IP，并且没有开启 CDN</p>
<p>申请成功后，打开  <code>强制Https</code>  即可</p>
<h4 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h4><p>最关键的步骤是这个</p>
<p>点击  <code>配置文件</code>  进行修改，这里贴出我的配置，需要注意你的配置文件跟我的并不一样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">server<br>&#123;<br>    listen 80;<br>    listen 443 ssl http2;<br>    server_name pic.uud.me;<br>    root /www/wwwroot/pic.uud.me/PicUploader;<br>    <br>    <span class="hljs-comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br>    <span class="hljs-comment">#error_page 404/404.html;</span><br>    <span class="hljs-comment">#AUTH_START</span><br>    auth_basic <span class="hljs-string">&quot;Authorization&quot;</span>;<br>    auth_basic_user_file /www/server/pass/pic.uud.me.pass;<br>    <span class="hljs-comment">#AUTH_END</span><br>    <span class="hljs-comment">#HTTP_TO_HTTPS_START</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$server_port</span> !~ 443)&#123;<br>        rewrite ^(/.*)$ https://<span class="hljs-variable">$host</span><span class="hljs-variable">$1</span> permanent;<br>    &#125;<br>    <span class="hljs-comment">#HTTP_TO_HTTPS_END</span><br>    ssl_certificate    /www/server/panel/vhost/cert/pic.uud.me/fullchain.pem;<br>    ssl_certificate_key    /www/server/panel/vhost/cert/pic.uud.me/privkey.pem;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>    ssl_prefer_server_ciphers on;<br>    ssl_session_cache shared:SSL:10m;<br>    ssl_session_timeout 10m;<br>    error_page 497  https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br><br>    <span class="hljs-comment">#SSL-END</span><br>    <br>    <span class="hljs-comment">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br>    error_page 404 /404.html;<br>    error_page 502 /502.html;<br>    <span class="hljs-comment">#ERROR-PAGE-END</span><br>    <br>    <span class="hljs-comment">#PHP-INFO-START  PHP引用配置，可以注释或修改</span><br>    include enable-php-73.conf;<br>    <span class="hljs-comment">#PHP-INFO-END</span><br>    <br>    <span class="hljs-comment">#REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span><br>    include /www/server/panel/vhost/rewrite/pic.uud.me.conf;<br>    <span class="hljs-comment">#REWRITE-END</span><br>    <br>    <span class="hljs-comment">#禁止访问的文件或目录</span><br>    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)<br>    &#123;<br>        <span class="hljs-built_in">return</span> 404;<br>    &#125;<br>    <br>    <span class="hljs-comment">#一键申请SSL证书验证目录相关设置</span><br>    location ~ \.well-known&#123;<br>        allow all;<br>    &#125;<br>    <br>     location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$<br>    &#123;<br>        expires      30d;<br>        error_log off;<br>        access_log /dev/null;<br>    &#125;<br>    <br>    location ~ .*\.(js|css)?$<br>    &#123;<br>        expires      12h;<br>        error_log off;<br>        access_log /dev/null; <br>    &#125;<br>    <br>    location / &#123;<br>        index dashboard.php;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ index.php<span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>;<br>    &#125;<br><br>    location ~ \.php$ &#123;<br>        fastcgi_pass 127.0.0.1:9000;<br>        fastcgi_index index.php;<br>        include fastcgi.conf;<br>    &#125;<br>    <br>    access_log  /www/wwwlogs/pic.uud.me.log;<br>    error_log  /www/wwwlogs/pic.uud.me.error.log;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>重点需要添加的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">location / &#123;<br>        index dashboard.php;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ index.php<span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>;<br>    &#125;<br><br>    location ~ \.php$ &#123;<br>        fastcgi_pass 127.0.0.1:9000;<br>        fastcgi_index index.php;<br>        include fastcgi.conf;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>这个步骤需要细心对比自行添加，添加完成后保存即可。</p>
<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><p>这一步比较关键，不过很简单。</p>
<p>在宝塔面板，你添加的站点的根目录的上级页面即<code>/www/wwwroot</code>，找到你的站点目录，点击右侧的  <code>权限</code>，将该文件夹的所有者更改为<code>www</code></p>
<p>之后就可以打开你的域名，如无意外即可使用</p>
<p>更详细的使用设置文档，可以参考作者的文档：<a href="https://www.xiebruce.top/17.html">https://www.xiebruce.top/17.html</a></p>
<h2 id="配置储存空间环境"><a href="#配置储存空间环境" class="headerlink" title="配置储存空间环境"></a>配置储存空间环境</h2><h3 id="配置空间参数"><a href="#配置空间参数" class="headerlink" title="配置空间参数"></a>配置空间参数</h3><p>这里建议参考作者给出的文档对各个需要配置的空间进行配置：<br><a href="https://www.xiebruce.top/117.html">PicUploader: 各图床获取上传图片参数的方法</a></p>
<h3 id="使用github作为空间的话，由于github的国内访问速度受限，raw链接经常无法正常访问故在此给出两个解决方案"><a href="#使用github作为空间的话，由于github的国内访问速度受限，raw链接经常无法正常访问故在此给出两个解决方案" class="headerlink" title="使用github作为空间的话，由于github的国内访问速度受限，raw链接经常无法正常访问故在此给出两个解决方案"></a>使用github作为空间的话，由于github的国内访问速度受限，raw链接经常无法正常访问故在此给出两个解决方案</h3><ul>
<li>方案一：开启github的pages服务，并在图床后台设置github的domain为<code>https://你的github名.github.io/你的仓库名</code>从而使用github pages的网络，这样比直接用github的raw是快上不少的。</li>
<li>方案二：使用cloudflare提供的workers服务搭建一个github下载加速工具：<a href="https://github.com/hunshcn/gh-proxy">gh-proxy</a></li>
</ul>
<h4 id="gh-proxy简介"><a href="#gh-proxy简介" class="headerlink" title="gh-proxy简介"></a>gh-proxy简介</h4><p>github release、archive以及项目文件的加速项目，支持clone，有Cloudflare Workers无服务器版本以及Python版本</p>
<h4 id="cf-worker版本部署"><a href="#cf-worker版本部署" class="headerlink" title="cf worker版本部署"></a>cf worker版本部署</h4><p>首页：<a href="https://workers.cloudflare.com/">https://workers.cloudflare.com</a></p>
<p>注册，登陆，<code>Start building</code>，取一个子域名，<code>Create a Worker</code>。</p>
<p>复制  <a href="https://cdn.jsdelivr.net/hunshcn/gh-proxy@master/index.js">index.js</a>  到左侧代码框，<code>Save and deploy</code>。如果正常，右侧应显示首页。</p>
<p><code>index.js</code>默认配置下clone走github.com.cnpmjs.org，项目文件会走jsDeliver，如需走worker，修改Config变量为0即可</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">const<span class="hljs-built_in"> Config </span>= &#123;<br>jsdelivr: 0,<br>cnpmjs: 0<br></code></pre></td></tr></table></figure>
<p><code>ASSET_URL</code>是静态资源的url（实际上就是现在显示出来的那个输入框单页面）</p>
<p><code>PREFIX</code>是前缀，默认（根路径情况为”/“），如果自定义路由为example.com/gh/*，请将PREFIX改为 ‘/gh/‘，注意，少一个杠都会错！</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>写到最后，在使用过程中发现了些问题，不知是何原因，使用时上传一些偏大的文件容易出现超时的错误，无法成功的上传，当然这里我使用的是github作为空间的可能会因此带来一些问题吧</p>
]]></content>
      <categories>
        <category>图床建设</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>定时备份mysql/mariadb数据库并上传至tgbot</title>
    <url>/2023/11/09/ding-shi-bei-fen-mysql-mariadb-shu-ju-ku-bing-shang-chuan-zhi-tgbot/</url>
    <content><![CDATA[<h1 id="前情提要："><a href="#前情提要：" class="headerlink" title="前情提要："></a>前情提要：</h1><p>前文<a href="https://blog.dmnb.cf/2023/03/21/li-yong-koyeb-mian-fei-zi-jian-bitwarden-fu-wu-duan/">利用koyeb免费自建bitwarden服务端</a>可知博主之前已经将bitwarden自建的vaultwarden服务端部署在koyeb,并利用db4free提供的免费数据库实现了数据的永久存储。虽说这样基本不会有什么问题了，但db4free毕竟是别人提供的在线数据库，为了以防万一其跑路或者删数据库，今天特地花时间构思了数据库备份的方法。<br>本文分为两节：</p>
<ul>
<li>基本构思</li>
<li>定时推送</li>
</ul>
<h2 id="基本构思"><a href="#基本构思" class="headerlink" title="基本构思"></a>基本构思</h2><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><p>想要备份mysql/mariadb的数据库，最方便的莫过于mariadb或mysql自带的mysqldump命令了，只需简单一行就可以将数据库备份到指定的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysqldump -h &lt;hostname&gt; -u &lt;username&gt; -p&lt;password&gt; &lt;database_name&gt; &gt; backup_`date <span class="hljs-string">&#x27;+%F&#x27;</span>`.sql<br><span class="hljs-comment">#&lt;hostname&gt;：数据库所在的域名，本地数据库为localhost,此处用的db4free的数据库所以填入db4free.net</span><br><span class="hljs-comment">#&lt;username&gt;：数据库的用户名</span><br><span class="hljs-comment">#&lt;password&gt;：显然是密码</span><br><span class="hljs-comment">#&lt;database_name&gt;：数据库的名称</span><br></code></pre></td></tr></table></figure>

<p>依次填入对应内容后即可备份你的数据库，为了方便记录和存档，这里在生成的备份文件的文件名处添加了<code>date +%F</code>来生成带日期的文件名。</p>
<h3 id="上传至tgbot"><a href="#上传至tgbot" class="headerlink" title="上传至tgbot"></a>上传至tgbot</h3><p>其实这里上传到什么地方都可以，你可以选择部署一个rclone将文件上传到你的onedrive、google drive、webdav等任何网盘去，也可以直接扔到github的releases去，但这里为了图方便（只需要一行就能解决它不香吗？），博主就直接选择了通过curl命令将文件上传给tgbot发送给自己。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -F document=@<span class="hljs-string">&quot;./backup_`date +%F`.sql&quot;</span> <span class="hljs-string">&#x27;https://api.telegram.org/bot&lt;bot_token&gt;/sendDocument?chat_id=&lt;chat_ID&gt;&#x27;</span><br><br><span class="hljs-comment">#&lt;bot_token&gt;：从BotFather处获取到的apibot的token</span><br><span class="hljs-comment">#&lt;chat_ID&gt;：你的telegramID可以从https://t.me/myidbot处使用/getid获取你的id</span><br></code></pre></td></tr></table></figure>

<p>使用上述命令就可以简单的将你的数据库备份文件上传到你的tgbot处，从而实现云端存储。</p>
<h2 id="定时推送"><a href="#定时推送" class="headerlink" title="定时推送"></a>定时推送</h2><h3 id="方案一：vps、机顶盒等"><a href="#方案一：vps、机顶盒等" class="headerlink" title="方案一：vps、机顶盒等"></a>方案一：vps、机顶盒等</h3><p>如果你有一台24小时在线的设备，那么你可以选择直接给上面两条命令写一个sh文件并通过crontab实现定时推送，如果你的设备在国内，可能还需要给<a href="https://api.telegram.org/">https://api.telegram.org</a>地址前面加一行反代如<code>https://r.zzy-ac.top/</code>从而实现在大陆网络环境下的上传。</p>
<h3 id="方案二：github-actions"><a href="#方案二：github-actions" class="headerlink" title="方案二：github actions"></a>方案二：github actions</h3><p>那么如果你就是纯粹的白嫖狗(比如我)，连bitwarden服务端都扔PaaS了，怎么可能还定时服务扔到自己VPS去？给我白嫖！</p>
<ol>
<li>创建一个github仓库，权限设为私人（Private）</li>
</ol>
<p><img src="https://img.m-l.cc/2024-08-12-66b9adfeb06ec.webp" alt="image-20231109195138845"></p>
<ol start="2">
<li>点击actions创建workflows文件</li>
</ol>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad2904dce.webp" alt="image-20231109195419519"></p>
<ol start="3">
<li>在yml文件中填入如下内容</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#自动bitwarden mysql数据库备份</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Auto</span> <span class="hljs-string">Api</span> <span class="hljs-string">Task</span><br><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">schedule:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span> <span class="hljs-string">&#x27;12 0 * * *&#x27;</span><br>  <span class="hljs-attr">watch:</span><br>    <span class="hljs-attr">types:</span> [<span class="hljs-string">started</span>]<br>   <br><span class="hljs-attr">jobs:</span><br>   <span class="hljs-attr">Task:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><span class="hljs-comment">#    if: github.event.repository.owner.id == github.event.sender.id  # 自己点的 start</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">MariaDB</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">update</span><br>        <span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-string">-y</span> <span class="hljs-string">mariadb-server</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">backup</span> <span class="hljs-string">and</span> <span class="hljs-string">upload</span> <span class="hljs-string">to</span> <span class="hljs-string">tgbot</span>  <span class="hljs-comment">#上传到tgbot</span><br><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span> <br>        <span class="hljs-string">mysqldump</span> <span class="hljs-string">-h</span> <span class="hljs-string">&lt;hostname&gt;</span> <span class="hljs-string">-u</span> <span class="hljs-string">&lt;username&gt;</span> <span class="hljs-string">-p&lt;password&gt;</span> <span class="hljs-string">&lt;database_name&gt;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">backup_`date</span> <span class="hljs-string">&#x27;+%F&#x27;</span><span class="hljs-string">`.sql</span><br>        <span class="hljs-string">curl</span> <span class="hljs-string">-F</span> <span class="hljs-string">document=@&quot;./backup_`date</span> <span class="hljs-string">+%F`.sql&quot;</span> <span class="hljs-string">&#x27;https://api.telegram.org/bot&lt;bot_token&gt;/sendDocument?chat_id=&lt;chat_ID&gt;&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Time</span> <span class="hljs-comment">#记录上传时间</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span> <br>        <span class="hljs-string">echo</span> <span class="hljs-string">`date</span> <span class="hljs-string">+&quot;%Y-%m-%d</span> <span class="hljs-string">%H:%M:%S&quot;`</span> <span class="hljs-string">begin</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">time.log</span><br></code></pre></td></tr></table></figure>

<p>保存之后你就可以白嫖github actions的定时服务自动备份数据库文件了。为了减少服务器压力，建议<code>- cron: &#39;0 0 * * *&#39;</code>此处的时间自主设定一个时间，避免大量排队带来的不好体验。</p>
<p>actions运行成功后将会把备份到的数据库文件发送到你的tgbot如下图：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae25e3a26.webp" alt="image-20231109200104152"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acaade0d5.webp" alt="image-20231109200125616"></p>
<p>至此，自动定时备份数据库的功能就实现完毕了，在需要还原数据库时可以使用db4free自带的phpMyAdmin将数据库备份文件导入，或通过命令导入。</p>
]]></content>
      <categories>
        <category>bitwarden</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>展笺难寄</title>
    <url>/2021/07/29/zhan-jian-nan-ji/</url>
    <content><![CDATA[<center>

<p>泼墨展笺寄相思，<br>提笔荒唐屡忘字。<br>欲使年少莫知忧，<br>何故凡愁扰恣肆。</p>
</center>

<center><a href="https://img.m-l.cc/2024-08-12-66b9c5a198219.webp" data-fancybox="images" data-caption="插图"><img src="https://img.m-l.cc/2024-08-12-66b9c5a198219.webp" width ="240"    /></a><center>

]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>忆江南•缓雨</title>
    <url>/2021/04/29/yi-jiang-nan-huan-yu/</url>
    <content><![CDATA[<center>

<p>莺啼月，<br>清雨敲重檐。<br>零落红衣夹泥沫，<br>阑斜无处倚横杆，<br>独自忆江南。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>思岳</title>
    <url>/2023/05/07/si-yue/</url>
    <content><![CDATA[<center>

<p>侵风伏细柳，入雨百花忧。<br>思来凭栏处，臣子恨将休。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad7bc551c.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad7bc551c.webp"></p>
</center>

]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>新始-三首</title>
    <url>/2021/02/20/xin-shi/</url>
    <content><![CDATA[<center>

<p>初雪若杨稍拂面，莫分南北恍作春。<br>仍忆洞庭湖岸柳，迎风轻扫绕心弦。</p>
<p>薄云若纱断凡穹，翻涌腾挪现蛟龙。<br>铁翼御风随心过，始皇未敢与君同。</p>
<p>晨来逐浪堰虹堤，柳芽若雾芦蒿挤。<br>扁舟一叶张弓望，去雁难寻人莫移。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>怨花鼓</title>
    <url>/2021/05/09/yuan-hua-gu/</url>
    <content><![CDATA[<center>

<p>胧月层云伏翼叱，<br>风吟伴柳叶难平。<br>巴陵射蟒逸闻掀，<br>落寞胶东花鼓泯。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>晚临抒怀</title>
    <url>/2021/09/18/wan-lin-shu-huai/</url>
    <content><![CDATA[<center>

<p>轻灯远浪缓云推，<br>寒蝉凄切晚风醉。<br>听涛忽觉心气短，<br>直作长歌把意追。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>昼难留</title>
    <url>/2021/05/20/zhou-nan-liu/</url>
    <content><![CDATA[<center>

<p>赤瓦高墙郁金黄，<br>轻波扰雀沙鸥攘。<br>苍云莫早遮去日，<br>且留残霞三两行。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>望浮山夜至</title>
    <url>/2021/04/15/wang-fu-shan-ye-zhi/</url>
    <content><![CDATA[<center>
望浮山夜至

<p>青山有路松烟密，暮日姗姗月影稀。<br>登峰欲采春桑去，笑待丹霄墨染低。</p>
</center>
]]></content>
  </entry>
  <entry>
    <title>晚安·冬至</title>
    <url>/2021/11/08/wan-an-dong-zhi/</url>
    <content><![CDATA[<center>

<p>杂风携雨道秋别，<br>胶东絮乱夜难歇。<br>路短归急何所欲，<br>烂柯有弈与周约。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>期樱</title>
    <url>/2021/03/01/qi-ying/</url>
    <content><![CDATA[<center>

<p>期樱<br>夜雨凄凄挽风残，<br>春蒿犹挤心未安。<br>候雁枯枝零落处，<br>方忆南湖青肤攒。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>桃花煞</title>
    <url>/2024/07/08/tao-hua-sha/</url>
    <content><![CDATA[<center>

<p>暮春重逢以为幸，</p>
<p>离人常见雨常清。</p>
<p>命里桃花劫数定，</p>
<p>尘缘了却可明心。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acd9ae9fb.webp" alt="https://img.m-l.cc/2024-08-12-66b9acd9ae9fb.webp"></p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一诗——自建api的调用</title>
    <url>/2021/04/04/mei-ri-yi-shi-zi-jian-api-de-diao-yong/</url>
    <content><![CDATA[<hr>
<p>一言——是一个在全网范围获得广泛应用的api,可以为我们提供一句随机的直戳心灵的话语。<br>而有时我们会需要创建一个类似一言这种形式的完全自定义内容的api该怎么办呢？<br>这样其实不难，我们可以很轻松的通过php实现我们想要的目的。<br>首先在网站根目录下创建一个文件夹文件名就是你希望访问的地址的路径名，在这里我使用<code>/poem</code>来表示<br>之后在文件夹内创建一个<code>index.php</code>文件，在其中写入如下内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 获取句子文件的绝对路径</span><br><span class="hljs-comment">// 如果你介意别人可能会拖走这个文本，可以把文件名自定义一下，或者通过Nginx禁止拉取也行。</span><br>$path = dirname(<span class="hljs-keyword">__FILE__</span>);<br>$file = file($path.<span class="hljs-string">&quot;/poem.txt&quot;</span>);<br> <br><span class="hljs-comment"># 随机读取一行</span><br>$arr  = mt_rand( <span class="hljs-number">0</span>, count( $file ) - <span class="hljs-number">1</span> );<br>$content  = trim($file[$arr]);<br> <br><span class="hljs-comment"># 编码判断，用于输出相应的响应头部编码</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;charset&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>($_GET[<span class="hljs-string">&#x27;charset&#x27;</span>])) &#123;<br>    $charset = $_GET[<span class="hljs-string">&#x27;charset&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (strcasecmp($charset,<span class="hljs-string">&quot;gbk&quot;</span>) == <span class="hljs-number">0</span> ) &#123;<br>        $content = mb_convert_encoding($content,<span class="hljs-string">&#x27;gbk&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    $charset = <span class="hljs-string">&#x27;utf-8&#x27;</span>;<br>&#125;<br>header(<span class="hljs-string">&quot;Content-Type: text/html; charset=<span class="hljs-subst">$charset</span>&quot;</span>);<br> <br><span class="hljs-comment"># 格式化判断，输出js或纯文本</span><br><span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">&#x27;format&#x27;</span>] === <span class="hljs-string">&#x27;js&#x27;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;function poem()&#123;document.write(&#x27;&quot;</span> . $content .<span class="hljs-string">&quot;&#x27;);&#125;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> $content;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>（其中的<code>poem</code>字样可以替换为你需要的名称，只需将对应的文件名称修改即可）<br>接着，在index.php同一目录下创建一个名为poem.txt的文本文件（如上文所述，可以替换为其他文件名，只需修改相应的参数即可）并将需要展示的语句逐行放进这个txt<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs code">爆竹声中一岁除，春风送暖入屠苏。<br>小楼一夜听春雨，深巷明朝卖杏花。<br>惆怅东栏一株雪，人生看得几清明。<br>更深月夜半人家，北斗阑干南斗斜<br>春水碧于天，画船听雨眠。<br>春风又绿江南岸，明月何时照我还。<br>等闲识得东风面，万紫千红总是春。<br><br>..........<br><br></code></pre></td></tr></table></figure>
<p>之后访问<a href="http://你的域名/poem/">http://你的域名/poem/</a>就可以查看api效果了</p>
<p>那么该如何将api调用到你需要的网站中呢？<br>只需在网站文件中你需要的地方添加如下代码，即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://你的域名/poem/?format=js&amp;charset=utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;poem&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>poem()<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>以上就是完整的自建类一言api并调用之的完整教程<br>欢迎使用博主的古诗词api</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://api.zzy-ac.top/poem/?format=js&amp;charset=utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;poem&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>poem()<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3>效果如下：</h3>
    <h4><font color="blue"><script type="text/javascript" src="https://api.zzy-ac.top/poem/?format=js&charset=utf-8"></script><div id="poem"><script>poem()</script></div></font></h4>


]]></content>
      <categories>
        <category>api</category>
      </categories>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>点墨反代服务</title>
    <url>/2021/10/13/dian-mo-fan-dai-fu-wu/</url>
    <content><![CDATA[<p><a href="https://r.dmnb.cf/">r.dmnb.cf</a>是我在 Cloudflare Worker 上搭建的反代服务,</p>
<p>主要用于下载用途，也可以代理git clone,</p>
<p><a href="https://gitlab.com/NickCao/experiments/-/blob/master/workers/r.js">源码</a>可以在这里获取到。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在需要访问的链接前加上<code><a href="https://r.dmnb.cf/">https://r.dmnb.cf/</a></code>,例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://r.dmnb.cf/https://github.com/ventoy/vtoyboot<br>wget https://r.dmnb.cf/https://fodi.zzy-ac.workers.dev/?file=/Other-Things/Duokan_for_Kindle/K4(xKindle_2015-05-15.36515.rtm).zip<br></code></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>江阁仲秋</title>
    <url>/2024/10/09/jiang-ge-zhong-qiu/</url>
    <content><![CDATA[<center>

<p>行于江阁畔，<br>翘首盼月圆。<br>匆匆三百里，<br>犹可共婵娟。</p>
<p><img src="https://img.m-l.cc/2024-10-09-6706208e964df.webp" alt="1000060141.webp"></p>
</center>

]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>用github_actions部署hexo</title>
    <url>/2021/07/06/yong-github-actions-bu-shu-hexo/</url>
    <content><![CDATA[<p>今天博主突发奇想决定用github_actions服务在线编辑并部署hexo，从而实现类似动态博客的后台的效果。<br>那么如何来进行部署呢？<br>首先，创建一个仓库例如<code>hexo-push</code>，新建文件夹<code>.github/workflows</code>在其中新建文件<code>main.yml</code><br>在文件中写入如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-18.04</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event.repository.owner.id</span> <span class="hljs-string">==</span> <span class="hljs-string">github.event.sender.id</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">source</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">hexo</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14.x&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">ACTION_DEPLOY_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>          <span class="hljs-string">chmod</span> <span class="hljs-number">700</span> <span class="hljs-string">~/.ssh</span><br>          <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>          <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;xxxxx@xxx.xx&quot;</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;xxxxxx&quot;</span><br>          <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-string">yarn</span> <span class="hljs-string">-g</span><br>          <span class="hljs-string">yarn</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br>          <span class="hljs-string">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure>
<p>接着，在hexo-push库的setting中添加HEXO_DEPLOY_KEY秘钥为你的本地私钥<br>之后，将hexo-push仓库，clone到你的本地<br>然后在你的hexo目录执行<code>hexo clean</code>清除不必要的文件<br>将除<code>.deploy_git、.git</code>之外的其他文件/文件夹复制到hexo-push的本地仓库并上传<br>然后就可以通过在hexo-push仓库中发布新的md文件来达到更新博客的目的了！</p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>用github_webhook将仓库自动pull到宝塔服务器</title>
    <url>/2021/07/06/yong-github-webhook-jiang-cang-ku-zi-dong-pull-dao-bao-ta-fu-wu-qi/</url>
    <content><![CDATA[<h1 id="宝塔webhook同步github仓库"><a href="#宝塔webhook同步github仓库" class="headerlink" title="宝塔webhook同步github仓库"></a>宝塔webhook同步github仓库</h1><p>  Git仓库有很多代码托管平台，Github、Gitee、Gitlab等等，本文使用Github配置webhook，将github资源同步推送至宝塔，其他git仓库操作大致相同。</p>
<h2 id="宝塔配置"><a href="#宝塔配置" class="headerlink" title="宝塔配置"></a>宝塔配置</h2><h3 id="webhook配置"><a href="#webhook配置" class="headerlink" title="webhook配置"></a>webhook配置</h3><p>宝塔面板安装webhook插件后，点击设置-添加hook，添加下面的脚本，只需要修改git地址，其他的不用改。<br><img src="https://img.m-l.cc/2024-08-12-66b9c83ca7b2c.webp" alt="1723451442718.webp"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">#输出当前时间</span><br>date --date=<span class="hljs-string">&#x27;0 days ago&#x27;</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start&quot;</span><br><span class="hljs-comment">#判断宝塔WebHook参数是否存在</span><br><span class="hljs-keyword">if</span> [ ! -n <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;param参数错误&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;End&quot;</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#git项目路径</span><br>gitPath=<span class="hljs-string">&quot;/www/wwwroot/<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-comment">#git 网址</span><br>gitHttp=<span class="hljs-string">&quot;https://github.com/xxxxx.git&quot;</span> <span class="hljs-comment">#只需要修改成仓库的git地址，其他地方默认不修改</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Web站点路径：<span class="hljs-variable">$gitPath</span>&quot;</span><br><br><span class="hljs-comment">#判断项目路径是否存在</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$gitPath</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">cd</span> <span class="hljs-variable">$gitPath</span><br>        <span class="hljs-comment">#判断是否存在git目录</span><br>        <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;.git&quot;</span> ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;在该目录下克隆 git&quot;</span><br>                sudo git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$gitHttp</span> gittemp<br>                sudo mv gittemp/.git .<br>                sudo rm -rf gittemp<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;拉取最新的项目文件&quot;</span><br>        sudo git reset --hard origin/master<br>        sudo git pull<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置目录权限&quot;</span><br>        sudo chown -R www:www <span class="hljs-variable">$gitPath</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;End&quot;</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;该项目路径不存在&quot;</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;新建项目目录&quot;</span><br>        mkdir <span class="hljs-variable">$gitPath</span><br>        <span class="hljs-built_in">cd</span> <span class="hljs-variable">$gitPath</span><br>        <span class="hljs-comment">#判断是否存在git目录</span><br>        <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;.git&quot;</span> ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;在该目录下克隆 git&quot;</span><br>                sudo git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$gitHttp</span> gittemp<br>                sudo mv gittemp/.git .<br>                sudo rm -rf gittemp<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;拉取最新的项目文件&quot;</span><br>        sudo git reset --hard origin/master<br>        sudo git pull<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置目录权限&quot;</span><br>        sudo chown -R www:www <span class="hljs-variable">$gitPath</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;End&quot;</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>

<p>保存后，点击查看密钥，如下：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">宝塔WebHook使用方法:<br>GET/POST:<br>http:<span class="hljs-comment">//服务器ip:端口/hook?access_key=HOOK密钥&amp;param=aaa</span><br>@param access_key <span class="hljs-keyword">string</span> HOOK密钥<br>@param param <span class="hljs-keyword">string</span> 自定义参数（在hook脚本中使用$1接收）<br></code></pre></td></tr></table></figure>

<h3 id="初始化git库"><a href="#初始化git库" class="headerlink" title="初始化git库"></a>初始化git库</h3><p>在宝塔中创建文件夹，在终端中打开路径并执行初始化如</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cd www<span class="hljs-regexp">/wwwroot/</span>blog<br>git init<br></code></pre></td></tr></table></figure>

<h3 id="SSH公钥"><a href="#SSH公钥" class="headerlink" title="SSH公钥"></a>SSH公钥</h3><p>如拉取的为私有库，则需配置密钥依次执行，复制生成的公钥（公开库可跳过）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cd ~<br>ssh-keygen -t rsa        <span class="hljs-comment">#一直回车</span><br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br></code></pre></td></tr></table></figure>

<h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><h3 id="webhook填入"><a href="#webhook填入" class="headerlink" title="webhook填入"></a>webhook填入</h3><p>点击宝塔webhook查看密钥，将相关信息粘贴至Github中，注意粘贴前把网址最后的aaa换成你的宝塔对应仓库的目录名<br>例如网站路径 wwwroot/blog，就把aaa替换成blog<br>如果不替换的话，会在你的服务器根目录创建一个aaa目录，你把站点目录修改为aaa目录，也可以。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9c86026ede.webp" alt="1723451483221.webp"></p>
<p>PayloadURl是http://服务器ip:端口/hook?access_key=HOOK密钥&amp;param=aaa内容类型选择json，secret就是webhook的一串密钥，复制过去粘贴，其他默认，保存提交。</p>
<h3 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h3><p><a href="https://github.com/settings/keys">https://github.com/settings/keys</a> 打开设置ssh页面，点击New SSH key添加标题和刚刚在宝塔生成并复制的公钥<br><img src="https://img.m-l.cc/2024-08-12-66b9c88e63d50.webp" alt="1723451528125.webp"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>提交git仓库更新，再看Webhook的日志，再检查目录下有没有文件就能看到是否同步成功了。</p>
]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>登岱</title>
    <url>/2022/06/15/deng-dai/</url>
    <content><![CDATA[<center>

<p>晨霞做纸云似墨，<br>岱宗岳顶浮岚梭。<br>彻晓终复登临意，<br>金轮欲绽曙影泼。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aeb2d67a7.webp" alt="五月十八岱顶日出图"></p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>白嫖bilibi图床</title>
    <url>/2021/11/27/bai-piao-bilibi-tu-chuang/</url>
    <content><![CDATA[<blockquote>
<p>本文目标：通过脚本上传图片到B站，并获得外链，以作为图床使用。<br>要求：</p>
<ol>
<li>在kde桌面环境中对图片文件支持右键上传并返回链接到剪贴板，并显示系统通知。</li>
<li>在typora中支持从剪贴板粘贴进编辑器自动使用图床</li>
</ol>
</blockquote>
<h1 id="一、获取并修改脚本"><a href="#一、获取并修改脚本" class="headerlink" title="一、获取并修改脚本"></a>一、获取并修改脚本</h1><p>某群友<a href="https://github.com/Brx86/">阿雅</a>已经为我们提供了功能完善的<a href="https://github.com/Brx86/bilibili-picpool">bilibili-picpool</a>脚本，该脚本实现了基本的在终端选择通过图片路径将图片上传到bilibili并输出对应的长、短链接的功能，并且实现了网页端图床的功能。我们只需将其克隆下来稍作修改即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git clong https://github.com/Brx86/bilibili-picpool.git<br></code></pre></td></tr></table></figure>

<h2 id="配置config-py"><a href="#配置config-py" class="headerlink" title="配置config.py"></a>配置config.py</h2><p>首先登录Bilibili，查看Cookie，找到<code>bili_jct</code>和<code>SESSDATA</code>（必要参数）并填入<code>config.py</code>的对应位置</p>
<p>我们找到其中的<code>uplouder.py</code>，将其复制并重命名为<code>uploader-url.py</code>并修改为如下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, requests<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> cookies<br><br><span class="hljs-comment"># 定义上传函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">image_upload</span>(<span class="hljs-params">file_path, arg</span>):</span><br>    <span class="hljs-comment"># api地址</span><br>    api_url = <span class="hljs-string">&quot;https://api.vc.bilibili.com/api/v1/drawImage/upload&quot;</span><br><br>    <span class="hljs-comment"># 打开图片文件</span><br>    <span class="hljs-keyword">with</span> open(file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        img_file = f.read()<br><br>    <span class="hljs-comment"># 设置post参数</span><br>    files = &#123;<span class="hljs-string">&quot;file_up&quot;</span>: (file_path, img_file)&#125;<br>    data = &#123;<br>        <span class="hljs-string">&quot;biz&quot;</span>: <span class="hljs-string">&quot;draw&quot;</span>,<br>        <span class="hljs-string">&quot;category&quot;</span>: <span class="hljs-string">&quot;daily&quot;</span>,<br>    &#125;<br>    headers = &#123;<br>        <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;https://t.bilibili.com&quot;</span>,<br>        <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://t.bilibili.com/&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0&quot;</span>,<br>    &#125;<br><br>    <span class="hljs-comment"># 向api发送post请求</span><br>    r = requests.post(<br>        api_url,<br>        files=files,<br>        data=data,<br>        headers=headers,<br>        cookies=cookies,<br>        timeout=<span class="hljs-number">300</span>,<br>    )<br><br>    <span class="hljs-comment"># 解析返回值，得到图片链接</span><br>    img_url = r.json()[<span class="hljs-string">&quot;data&quot;</span>][<span class="hljs-string">&quot;image_url&quot;</span>]<br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-number">0</span>:<br>        short_url = b23_link(img_url)<br>        <span class="hljs-comment"># 输出结果</span><br>        print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;short_url&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;url&quot;</span>: img_url, <span class="hljs-string">&quot;short_url&quot;</span>: short_url&#125;<br>    <span class="hljs-keyword">elif</span> arg == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> img_url<br>    <span class="hljs-keyword">elif</span> arg == <span class="hljs-number">2</span>:<br>        short_url = b23_link(img_url)<br>        <span class="hljs-keyword">return</span> short_url<br><br><br><span class="hljs-comment"># 定义b23短链函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">b23_link</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-comment"># api地址</span><br>    api_url = <span class="hljs-string">&quot;https://api.bilibili.com/x/share/click&quot;</span><br><br>    <span class="hljs-comment"># 设置post参数</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-number">10000</span>,<br>        <span class="hljs-string">&quot;buvid&quot;</span>: <span class="hljs-string">&quot;archlinux&quot;</span>,<br>        <span class="hljs-string">&quot;platform&quot;</span>: <span class="hljs-string">&quot;archlinux&quot;</span>,<br>        <span class="hljs-string">&quot;share_channel&quot;</span>: <span class="hljs-string">&quot;COPY&quot;</span>,<br>        <span class="hljs-string">&quot;share_id&quot;</span>: <span class="hljs-string">&quot;public.webview.0.0.pv&quot;</span>,<br>        <span class="hljs-string">&quot;share_mode&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;oid&quot;</span>: url,<br>    &#125;<br><br>    <span class="hljs-comment"># 请求api得到短链接</span><br>    r = requests.post(api_url, data=data)<br>    <span class="hljs-keyword">return</span> r.json()[<span class="hljs-string">&quot;data&quot;</span>][<span class="hljs-string">&quot;content&quot;</span>]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">if</span> len(os.sys.argv) == <span class="hljs-number">2</span>:<br>        file_name = os.sys.argv[<span class="hljs-number">1</span>]<br>        file_path = os.path.abspath(file_name)<br><span class="hljs-comment">#        print(&quot;图片上传中...&quot;)</span><br>        os.system(<span class="hljs-string">&#x27;notify-send -u normal &quot;上传成功&quot; -u low &quot;文件正在上传请稍候片刻&quot; -i markdown-editor-zzy-ac  -a bilibili-picpool&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&quot;格式有误！上传示例图片example.png...&quot;</span>)<br>        file_path = os.path.join(os.sys.path[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;example.png&quot;</span>)<br>    image_upload(file_path, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>



<h1 id="二、实现要求1：kde右键上传"><a href="#二、实现要求1：kde右键上传" class="headerlink" title="二、实现要求1：kde右键上传"></a>二、实现要求1：kde右键上传</h1><p>首先看效果：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b2253a655.gif" alt="upload"></p>
<h2 id="创建-desktop文件"><a href="#创建-desktop文件" class="headerlink" title="创建.desktop文件"></a>创建.desktop文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$HOME</span>/.<span class="hljs-built_in">local</span>/share/kservices5/<br>touch <span class="hljs-variable">$HOME</span>/.<span class="hljs-built_in">local</span>/share/kservices5/picuploader.desktop<br></code></pre></td></tr></table></figure>

<h2 id="填上这段内容"><a href="#填上这段内容" class="headerlink" title="填上这段内容"></a>填上这段内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[Desktop Entry]<br>Actions=bilibili-picpool;<br>MimeType=image/jpeg;image/png;image/gif;<br>Type=Service<br>X-KDE-Priority=TopLevel<br>X-KDE-ServiceTypes=KonqPopupMenu/Plugin<br>Icon=markdown-editor-zzy-ac<br><br>[Desktop Action bilibili-picpool]<br>Name=Upload with bilibili-picpool<br>Name[zh_CN]=使用bilibili-picpool上传<br>Icon=markdown-editor-zzy-ac<br>Exec=<span class="hljs-built_in">cd</span> /path/to/bilibili-picpool;python3 uploader-url.py %F | scopy<br></code></pre></td></tr></table></figure>

<p><strong>注: 这里的 scopy 是<a href="https://blog.zhullyb.top/">竹林子</a>创建的脚本，用以同时满足x11和wayland下的使用，如果你仅使用x11的话直接改成<code>xclip -selection clipboard</code>即可。</strong></p>
<p>MimeType指的是文件类型。在这份desktop中，我仅指定了png和jpg文件在右键时会弹出picuploader的上传菜单，如果你需要更多文件类型的MimeType，你可以参考下gwenview的desktop都写了哪些文件类型。</p>
<blockquote>
<p>MimeType=inode/directory;image/avif;image/gif;image/jpeg;image/png;image/bmp;image/x-eps;image/x-icns;image/x-ico;image/x-portable-bitmap;image/x-portable-graymap;image/x-portable-pixmap;image/x-xbitmap;image/x-xpixmap;image/tiff;image/x-psd;image/x-webp;image/webp;image/x-tga;application/x-krita;image/x-kde-raw;image/x-canon-cr2;image/x-canon-crw;image/x-kodak-dcr;image/x-adobe-dng;image/x-kodak-k25;image/x-kodak-kdc;image/x-minolta-mrw;image/x-nikon-nef;image/x-olympus-orf;image/x-pentax-pef;image/x-fuji-raf;image/x-panasonic-rw;image/x-sony-sr2;image/x-sony-srf;image/x-sigma-x3f;image/x-sony-arw;image/x-panasonic-rw2;</p>
</blockquote>
<h2 id="安装所需组件"><a href="#安装所需组件" class="headerlink" title="安装所需组件"></a>安装所需组件</h2><h3 id="通知提示"><a href="#通知提示" class="headerlink" title="通知提示"></a>通知提示</h3><p>弹出系统提示的功能依赖于<code>libnotify</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo pacman -S libnotify --needed<br></code></pre></td></tr></table></figure>

<h3 id="复制到粘贴板"><a href="#复制到粘贴板" class="headerlink" title="复制到粘贴板"></a>复制到粘贴板</h3><p>复制到粘贴版的功能在X11下依赖于<code>xclip</code> 而wayland下则 依赖于<code>wl-clipboard</code>因此我在此同时安装这两个工具并采用了上文所述的由竹林撰写的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo pacman -S xclip wl-clipboard --needed<br></code></pre></td></tr></table></figure>

<p>该脚本用于判断当前桌面环境使用X11还是wayland并自动选择对应的工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">/usr/bin/scopy<br>---<br><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$XDG_SESSION_TYPE</span>&quot;</span> = <span class="hljs-string">&quot;wayland&quot;</span> ]; <span class="hljs-keyword">then</span><br>  wl-copy<br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$XDG_SESSION_TYPE</span>&quot;</span> = <span class="hljs-string">&quot;x11&quot;</span> ]; <span class="hljs-keyword">then</span><br>  xclip -selection clipboard<br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ERROR! You are using <span class="hljs-variable">$XDG_SESSION_TYPE</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>

<p>为<code>/usr/bin/scopy</code>授予运行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo chmod 755 /usr/bin/scopy<br></code></pre></td></tr></table></figure>

<h2 id="启用该动作菜单"><a href="#启用该动作菜单" class="headerlink" title="启用该动作菜单"></a>启用该动作菜单</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">kbuildsycoca5<br></code></pre></td></tr></table></figure>

<h1 id="三、实现要求2：在typora中支持从剪贴板粘贴进编辑器自动使用图床"><a href="#三、实现要求2：在typora中支持从剪贴板粘贴进编辑器自动使用图床" class="headerlink" title="三、实现要求2：在typora中支持从剪贴板粘贴进编辑器自动使用图床"></a>三、实现要求2：在typora中支持从剪贴板粘贴进编辑器自动使用图床</h1><h2 id="先看效果："><a href="#先看效果：" class="headerlink" title="先看效果："></a>先看效果：</h2><p><img src="https://img.m-l.cc/2024-08-12-66b9b6a6598d6.gif" alt="Upload-From-Typora"></p>
<h2 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h2><p>如下图，在Typora的<code>偏好设置</code>→<code>图象</code>→<code>上传服务设定</code>里：<br><img src="https://img.m-l.cc/2024-08-12-66b9ac60542f9.webp" alt="image-20211127135023950"><br>上传服务选<code>Custom Command</code>，自定义命令请填入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /path/to/bilibili-picpool;python3 uploader-url.py <br></code></pre></td></tr></table></figure>

<p>其中<code>/path/to/bilibili-picpool</code>是脚本所在路径，如果你的路径不是这个，请修改成你自己的路径(即刚刚clone的仓库的为位置)。</p>
<h1 id="绕过B站防盗链"><a href="#绕过B站防盗链" class="headerlink" title="绕过B站防盗链"></a>绕过B站防盗链</h1><p>由于某些缘故，B站的的外链做了防盗链的措施，如果直接引用到自己网站上面就会出现无法成功加载的现象。</p>
<p>B站的防盗链，利用的是HTTP的Referer属性做判断。如果Referer是他白名单之外的网站，就会返回403。</p>
<p>这时候我们只需要在想办法在页面的<code>&lt;head&gt;</code>标签下添加一行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-referrer&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>就可以绕过B站的防盗链措施了。</p>
<h1 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h1><blockquote>
<p> 至此我们就实现了最开始的设想——</p>
<ol>
<li>可以右键上传图片到图床并获得链接到剪贴板</li>
<li>可以在typora中复制图片自动上传图床并填入markdown文件。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>图床建设</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>白嫖cf的r2储存桶与Lsky-Pro图床</title>
    <url>/2024/02/02/bai-piao-cf-de-r2-chu-cun-tong-yu-lsky-pro-tu-chuang/</url>
    <content><![CDATA[<blockquote>
<p>之前尝试过不少图床方案：smms、github+反代、知乎图床等等，但每种方案均有其自身的问题，如smms数据不在自己手中、github+反代速度玄学、知乎做图床相对麻烦且随时可能跑路。故而最近决定认真部署一个属于自己的、速度稳定些的图床。</p>
<p>经过几番查询后决定采用cf r2储存桶+lsky图床程序的形式来部署。主要原因有：</p>
<ol>
<li>r2储存桶拥有全球加速，且可以选择东亚节点，在大陆与非大陆地区均可以获得不错的访问速度。</li>
<li>lsky-pro图床支持多种储存策略（甚至包括alist的webdav都可以）哪怕有天r2用不了，也能及时更换到其它方案。</li>
<li>这俩都可以免费白嫖。</li>
</ol>
</blockquote>
<h1 id="注册R2储存桶"><a href="#注册R2储存桶" class="headerlink" title="注册R2储存桶"></a>注册R2储存桶</h1><p>CloudFlare R2 是 Cloudflare 公司推出的一款兼容 S3 API  的免费云存储服务，它允许用户在全球范围内的分布式网络上存储和检索数据。 这项服务的设计目标之一是提供低延迟、高吞吐量的存储体验，利用横跨 100  多国家中 275 个城市的内容交付网络来实现这一目标。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>CloudFlare 账号注册：<a href="https://link.juejin.cn/?target=https://www.cloudflare.com/" title="https://www.cloudflare.com/">www.cloudflare.com/</a></li>
<li>购买域名：选择一个合适的域名，并在 CloudFlare 上进行域名解析。</li>
<li>绑定信用卡（只用于验证)</li>
</ol>
<h2 id="创建储存桶"><a href="#创建储存桶" class="headerlink" title="创建储存桶"></a>创建储存桶</h2><p>在侧边菜单找到 <code>R2 服务</code>,然后点击<code>创建存储桶</code>，名称随意喜欢就好，地区选亚太地区即可</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b0021f8cf.webp" alt="https://img.m-l.cc/2024-08-12-66b9b0021f8cf.webp"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9add1e738e.webp" alt="https://img.m-l.cc/2024-08-12-66b9add1e738e.webp"></p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>刚创建好的桶虽然可以上传图片、文件之类的，但是默认不可通过公网访问。</p>
<p>虽然可以用cloudflare提供的二级域名访问，但是有一些频率速率方面的限制，而且.dev的域名也可能被大防火墙拦截，所以还是绑定自己域名更好一些。</p>
<p>再桶的设置里找到自定义域选项，添加自定义域名即可</p>
<p>打开你创建的储存桶，点击设置然后：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae7a1729b.webp" alt="https://img.m-l.cc/2024-08-12-66b9ae7a1729b.webp"></p>
<p>选择自定义域，并连接到你自己的域名，即可自定义图片的直链了。（其实不绑定域名的话也会提供一个R2.dev子域名给你，也能够正常使用，只不过这里的域名有些过于长了，不好记。）</p>
<h2 id="创建-R2-的-API-token"><a href="#创建-R2-的-API-token" class="headerlink" title="创建 R2 的 API token"></a>创建 R2 的 API token</h2><p>提示：<strong>api 令牌只会显示 1 次。需记录到本地备用。</strong></p>
<ul>
<li>在 R2 的控制台右侧 点击 <code>管理 R2 API 令牌</code> —&gt;<code>创建API令牌</code><strong>。</strong></li>
<li>权限选对象读和写都可</li>
<li>指定存储桶选择你刚创建的桶</li>
<li>TTL选永久。其他不变。</li>
</ul>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af1121cb2.webp" alt="https://img.m-l.cc/2024-08-12-66b9af1121cb2.webp"></p>
<h1 id="部署Lsky-pro图床"><a href="#部署Lsky-pro图床" class="headerlink" title="部署Lsky-pro图床"></a>部署Lsky-pro图床</h1><p>参考官方教程：<a href="https://docs.lsky.pro/docs/free/v2/">https://docs.lsky.pro/docs/free/v2</a></p>
<p>或使用docker部署的话参考docker教程：<a href="https://github.com/HalcyonAzure/lsky-pro-docker/blob/master/README.md">https://github.com/HalcyonAzure/lsky-pro-docker/blob/master/README.md</a></p>
<h2 id="Lsky-pro与R2对象存储对接"><a href="#Lsky-pro与R2对象存储对接" class="headerlink" title="Lsky-pro与R2对象存储对接"></a>Lsky-pro与R2对象存储对接</h2><p>直接看图吧：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad4b8e3ab.webp" alt="教程图片"></p>
<p>* 访问域名：如上图，此域名可以自己解析<strong>公开访问</strong>里的域名，也可以在<strong>域访问</strong>哪里添加绑定。</p>
<p>* URL 额外参数：可不写</p>
<p>* AccessKeyId：R2 访问密钥ID</p>
<p>* SecretAccessKey：R2 机密访问密钥</p>
<p>* 连接地址区域(region)：<code>auto</code>(自动最佳地区，<strong>推荐</strong>)，或者<code>us-east-1</code>(美区)</p>
<p>* 储存桶名称：之前创建储存桶时设置的储存桶名称</p>
<h2 id="我的备选储存方案"><a href="#我的备选储存方案" class="headerlink" title="我的备选储存方案"></a>我的备选储存方案</h2><p>出于多重方案多重保险的目的，我还添加了备用的储存方案，即使用alist提供的webdav来存储图片，alist是一款支持部署多重网盘解析直链的强大工具，利用alist的webdav服务，我们可以将图床存储到任何可能的网盘中，如：阿里云盘、onedrive、谷歌云盘、百度网盘甚至是可以提供无限图片存储空间的一刻相册。</p>
<p>在这里为了给有兴趣使用我的图床的其它用户提供服务并防止小小10G的免费R2被刷爆，我这里选择使用无限空间的一刻相册来部署。</p>
<p><a href="https://alist.nn.ci/zh/guide/">alist部署教程</a></p>
<p><a href="https://alist.nn.ci/zh/guide/drivers/baidu.photo.html">alist挂载一刻相册教程</a></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acf269bde.webp" alt="https://img.m-l.cc/2024-08-12-66b9acf269bde.webp"></p>
<p>如此这般我的备选lsky存储方案也部署好了。</p>
<p>之后只用简单配置一下用户组和默认的储存桶，就可以毫无顾忌的开放注册为网友提供服务了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>如果使用alist+网盘的储存方案时用到如<code>一刻相册</code>这样的国内网盘，那么为了放置被恶意上传色图、血腥图片等18禁内容，还应该打开lsky-pro的图片审核功能，识别到色图直接删除，避免风险。</p>
<p>如果希望体验一下我的图床的话，欢迎注册使用!：<a href="https://lsky.dmnb.cf/">lsky.dmnb.cf</a></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acfe16aab.webp" alt="https://img.m-l.cc/2024-08-12-66b9acfe16aab.webp"></p>
]]></content>
      <categories>
        <category>图床建设</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>离</title>
    <url>/2020/11/28/chi/</url>
    <content><![CDATA[<center>

<p>凛冬骤雨斜，枯木把琴压。<br>听曲弦忽断，有鲠北风杀。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>联想小新Pad_Plus刷MIUI_For_Pad全套攻略</title>
    <url>/2022/11/27/lian-xiang-xiao-xin-pad-plus-shua-miui-for-pad-quan-tao-gong-lue/</url>
    <content><![CDATA[<p>联想自20年起推出的小新系列平板，一度以极高的性价比和完善的品牌保障著称，各个型号均有其优势，但联想自研的ZUI系统属实令人困扰，各种奇奇怪怪的BUG令人无语至极，虽然总体来说使用体验还不错，但社会拒绝更好的体验呢？因此<a href="https://wpa.qq.com/msgrd?v=3&uin=2277216453&site=qq&menu=yes">@老大的小跟班</a>利用小米平板的底包制作了适配联想小新系列的MIUI_Fro_Pad包，并提供持续的维护。</p>
<p>本教程讲述了博主给自己联想小新Pad_Plus刷入MIUI的全过程，和使用体验。</p>
<h1 id="一、刷机过程"><a href="#一、刷机过程" class="headerlink" title="一、刷机过程"></a>一、刷机过程</h1><h2 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h2><p>自己想办法把要用的应用全都提取出来，把要保存的文件都提取出来，如果之前以及root了，那甚至可以直接把应用数据等也一起备份出来，直接用，博主之前没有root所以自己单独把apk全提取出来后把要用的文件复制出来了。</p>
<h2 id="解锁BL"><a href="#解锁BL" class="headerlink" title="解锁BL"></a>解锁BL</h2><h3 id="1-开启USB调试"><a href="#1-开启USB调试" class="headerlink" title="1.开启USB调试"></a>1.开启USB调试</h3><p>在平板设置里【关于本机】→【ZUI版本】（多点几下）→【开发者选项】→【USB调试】→【一律允许调试】</p>
<h3 id="2-获取解锁文件"><a href="#2-获取解锁文件" class="headerlink" title="2.获取解锁文件"></a>2.获取解锁文件</h3><p><del>先在ZUI解锁官网解锁，需要输入序列码（S/N）。获取序列码有三种方法：购买小新的盒子说明、平板背面贴的小字条、fastboot模式（如有遗漏，欢迎评论区补充）。提交申请后去邮箱查看，要是【收件箱】找不到就在垃【圾广告邮箱】里找</del></p>
<p>现在官网已经收回了自助获过程取解锁文件的权限，如今解锁平板需要自己发邮件给<a href="mailto:&#x68;&#x75;&#x63;&#x79;&#52;&#x40;&#108;&#101;&#110;&#111;&#118;&#111;&#46;&#x63;&#x6f;&#109;">&#x68;&#x75;&#x63;&#x79;&#52;&#x40;&#108;&#101;&#110;&#111;&#118;&#111;&#46;&#x63;&#x6f;&#109;</a>，写明详细需求包括解锁用途、设备序列号等，然后等待人工回复提供解锁文件。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b0692588f.webp" alt="image-20221127135505818"></p>
<p>获取解锁文件后，将解压出来的img文件重命名为sn.img后放入<code>联想解锁回锁工具</code>目录，运行<code>联想解锁.bat</code>脚本。</p>
<h2 id="9008刷入ZUI12-6线刷包"><a href="#9008刷入ZUI12-6线刷包" class="headerlink" title="9008刷入ZUI12.6线刷包"></a>9008刷入ZUI12.6线刷包</h2><p>大部分人反应直接从ZUI13刷到MIUI会因为System分区过小失败，因此先刷回ZUI12.6。</p>
<h3 id="1-安装QPST高通9008刷机工具（如果已经安装过软件可以不用重复安装，本次演示针对首次使用的童鞋）"><a href="#1-安装QPST高通9008刷机工具（如果已经安装过软件可以不用重复安装，本次演示针对首次使用的童鞋）" class="headerlink" title="1.安装QPST高通9008刷机工具（如果已经安装过软件可以不用重复安装，本次演示针对首次使用的童鞋）"></a>1.安装QPST高通9008刷机工具（如果已经安装过软件可以不用重复安装，本次演示针对首次使用的童鞋）</h3><p>①双击setup.exe安装升级工具，出现如图界面 点击Install（安装）；</p>
<p>②勾选“我已阅读并接受许可条款”，点击安装；<br>③安装过程，简单说就是一路选择 I Agree，点击NEXT，直到提示安装完成（installation complete）时，点击Close关闭安装界面。</p>
<h3 id="2-刷机-降级"><a href="#2-刷机-降级" class="headerlink" title="2.刷机/降级"></a>2.刷机/降级</h3><p>①点击“QFIL”打开升级工具；（Windows 7路径：开始菜单- 所有程序-QPST-QFIL，Windows 10路径：开始菜单→QPST→QFIL）<br>②进入“QFIL”的“Configuratiion”标签页的 “FireHoseConfiguration”，按如下红框部分进行配置，device type选择“UFS”,点击OK确认保存；</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae18d4c19.webp" alt="img"></p>
<p>③重新返回QFIL主界面，选择“Meta Build”；<br>④点击“Load Content“，找到解压后的固件包，选择“contents.xml”文件，点击“打开”；</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae1244ae9.webp" alt="img">过程</p>
<p>⑤平板关机，按住音量上键（只需要按住音量上键，别和别的按键凑数同时按），USB数据线插入手机，然后放开音量键，大概等待2s左右，QFIL软件自动识别到9008端口，这个时候才可以点击“Download Content”， 开始刷写固件，然后蓝色进度条开始走动。 （请注意操作方式，如果没有进入9008端口，就刷不了机）</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aca2a386a.webp" alt="img"></p>
<p>(注意：如果QFIL工具提示 please select an existing port，请点击右上角select a port，勾选9008点击OK）</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae0b2685c.webp" alt="img"></p>
<p>⑥升级成功后提示“Download Succeed”，此时可以看到蓝色进度条走完。<br>此时平板自行重启，待重启好了之后，平板已经降级成功！</p>
<h2 id="刷入第三方TWRP"><a href="#刷入第三方TWRP" class="headerlink" title="刷入第三方TWRP"></a>刷入第三方TWRP</h2><p>其实官方rec也可以刷，不过用上第三方的后续备份、root之类的更方便。</p>
<p>解压<code>联想小新PadPlus-twrp.zip</code>文件，运行<code>残芯专用TWRPRecovery刷入工具Win版V2.1.exe</code>将目录下的<code>联想小新PadPlus-twrp3.6.0-11_0-recovery-自动解密-21.12.15-残芯专用工具刷入.img</code>刷入即可。</p>
<h2 id="刷入MIUI"><a href="#刷入MIUI" class="headerlink" title="刷入MIUI"></a>刷入MIUI</h2><p>下载MIUI的刷机包，解压后找到对应型号的bat脚本，运行它，跟着一步步走就好了，基本只需要回车。（当然你也可以读完脚本之后自己手动一步步来）</p>
<ol>
<li>手机关机进入第三方twrp,点重启，重启至fastbootd，，，大概这样子</li>
</ol>
<p><img src="https://img.m-l.cc/2024-08-12-66b9afec38957.webp" alt="image-20221127142332627"></p>
<ol start="2">
<li>点开一键刷入MIUI13.bat(一共三个bat文件，请点开对应机型的bat文件)</li>
</ol>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ac72b1ee3.webp" alt="image-20221127142343138"></p>
<ol start="3">
<li><p>按着bat上的提示按回车键，完成一个按一下。如果没反应请检查驱动</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af93cd142.webp" alt="image-20221127142357068"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acc30f2ea.webp" alt="image-20221127142424793"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aeddcd8a6.webp" alt="image-20221127142431348"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9afd665133.webp" alt="image-20221127142437041"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b098cc2e2.webp" alt="image-20221127142443323"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af51f04c2.webp" alt="image-20221127142451106"></p>
</li>
<li><p>bat执行完成后手机将自动进入twrp<br>过程</p>
</li>
<li><p>清除，格式化data，然后点返回，然后点重启（已经是MIUI的，在后续版本维护时不需要格式化data）</p>
</li>
<li><p>开机进开机向导不要连接WiFi！！！有跳过就点跳过即可成功进入系统。</p>
</li>
</ol>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>至此MIUI就刷入完成，总体来说并不复杂，接下来讲讲使用体验。</p>
<h1 id="二、使用体验"><a href="#二、使用体验" class="headerlink" title="二、使用体验"></a>二、使用体验</h1><h2 id="免费版"><a href="#免费版" class="headerlink" title="免费版"></a>免费版</h2><p>免费版的固件是用最后一个开发版的MIUI做的，目前几天用下来的感觉是BUG不少。</p>
<ol>
<li>蓝牙音量锁死最大无法调节</li>
<li>会经常性黑屏，失灵，无法操作</li>
<li>部分应用无法自适应深色模式</li>
<li>默认情况下dpi设置有问题，图标排布会乱，要自己手动改成700才行</li>
<li>没法使用杜比音效</li>
<li>没法启用护眼模式</li>
<li>等等</li>
</ol>
<p>排除上诉这些bug的因素的话，免费版的系统还是很够用的，MIUI的智慧分屏、对微信hd的适配、与小米手机间的妙享和应用流转、文件互联等等都非常方便，MIUI的动画也相对舒适。</p>
<h2 id="付费版"><a href="#付费版" class="headerlink" title="付费版"></a>付费版</h2><p>付费版的固件是用稳定版的MIUI制作，总体来说和免费版没太大差别，只是修复了上述的bug,让MIUI系统在联想小新Pad_Plus上的体验几乎达到了与小米平板本身同等层次的水准。</p>
<p>不过目前付费版的第四版在我的实际体验中，维护者宣称已经修复了的上述BUG-6依然存在，不过我一般也用不到，所以无所谓了。</p>
<p>上述提到的需要用到除付费版固件之外的文件目前已经上传到网盘：</p>
<p><a href="https://cloud.189.cn/web/share?code=VzUBVnUfaUnq">https://cloud.189.cn/web/share?code=VzUBVnUfaUnq</a></p>
<p>（访问码：3uce）</p>
<p>免费版第八版的固件直接使用作者发布的123网盘：</p>
<p><a href="https://www.123pan.com/s/Y2iRVv-GaYX">https://www.123pan.com/s/Y2iRVv-GaYX</a></p>
<p>（提取码:6666）</p>
<p>需要付费版固件的可以自己从酷安等地方联系开发者，给他们捐赠6.66进群获取。（虽然博主不太赞成这种行为，但是也尊重开发者的选择，毕竟不是所有人都可以为爱发电）</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>联通电信免流计划</title>
    <url>/2021/11/01/lian-tong-dian-xin-mian-liu-ji-hua/</url>
    <content><![CDATA[<blockquote>
<p>众所周知，联通对于自家旗下的诸多娱乐app以及自家所属的全部各种app都是可以实现对联通卡免流量的。<br>利用这一原则我们可以通过搭建代理节点的方式，使我们的全部流量使用都经过联通的免流渠道，从而实现免流的目的</p>
</blockquote>
<h2 id="所需材料"><a href="#所需材料" class="headerlink" title="所需材料"></a>所需材料</h2><ul>
<li>一个服务器（最好带宽大一点，不然你用着也会很慢）</li>
<li>一个一键搭建v2ray节点的：<a href="https://v2raytech.com/centos-one-click-install-v2ray/">脚本</a></li>
<li>找到一个合适的：<a href="https://www.qtyunblog.com/index.php/2021/08/21/%e4%b8%89%e7%bd%91%e5%85%a8%e5%9b%bd%e5%85%8d%e6%b5%81%e6%b7%b7%e6%b7%86%e5%8f%82%e8%80%83/">伪装域名</a></li>
</ul>
<h2 id="搭建v2ray节点"><a href="#搭建v2ray节点" class="headerlink" title="搭建v2ray节点"></a>搭建v2ray节点</h2><p>首先跟着上述给出的教程在自己的服务器/vps搭建一个v2ray节点。请注意在设置节点的端口时要将端口设为80或443。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">加密方式：auto<br>传输协议：ws<br>伪装类型：不选择<br>伪装域名：shoutingtoutiao3.10010.com <span class="hljs-comment">#从上述教程中给出的域名中选择一个使用</span><br></code></pre></td></tr></table></figure>
<h2 id="使用节点进行免流"><a href="#使用节点进行免流" class="headerlink" title="使用节点进行免流"></a>使用节点进行免流</h2><p>按照上述配置配置好你的节点后，用手机V2rayNG或Clash等软件链接上所选择的节点，配置中预定义规则选择全局。</p>
<center>
<a target="_blank" rel="noopener" href="https://img.m-l.cc/2024-08-12-66b9bf49164d8.webp" data-fancybox="images" data-caption="插图"><img src="https://img.m-l.cc/2024-08-12-66b9bf49164d8.webp" /></a>
</center>

<p>然后在手机的移动网络设置中将<code>网络接入点名称(APN)</code>的<code>APN协议</code>和<code>APN漫游协议</code>由<code>IPv4/IPv6</code>修改为<code>IPv4</code></p>
<center>
<a target="_blank" rel="noopener" href="https://img.m-l.cc/2024-08-12-66b9bf630f445.webp" data-fancybox="images" data-caption="插图"><img src="https://img.m-l.cc/2024-08-12-66b9bf630f445.webp" /></a>
</center>

<p>之后随意的使用一下流量(别太少了，稍微用个几十上百兆，刷刷抖音啥的)然后在中国联通APP中查看流量是否直接走的免流通道。</p>
<center>
<a target="_blank" rel="noopener" href="https://img.m-l.cc/2024-08-12-66b9bfcba8bcd.webp" data-fancybox="images" data-caption="Screenshot_20211101225318.png"><img src="https://img.m-l.cc/2024-08-12-66b9bfcba8bcd.webp" /></a>
</center>
如果付费流量没有增加或免费流量增加了，就完表示成了免流节点的搭建。

<p>当然也有一些机场直接大量提供这样的免流节点，他们的特点是低价、高带宽、方便、省事。通常可以用极低的价格实现符合条件的免流节点，同时这些节点通常还提供科学上网的服务。<br>在这里推荐一下楼主自己在用的这个：<a href="https://www.qtycloud.xyz/auth/register?code=Lm02">QTY</a> 最低0.5元/月起就可以享受低价的免流和科学上网服务了。</p>
]]></content>
      <categories>
        <category>免流量</category>
      </categories>
      <tags>
        <tag>手机折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>胶州怀古</title>
    <url>/2021/04/21/xiao-zhou-huai-gu/</url>
    <content><![CDATA[<center>

<p>四月胶澳声声雨，泠叶横削柳条屈。<br>巨野犹耻当年契，即墨嚣嚣闹影徐。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云安装archlinux并通过docker运行宝塔面板</title>
    <url>/2021/11/14/teng-xun-yun-an-zhuang-archlinux-bing-tong-guo-docker-yun-xing-bao-ta-mian-ban/</url>
    <content><![CDATA[<h1 id="一、archlinux系统安装"><a href="#一、archlinux系统安装" class="headerlink" title="一、archlinux系统安装"></a>一、archlinux系统安装</h1><blockquote>
<p>鉴于日常使用过程中对archlinux的习惯与依赖，一个熟悉的生产环境对于个人服务器就显得日益重要起来。然而大多数国内的主机服务商并不提供archlinux的服务器镜像，也不提供自定义镜像的服务，这无疑给人带来困扰。因此在这里提供一个将服务器转化为archlinux系统的教程。</p>
</blockquote>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，你得有一个linux系统的服务器，如centos/debian/ubuntu等。<br>其次，你需要一个能访问github的网络（最好）<br>之后，你的服务器上至少要安装有<code>curl</code> 和<code>wget</code>两个基础的应用。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>大概鉴于类似的需求，早已有大佬(肥猫老哥牛批！！！！)在github上上传了<a href="https://github.com/felixonmars/vps2arch">vps2arch</a>脚本。通过这款脚本我们可以傻瓜式安全的在我们的服务器上安装archlinux系统<br><img src="https://img.m-l.cc/2024-08-12-66b9b036d3f12.webp" alt="Screenshot_20211114232846.png"><br>你只需要按照肥猫大佬在README.md中写到的那样在你的服务器中输入三行指令：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>felixc.at/vps2arch<br>chmod +x vps2arch<br>./vps2arch<br></code></pre></td></tr></table></figure>
<p>然后静静的等待收获一个archlinux操作系统的服务器就好了。</p>
<p>此时_Arch Linux_已安装，但尚未配置。该脚本将提供一个支持 SSH 的系统，自动配置 grub（或 syslinux）、网络并从原始系统恢复 root 密码（如果没有设置 root 密码，则使用<code>vps2arch</code>作为密码）。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在安装完archlinux系统之后我们可以对其进行一些简单的配置如修改一下镜像源地址、装一下sudo、nano、vim、curl、wget之类的常用软件。</p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>至此我们就顺利收获了一个archlinux系统的vps。</p>
<h1 id="二、使用docker配置一个宝塔面板环境。"><a href="#二、使用docker配置一个宝塔面板环境。" class="headerlink" title="二、使用docker配置一个宝塔面板环境。"></a>二、使用docker配置一个宝塔面板环境。</h1><blockquote>
<p>由于本人之前使用服务器时是在debian10的系统环境下借助宝塔面板来操作的。因此出于习惯(偷懒)本人没有尝试直接用ngnix或其他web服务软件来部署网站，而是希望继续使用宝塔面板。</p>
</blockquote>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>一个能使用宝塔面板的docker</li>
<li>能成功在宝塔面板上部署网页并通过端口映射到宿主机从而实现外部访问。</li>
</ul>
<h2 id="可选的方案"><a href="#可选的方案" class="headerlink" title="可选的方案"></a>可选的方案</h2><ul>
<li>直接在docker hub上找一个装好了宝塔面板的镜像来安装就完事了。（方便、省事，不过大多数是centos环境，令本人十分不适，且部署python环境之类的很多时候都需要手动编译，费时费力）</li>
<li>老老实实装一个最简安装的debian/ubuntu,然后用宝塔官方提供的脚本一键安装宝塔面板（可能稍微多几个步骤，而且装出来的面板配置一些端口比较麻烦，但是装好后很舒适（毕竟之前服务器就用的debian））</li>
</ul>
<h2 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h2><p>ssh 进入已经装好的archlinux服务器<br>使用指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一步 通过pacman安装docker  </span><br>sudo pacman -Sy docker --needed --noconfirm<br><span class="hljs-comment"># 第二步 用systemctl将docker服务设置为开机启动  </span><br>sudo systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment"># 第三步 用systemctl启动docker服务  </span><br>sudo systemctl start docker  <br><span class="hljs-comment"># 第三步 将本地用户加入docker用户主  </span><br>sudo gpasswd -a <span class="hljs-variable">$&#123;USER&#125;</span> docker<br></code></pre></td></tr></table></figure>

<p>来安装并简单配置好docker的环境。之后使用<code>docker info</code>  来测试是否已经成功安装好docker<br>以下在虚拟机下的输出结果，部分信息隐藏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Client:<br>Debug Mode: <span class="hljs-literal">false</span><br><br><br><br>Server:<br>Containers: 0<br>Running: 0<br>Paused: 0<br>Stopped: 0<br>Images: 0<br>Server Version: 19.03.13-ce<br>Storage Driver: overlay2<br>Backing Filesystem: extfs<br>Supports d_type: <span class="hljs-literal">true</span><br>Native Overlay Diff: <span class="hljs-literal">false</span><br>Logging Driver: json-file<br>Cgroup Driver: cgroupfs<br>Plugins:<br>Volume: <span class="hljs-built_in">local</span><br>Network: bridge host ipvlan macvlan null overlay<br>Log: awslogs fluentd gcplogs gelf journald json-file <span class="hljs-built_in">local</span> logentries splunk syslog<br>Swarm: inactive<br>Runtimes: runc<br>Default Runtime: runc<br>Init Binary: docker-init<br>containerd version: xxxxxx<br>runc version: xxxxx<br>init version: xxxx<br>Security Options:<br>seccomp<br>Profile: default<br>Kernel Version: 5.9.1-arch1-1<br>Operating System: Arch Linux<br>OSType: linux<br>Architecture: x86_64<br>CPUs: 4<br>Total Memory: 3.812GiB<br>Name: archlinux<br>ID: xxxxxxxx<br>Docker Root Dir: /var/lib/docker<br>Debug Mode: <span class="hljs-literal">false</span><br>Registry: https://index.docker.io/v1/<br>Labels:<br>Experimental: <span class="hljs-literal">false</span><br>Insecure Registries:<br>127.0.0.0/8<br>Live Restore Enabled: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<p>重新登入來套用新权限，或者你可以用这个指令让现在的使用者阶段套用新群组：<br><code>newgrp docker</code></p>
<h2 id="安装docker镜像"><a href="#安装docker镜像" class="headerlink" title="安装docker镜像"></a>安装docker镜像</h2><h3 id="使用基于centos创建的自带完善的宝塔环境的docker镜像。"><a href="#使用基于centos创建的自带完善的宝塔环境的docker镜像。" class="headerlink" title="使用基于centos创建的自带完善的宝塔环境的docker镜像。"></a>使用基于centos创建的自带完善的宝塔环境的docker<a href="https://hub.docker.com/r/pch18/baota">镜像</a>。</h3><p>具体操作参考该作者的介绍，遇到的问题可以先参考一下issus中给出的解决方案。<br><img src="https://img.m-l.cc/2024-08-12-66b9af57dc9f3.webp" alt="Screenshot_20211115000039.png"></p>
<h3 id="使用官方的debian最简镜像来手动安装宝塔满版"><a href="#使用官方的debian最简镜像来手动安装宝塔满版" class="headerlink" title="使用官方的debian最简镜像来手动安装宝塔满版"></a>使用官方的debian最简镜像来手动安装宝塔满版</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker run -tid --name baota --net=host --privileged=<span class="hljs-literal">true</span> --shm-size=1g --restart always -v ~/wwwroot:/www/wwwroot debian<br></code></pre></td></tr></table></figure>

<p>在这里我们使用docker的HOST模式来运行docker镜像，这样,不需要设置映射端口,自动映射宝塔面板全端口到外网正常的bridge模式可能会造成网站后台不能获取用户真实ip地址。</p>
<p>随后使用宝塔<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">官网的一键安装脚本</a>来安装面板</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad761adf5.webp" alt="Screenshot_20211115000209.png"></p>
<h3 id="注意，这样安装的宝塔面板需要在debian的docker中手动配置好ssh服务的端口不然无法在面板中直接使用终端。"><a href="#注意，这样安装的宝塔面板需要在debian的docker中手动配置好ssh服务的端口不然无法在面板中直接使用终端。" class="headerlink" title="注意，这样安装的宝塔面板需要在debian的docker中手动配置好ssh服务的端口不然无法在面板中直接使用终端。"></a>注意，这样安装的宝塔面板需要在debian的docker中手动配置好ssh服务的端口不然无法在面板中直接使用终端。</h3><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>文至于此，安装一个带有宝塔面板的archlinux服务器的工作就基本完成了，剩下的无非是照常的部署网页、配置定时任务之类的。虽然文章不长，总体的过程看起来也比较简单、清晰，但却实实在在耗费了点墨近一整天的时间（这个点墨就是逊了啦）。最后总结出这篇简单的教程，希望可以帮到看到本文的有缘人（其实就是做个笔记怕自己忘了，万一下回崩掉了也好恢复不是～～～）</p>
]]></content>
      <categories>
        <category>archlinux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>茶思</title>
    <url>/2021/07/10/cha-si/</url>
    <content><![CDATA[<center>

<p>倾探云声招风色，<br>夜予滇红绕齿舌。<br>青丝染露惊天晓，<br>缘散幽思久成奢。</p>
</center>

<center><a href="https://img.m-l.cc/2024-08-12-66b9c5e56a4b3.webp" data-fancybox="images" data-caption="插图"><img src="https://img.m-l.cc/2024-08-12-66b9c5e56a4b3.webp" width ="240"   /></a></center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>观《骨癌纪录片——LOVE LIFE》有感</title>
    <url>/2021/06/08/guan-gu-yan-ji-lu-pian-love-life-you-gan/</url>
    <content><![CDATA[<h3 id="观《骨癌纪录片——LOVE-LIFE》有感"><a href="#观《骨癌纪录片——LOVE-LIFE》有感" class="headerlink" title=" 观《骨癌纪录片——LOVE LIFE》有感"></a><center> 观《骨癌纪录片——LOVE LIFE》有感</center></h3><p>　　这段时间的特殊儿童教育学习以来，在老师的指导下，我们观看了许多特殊的影视资料。毫无疑问，这些资料都给我带来了沉重的影响，失去视力却仍然用自己方式热爱人生的盲人推拿师；被惊人体重困扰着却仍然坚强生活的超重症患者；还有今天这一部分三集播出的《LOVE LIFE》。</p>
<p>　　“LOVE LIFE”——即热爱生命，如题，这是一部讲述生命的纪录片。该片有范范黑人拍摄，记录了三位孩子之间的真实故事。它记录了三位患有骨癌的孩子，在死神镰刀面前，从恐惧到坦然，再到勇敢与感恩的过程。</p>
<p>　　三位可爱的女孩：家彣、DORA和奕华。用自己的坚强，给予每个健康的人们最真挚的感动。“如果生命可以交换的话，你愿意跟我换吗？”“请你帮我们好好活着，好吗？”一句句直击人心的词句，仿佛是在劝说着身在福中不自知的我们。</p>
<p>　　她们曾经也有过简单而又充实的生活，热爱生活的家彣、花式滑冰冠军奕华、热爱音乐的大提琴手DORA。在面临突如其来的骨癌，他们没有被可怕的压力击倒，而是在坚强的同时用自己的乐观感染更多有人，给有着同样情况的各地病友，带来鼓励。</p>
<p>　　对于这样的特殊群体，人们往往会不由自主的感到怜惜，但这样怜悯的不一定合时宜的“关怀”，却有可能给孩子们带来巨大的影响。影片中的三位女孩，即使走到了生命的最后时刻，即使每天都要承受巨大的痛苦，但她们却能在家人的和社会各界的支持下，在自己的坚持中，收获到足够的坚强，笑着面对病魔的侵扰。</p>
<p>　　人在面临重大的压力时，往往倾向于将希望寄托在某些存在上，有人选择相信命运，有人选择相信科学，有人相信情感，而DORA一家，似乎选择信仰上帝。宗教的存在似乎总让人们不自觉的去信仰，一个唯一的、主宰了一切的、无所不能的神，这样的存在如果真的存在，那该有多好，也许可以不用离开，也许可以长久相聚，也许，也许……</p>
<p>　　信仰给人带来的力量可能是盲目而强大的，在信仰的支持下，DORA用散播乐观的态度，为自己迎来的救赎。至少在纪录片中，可以展现出似乎发自内心的真挚的乐观。</p>
]]></content>
      <categories>
        <category>观后感</category>
      </categories>
      <tags>
        <tag>观后感</tag>
      </tags>
  </entry>
  <entry>
    <title>观巷尾日落</title>
    <url>/2021/12/15/guan-xiang-wei-ri-luo/</url>
    <content><![CDATA[<center>

<p>日落西南金光散，<br>枯枝抖擞北风寒。<br>云梦渔歌映江月，<br>黄梁枕面泪雨沾。</p>
</center>]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>螺丝岛晨踱</title>
    <url>/2022/04/14/luo-si-dao-chen-duo/</url>
    <content><![CDATA[<center>

<p>仙氤笼雀湖光泄，<br>一尾扁舟钓叟歇。<br>迷途满目琼林远，<br>廿载青葱梦未绝。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad6ab0a47.webp" alt="王家河晨雾"></p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌大模型AI—Gemini白嫖api攻略</title>
    <url>/2024/03/01/gu-ge-da-mo-xing-ai-gemini-bai-piao-api-gong-lue/</url>
    <content><![CDATA[<blockquote>
<p>近日一直在寻找一款稳定靠谱用着踏实的大模型ai自建方案，openai的api需要收费，用token则非常不稳定；使用azure提供的openai的api很快、稳定，但需要收费。最近突然发现谷歌新出的gemini大模型ai,其功能基本对标chatgpt,使用体验上也区别不大，但是，谷歌提供了每分钟60条的免费api套餐，很是划算！于是采取gemini的api结合广受好评的chatgpt-next-web项目提供的网页，自建专属的免费智能AI！</p>
</blockquote>
<h1 id="申请Gemini的api"><a href="#申请Gemini的api" class="headerlink" title="申请Gemini的api"></a>申请Gemini的api</h1><p><strong>打开谷歌开放平台：</strong></p>
<p><a href="https://ai.google.dev/pricing">https://ai.google.dev/pricing</a></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9b0634679b.webp" alt="谷歌开放平台"></p>
<p>往下拉可以看到2个版本的API。</p>
<p>选择左边的免费版。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aef115743.webp" alt="选择左边的免费版"></p>
<p>登录@<a href="https://gmail.com/">gmail.com</a>邮箱。(需要自行寻找合适的节点进行科学上网)</p>
<p>之后同意下图所示的第一个协议（二三个复选框是允许推广，可选可不选）</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9adc21d198.webp" alt="同意协议"></p>
<p>在这个界面选择第二项。</p>
<p>获取API秘钥</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad3513373.webp" alt="获取API秘钥"></p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad9844476.webp"></p>
<p>这里会生成一个API的秘钥，</p>
<p>复制记录一下。保存好。</p>
<p>没有保存，就需要重新生成了。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9aef61bf3f.webp"></p>
<p>OK 这样我们的免费API就申请好了。</p>
<p>（注：本节为了省事和避免重复造轮子，引用了<a href="https://zhuanlan.zhihu.com/p/673300213">李飞笔记</a>的部分内容和图片）</p>
<h1 id="创建chatgpt-next-web"><a href="#创建chatgpt-next-web" class="headerlink" title="创建chatgpt-next-web"></a>创建chatgpt-next-web</h1><p>具体教程参考作者<a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web/blob/main/README_CN.md">README.md</a></p>
<p>在此我采用的作者提供的Vercel方案。</p>
<h2 id="改环境变量"><a href="#改环境变量" class="headerlink" title="改环境变量"></a>改环境变量</h2><p>在按照教程搭建好chatgpt-next-web后，进入项目设置的环境变量部分：</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ad0f3c075.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad0f3c075.webp"></p>
<p>删除多余的环境变量（如，没有openai的token你就删掉它。）</p>
<p>保留如下三项：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CUSTOM_MODELS</span>=-all,+gemini-pro <span class="hljs-comment"># 只保留gemini-pro一个ai选项，避免默认选项导致需要手动选择。</span><br><span class="hljs-attr">CODE</span>=&lt;passwd&gt; <span class="hljs-comment"># 这里填入你想设置的任何密码就好</span><br><span class="hljs-attr">GOOGLE_API_KEY</span>=&lt;apikey&gt;  <span class="hljs-comment"># 这里填入你刚刚申请到的gemini的api-key</span><br></code></pre></td></tr></table></figure>

<p>然后点击项目的<code>deployments</code>按钮，创建新的部署</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9af5d369bc.webp" alt="https://img.m-l.cc/2024-08-12-66b9af5d369bc.webp"></p>
<p>等待部署完毕后，你的私人大模型ai就创建成功了，开始享用你的ai吧！</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9acc919b84.webp" alt="https://img.m-l.cc/2024-08-12-66b9acc919b84.webp"></p>
<h1 id="完毕"><a href="#完毕" class="headerlink" title="完毕"></a>完毕</h1><p>打开你的vercel.app链接开始享用你的ai</p>
<p>如果vercel.app被墙了，请自行解析一个自定义域名用于访问你的ai网站。</p>
<p><img src="https://img.m-l.cc/2024-08-12-66b9ae2ad8e35.webp" alt="https://img.m-l.cc/2024-08-12-66b9ae2ad8e35.webp"></p>
]]></content>
      <categories>
        <category>网页部署</category>
        <category>OpenAI</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
        <tag>OpenAI</tag>
        <tag>GPT</tag>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>通过cf origin rules端口反代实现家宽建站</title>
    <url>/2023/12/01/tong-guo-cf-origin-rules-duan-kou-fan-dai-shi-xian-jia-kuan-jian-zhan/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>无意间发现cloudflare的origin rules规则，可以进行端口反向代理，将对应端口上的页面代理到正常的80、443上，直接访问。于是开始琢磨起它的使用方法。</p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>这个功能的应用场景非常广泛，据我简单思考大致有以下几点，欢迎补充：</p>
<ol>
<li>家宽，运营商拦截了80、443端口的，可以绕过限制建站。</li>
<li>没有公网ipv4但有ipv6的家宽，可以实现1的同时将ipv6单栈解析转为ipv4、ipv6双栈的。</li>
<li>让限制了端口数量的nat小鸡建站</li>
<li>让纯ipv6小鸡也可以建站（同2）</li>
</ol>
<h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>要实现上述功能原理非常简单，首先我有一个工具域名 <code>tool.example.com</code>ddns解析到了我的家宽。</p>
<p>然后将需要用到的域名如 <code>aaa.example.com</code>cname到工具域名 <code>tool.example.com</code>并打开cf的cdn按钮。</p>
<p>最后创建一条origin rules规则，将 <code>aaa.example.com</code>重写到指定端口。如此即可实现不带端口直接通过域名访问搭建在家宽的站点。</p>
<p>不过cf的免费服务只能创建10个origin rules规则。</p>
<h1 id="具体操作步骤"><a href="#具体操作步骤" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h1><h2 id="方法一：使用nginx、OpenResty等webserver来搭建网页"><a href="#方法一：使用nginx、OpenResty等webserver来搭建网页" class="headerlink" title="方法一：使用nginx、OpenResty等webserver来搭建网页"></a>方法一：使用nginx、OpenResty等webserver来搭建网页</h2><p>优势：</p>
<ol>
<li>可以绕开10条规则的限制，仅仅用一条规则就可以将多个家宽搭建的站点反代出来直接访问。</li>
<li>便于管理</li>
</ol>
<p>不足：</p>
<ol>
<li>如果不使用如宝塔、1panel之类的面板工具的话搭建比较麻烦</li>
</ol>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>我这里直接用1panel面板建站了，各位有什么独特的需求或者可以手搓的，请自便。</p>
<h4 id="1、安装1panel"><a href="#1、安装1panel" class="headerlink" title="1、安装1panel"></a>1、安装1panel</h4><p>参考官方文档采取合适方式安装：<a href="https://1panel.cn/docs/installation/online_installation/">在线安装 - 1Panel 文档</a></p>
<p>安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>目标服务器 IP 地址:目标端口/安全入口<br></code></pre></td></tr></table></figure>

<ul>
<li><strong>如果使用的是云服务器，请至安全组开放目标端口。</strong></li>
<li><strong>ssh 登录 1Panel 服务器后，执行 1pctl user-info 命令可获取安全入口（entrance）</strong></li>
</ul>
<p>安装成功后，可使用 <a href="https://1panel.cn/docs/installation/cli/">1pctl</a> 命令行工具来维护 1Panel</p>
<h4 id="2、安装所需应用"><a href="#2、安装所需应用" class="headerlink" title="2、安装所需应用"></a>2、安装所需应用</h4><p><img src="https://img.m-l.cc/2024-08-12-66b9af0bc79c4.webp" alt="https://img.m-l.cc/2024-08-12-66b9af0bc79c4.webp"></p>
<p>如果需要自己建站的话，可以安装OpenResty、PHP、Mysql等常用工具。</p>
<p>此外1panel还提供大量相关应用程序如Alist、Cloudreve、WordPress等可供直接下载使用。</p>
<h4 id="3、安装OpenResty时记得设置好http站点的默认端口如设成1234，https的端口可以不管。"><a href="#3、安装OpenResty时记得设置好http站点的默认端口如设成1234，https的端口可以不管。" class="headerlink" title="3、安装OpenResty时记得设置好http站点的默认端口如设成1234，https的端口可以不管。"></a>3、安装OpenResty时记得设置好http站点的默认端口如设成1234，https的端口可以不管。</h4><p><img src="https://img.m-l.cc/2024-08-12-66b9aefa4c341.webp" alt="https://img.m-l.cc/2024-08-12-66b9aefa4c341.webp"></p>
<h4 id="4、在ddns脚本中将-tool-example-com工具域名解析到你的家宽ip上。"><a href="#4、在ddns脚本中将-tool-example-com工具域名解析到你的家宽ip上。" class="headerlink" title="4、在ddns脚本中将 tool.example.com工具域名解析到你的家宽ip上。"></a>4、在ddns脚本中将 <code>tool.example.com</code>工具域名解析到你的家宽ip上。</h4><p><img src="https://img.m-l.cc/2024-08-12-66b9af6cdc334.webp" alt="https://img.m-l.cc/2024-08-12-66b9af6cdc334.webp"></p>
<h4 id="5、1p创建一个网站，将域名设为-aaa-example-com"><a href="#5、1p创建一个网站，将域名设为-aaa-example-com" class="headerlink" title="5、1p创建一个网站，将域名设为 aaa.example.com"></a>5、1p创建一个网站，将域名设为 <code>aaa.example.com</code></h4><p><img src="https://img.m-l.cc/2024-08-12-66b9adecb98e6.webp" alt="https://img.m-l.cc/2024-08-12-66b9adecb98e6.webp"></p>
<h4 id="6、在cloudflare创建一个cname记录，将-aaa-example-com解析到-tool-example-com上，并开启cf-cdn。"><a href="#6、在cloudflare创建一个cname记录，将-aaa-example-com解析到-tool-example-com上，并开启cf-cdn。" class="headerlink" title="6、在cloudflare创建一个cname记录，将 aaa.example.com解析到 tool.example.com上，并开启cf cdn。"></a>6、在cloudflare创建一个cname记录，将 <code>aaa.example.com</code>解析到 <code>tool.example.com</code>上，并开启cf cdn。</h4><p><img src="https://img.m-l.cc/2024-08-12-66b9ad894848f.webp" alt="https://img.m-l.cc/2024-08-12-66b9ad894848f.webp"></p>
<h4 id="7、创建一个Origin-rules，将域名aaa-example-com重写到1234端口"><a href="#7、创建一个Origin-rules，将域名aaa-example-com重写到1234端口" class="headerlink" title="7、创建一个Origin rules，将域名aaa.example.com重写到1234端口"></a>7、创建一个Origin rules，将域名aaa.example.com重写到1234端口</h4><p><img src="https://img.m-l.cc/2024-08-12-66b9adb083330.webp" alt="https://img.m-l.cc/2024-08-12-66b9adb083330.webp"></p>
<p>完成，访问你的aaa.example.com就能打开你的网站了。</p>
<h3 id="方法二，直接一个端口搭一个网页，然后每个端口分辨创建一条Origin-rules来转发端口"><a href="#方法二，直接一个端口搭一个网页，然后每个端口分辨创建一条Origin-rules来转发端口" class="headerlink" title="方法二，直接一个端口搭一个网页，然后每个端口分辨创建一条Origin rules来转发端口"></a>方法二，直接一个端口搭一个网页，然后每个端口分辨创建一条Origin rules来转发端口</h3><p>优势：可能省了点事？不需要使用额外的webserver啥的</p>
<p>不足：站点不多还好，站点多了管理麻烦，而且10条规则可能不够用。</p>
<h1 id="以上，完毕"><a href="#以上，完毕" class="headerlink" title="以上，完毕"></a>以上，完毕</h1>]]></content>
      <categories>
        <category>网页部署</category>
      </categories>
      <tags>
        <tag>网页部署</tag>
      </tags>
  </entry>
  <entry>
    <title>随作</title>
    <url>/2020/12/04/sui-zuo/</url>
    <content><![CDATA[<center>

<p>枯木梢头日渐昏，青天如璧雀无痕。<br>北风驱雁恐寒至，三月相邀会剑池。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>随机pixiv画师图片</title>
    <url>/2021/04/06/sui-ji-pixiv-hua-shi-tu-pian/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
这是一个用php创作的随机图片api,图片源自pixiv。
本api创作方式来源自<a href="https://brx86.gitee.io/posts/notes/4-phpapi/">清河的教程</a>


<ul>
<li>以下是随机图片展示  </li>
</ul>
<center><a href="https://cover.dmnb.cf/" data-fancybox="images" data-caption="随机插图"><img src="https://cover.dmnb.cf/" width ="480"    /></a></center>
]]></content>
      <categories>
        <category>api</category>
      </categories>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>雨晴</title>
    <url>/2021/07/06/yu-qing/</url>
    <content><![CDATA[<center>

<p>半片阴云半片晴，<br>焦阳伴雨屐声紧。<br>窃隙偷闲枉称奇，<br>白驹已逝惊还醒。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
  <entry>
    <title>高中诗作十四首</title>
    <url>/2020/12/13/gao-zhong-shi-zuo/</url>
    <content><![CDATA[<center>

<p>坠入<br>清明旦至雨幕堕，名楼檐滴青砖破。<br>依楼西盼湖不见，半楫轻舟入梦边。<br>舟子载我长安渡，但为君故岸徘徊。<br>不图长安青云志，愿与执手白头甘。</p>
<p>梦秋<br>秋月秋高枫叶黄，夜来忽梦月如江。<br>不觉又至一年春，樱花落尽影彷徨。</p>
<a id="more"></a>

<p>梦还<br>冬阳灼灼心意懒，清波鳞鳞浊浪暖。<br>昔年执手临风叹，今朝只影倦梦还。</p>
<p>心雨<br>初阳新悬春正好.骤雨埋心人不晓。<br>犹当及笄立冠时，灵台半毁魂半了。</p>
<p>洞庭雪<br>金鹗歌飞渡银门，洞庭玉满映云轮。<br>轻雪无声随风去，只影独觞念故人。</p>
<p>正月初一游圣安寺<br>佛前青灯览古卷，欲向释迦问俗缘。<br>道是落樱何处去，菩提半子坠心泉。</p>
<p>画茶<br>闲云野鹤饮孤茶，古篆朱泥章自华。<br>数尺青丹世无怨，但题拙笔韵桑麻。</p>
<p>枫琴<br>月下吟章古，枫落韵犹存。<br>叹世鸣鸿曲，抚此唯伊人。</p>
<p>高三<br>墨笔书尽天下意，绢帛写透古今情。<br>自古书生多薄命，余生尽寄简牍轻。</p>
<p>天尊<br>青牛饮雪童笛翠，金丹入酒骤颦眉。<br>千觞孤品终不醉，百转流连盼君回。</p>
<p>送舟<br>夜来江口送行舟，悠悠清水一双鸥。<br>竹筏渐远心难静，宴酣虽乐不如休。<br>遥想昔时秋风扫，惊觉寺里柳条抽。<br>君自随波无忧渡，莫念俗尘逍遥游。</p>
<p>观湖有感<br>闲纵驽马洞庭畔，醉看君山湘妃漫。<br>自有一番凌云志，不震寰宇终不还。</p>
<p>炎野<br>南荒四月艳阳灼，心焦溽暑湿锦罗。<br>忽如一瞬凌霜洗，幽然半影目难挪。</p>
<p>随目小眺<br>灰瓦白墙苏楼月，依依不舍念君回。<br>愿与伊人同舟渡，八百水里莫思归。</p>
</center>
]]></content>
      <categories>
        <category>诗词创作</category>
      </categories>
      <tags>
        <tag>诗集</tag>
      </tags>
  </entry>
</search>
